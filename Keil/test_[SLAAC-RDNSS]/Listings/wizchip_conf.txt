; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\wizchip_conf.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\wizchip_conf.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\wizchip_conf.crf ..\..\Libraries\io6Library\Ethernet\wizchip_conf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  wizchip_cris_enter PROC
;;;44      */
;;;45     void wizchip_cris_enter(void)   {}
000000  4770              BX       lr
;;;46     
                          ENDP

                  wizchip_cris_exit PROC
;;;53      */
;;;54     void wizchip_cris_exit(void)   {}
000002  4770              BX       lr
;;;55     
                          ENDP

                  wizchip_cs_select PROC
;;;62      */
;;;63     void wizchip_cs_select(void)   {}
000004  4770              BX       lr
;;;64     
                          ENDP

                  wizchip_cs_deselect PROC
;;;71      */
;;;72     void wizchip_cs_deselect(void)   {}
000006  4770              BX       lr
;;;73     
                          ENDP

                  wizchip_bus_read PROC
;;;86      */
;;;87     iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
000008  7800              LDRB     r0,[r0,#0]
00000a  4770              BX       lr
;;;88     
                          ENDP

                  wizchip_bus_write PROC
;;;97      */
;;;98     void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
00000c  7001              STRB     r1,[r0,#0]
00000e  4770              BX       lr
;;;99     
                          ENDP

                  wizchip_bus_read_buf PROC
;;;112     */
;;;113    void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
000010  e92d47f0          PUSH     {r4-r10,lr}
;;;114    { 
000014  001e              MOVS     r6,r3
000016  4690              MOV      r8,r2
000018  460d              MOV      r5,r1
00001a  4607              MOV      r7,r0
00001c  d000              BEQ      |L1.32|
;;;115       datasize_t i;
;;;116       if(addrinc) addrinc = sizeof(iodata_t);
00001e  2601              MOVS     r6,#1
                  |L1.32|
;;;117       for ( i = 0; i < len; i++)
000020  2400              MOVS     r4,#0
;;;118       {
;;;119          *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
000022  f8df9448          LDR      r9,|L1.1132|
000026  e008              B        |L1.58|
                  |L1.40|
000028  f8d91018          LDR      r1,[r9,#0x18]  ; WIZCHIP
00002c  4638              MOV      r0,r7
00002e  4788              BLX      r1
;;;120          AddrSel += (uint32_t) addrinc;
000030  1c64              ADDS     r4,r4,#1
000032  f8050b01          STRB     r0,[r5],#1            ;119
000036  4437              ADD      r7,r7,r6
000038  b224              SXTH     r4,r4                 ;117
                  |L1.58|
00003a  4544              CMP      r4,r8                 ;117
00003c  dbf4              BLT      |L1.40|
                  |L1.62|
;;;121       }
;;;122    }
00003e  e8bd87f0          POP      {r4-r10,pc}
;;;123    
                          ENDP

                  wizchip_bus_write_buf PROC
;;;136     */
;;;137    void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
000042  e92d47f0          PUSH     {r4-r10,lr}
;;;138    { 
000046  001e              MOVS     r6,r3
000048  4690              MOV      r8,r2
00004a  460d              MOV      r5,r1
00004c  4607              MOV      r7,r0
00004e  d000              BEQ      |L1.82|
;;;139       datasize_t i;
;;;140       if(addrinc) addrinc = sizeof(iodata_t);
000050  2601              MOVS     r6,#1
                  |L1.82|
;;;141       for( i = 0; i < len ; i++)
000052  2400              MOVS     r4,#0
;;;142       {
;;;143          WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
000054  f8df9414          LDR      r9,|L1.1132|
000058  e008              B        |L1.108|
                  |L1.90|
00005a  f8d9201c          LDR      r2,[r9,#0x1c]  ; WIZCHIP
00005e  f8151b01          LDRB     r1,[r5],#1
000062  4638              MOV      r0,r7
000064  4790              BLX      r2
;;;144          AddrSel += (uint32_t)addrinc;
000066  1c64              ADDS     r4,r4,#1
000068  4437              ADD      r7,r7,r6
00006a  b224              SXTH     r4,r4                 ;141
                  |L1.108|
00006c  4544              CMP      r4,r8                 ;141
00006e  dbf4              BLT      |L1.90|
;;;145       }
;;;146    
;;;147    }
000070  e7e5              B        |L1.62|
;;;148    
                          ENDP

                  reg_wizchip_cris_cbfunc PROC
;;;253    
;;;254    void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
000072  4afe              LDR      r2,|L1.1132|
;;;255    {
000074  b908              CBNZ     r0,|L1.122|
;;;256       if(!cris_en)   WIZCHIP.CRIS._e_n_t_e_r_ = wizchip_cris_enter;
000076  f2af0077          ADR      r0,wizchip_cris_enter + 1
                  |L1.122|
;;;257       else           WIZCHIP.CRIS._e_n_t_e_r_ = cris_en;
00007a  6090              STR      r0,[r2,#8]  ; WIZCHIP
00007c  b109              CBZ      r1,|L1.130|
;;;258       if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
;;;259       else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
00007e  60d1              STR      r1,[r2,#0xc]  ; WIZCHIP
;;;260    }
000080  4770              BX       lr
                  |L1.130|
000082  f2af0081          ADR      r0,wizchip_cris_exit + 1
000086  60d0              STR      r0,[r2,#0xc]          ;258  ; WIZCHIP
000088  4770              BX       lr
;;;261    
                          ENDP

                  reg_wizchip_cs_cbfunc PROC
;;;262    void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
00008a  4af8              LDR      r2,|L1.1132|
;;;263    {
00008c  b908              CBNZ     r0,|L1.146|
;;;264       if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
00008e  f2af008b          ADR      r0,wizchip_cs_select + 1
                  |L1.146|
;;;265       else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
000092  6110              STR      r0,[r2,#0x10]  ; WIZCHIP
000094  b109              CBZ      r1,|L1.154|
;;;266       if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
;;;267       else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
000096  6151              STR      r1,[r2,#0x14]  ; WIZCHIP
;;;268    }
000098  4770              BX       lr
                  |L1.154|
00009a  f2af0095          ADR      r0,wizchip_cs_deselect + 1
00009e  6150              STR      r0,[r2,#0x14]         ;266  ; WIZCHIP
0000a0  4770              BX       lr
;;;269    
                          ENDP

                  reg_wizchip_bus_cbfunc PROC
;;;270    #if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
;;;271    void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
0000a2  b570              PUSH     {r4-r6,lr}
;;;272                                 void (*bus_wd)(uint32_t addr, iodata_t wb),
;;;273                                 void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
;;;274                                 void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
;;;275    {
;;;276       while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
0000a4  4cf1              LDR      r4,|L1.1132|
0000a6  8825              LDRH     r5,[r4,#0]
                  |L1.168|
0000a8  05ee              LSLS     r6,r5,#23
0000aa  d5fd              BPL      |L1.168|
;;;277       if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
0000ac  b908              CBNZ     r0,|L1.178|
0000ae  f2af00a7          ADR      r0,wizchip_bus_read + 1
                  |L1.178|
;;;278       else         WIZCHIP.IF.BUS._read_data   = bus_rd;
0000b2  61a0              STR      r0,[r4,#0x18]  ; WIZCHIP
0000b4  b129              CBZ      r1,|L1.194|
;;;279       if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
;;;280       else         WIZCHIP.IF.BUS._write_data  = bus_wd;
0000b6  61e1              STR      r1,[r4,#0x1c]  ; WIZCHIP
                  |L1.184|
;;;281    
;;;282       if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
0000b8  b13a              CBZ      r2,|L1.202|
;;;283       else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
0000ba  6222              STR      r2,[r4,#0x20]  ; WIZCHIP
                  |L1.188|
;;;284       if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
0000bc  b14b              CBZ      r3,|L1.210|
;;;285       else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
0000be  6263              STR      r3,[r4,#0x24]  ; WIZCHIP
;;;286    }
0000c0  bd70              POP      {r4-r6,pc}
                  |L1.194|
0000c2  f2af00b7          ADR      r0,wizchip_bus_write + 1
0000c6  61e0              STR      r0,[r4,#0x1c]         ;279  ; WIZCHIP
0000c8  e7f6              B        |L1.184|
                  |L1.202|
0000ca  f2af00bb          ADR      r0,wizchip_bus_read_buf + 1
0000ce  6220              STR      r0,[r4,#0x20]         ;282  ; WIZCHIP
0000d0  e7f4              B        |L1.188|
                  |L1.210|
0000d2  f2af0091          ADR      r0,wizchip_bus_write_buf + 1
0000d6  6260              STR      r0,[r4,#0x24]         ;284  ; WIZCHIP
0000d8  bd70              POP      {r4-r6,pc}
;;;287    #endif
                          ENDP

                  wizphy_getphylink PROC
;;;561    
;;;562    int8_t wizphy_getphylink(void)
0000da  b510              PUSH     {r4,lr}
;;;563    {
;;;564    #if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
;;;565       return (getPHYSR() & PHYSR_LNK);
0000dc  48e4              LDR      r0,|L1.1136|
0000de  f7fffffe          BL       WIZCHIP_READ
0000e2  f0000001          AND      r0,r0,#1
;;;566    #elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
;;;567       if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
;;;568       return PHY_LINK_OFF;
;;;569    #endif  
;;;570    }
0000e6  bd10              POP      {r4,pc}
;;;571    
                          ENDP

                  wizphy_getphypmode PROC
;;;672    
;;;673    int8_t wizphy_getphypmode(void)
0000e8  b510              PUSH     {r4,lr}
;;;674    {
;;;675    #if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
;;;676       if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
0000ea  48e2              LDR      r0,|L1.1140|
0000ec  f7fffffe          BL       WIZCHIP_READ
0000f0  0680              LSLS     r0,r0,#26
0000f2  d501              BPL      |L1.248|
0000f4  2001              MOVS     r0,#1
;;;677    #elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
;;;678       if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
;;;679    #endif   
;;;680       return PHY_POWER_NORM;
;;;681    }
0000f6  bd10              POP      {r4,pc}
                  |L1.248|
0000f8  2000              MOVS     r0,#0                 ;680
0000fa  bd10              POP      {r4,pc}
;;;682    
                          ENDP

                  wizphy_setphypmode PROC
;;;656    
;;;657    void wizphy_setphypmode(uint8_t pmode)
0000fc  b570              PUSH     {r4-r6,lr}
;;;658    {
;;;659    #if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
;;;660       uint8_t tmp = getPHYCR1();
0000fe  4ddd              LDR      r5,|L1.1140|
000100  4604              MOV      r4,r0                 ;658
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       WIZCHIP_READ
;;;661       if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
000108  2c01              CMP      r4,#1
00010a  d006              BEQ      |L1.282|
;;;662       else                            tmp &= ~PHYCR1_PWDN;
00010c  f0200120          BIC      r1,r0,#0x20
                  |L1.272|
;;;663       setPHYCR1(tmp);
000110  4628              MOV      r0,r5
000112  e8bd4070          POP      {r4-r6,lr}
000116  f7ffbffe          B.W      WIZCHIP_WRITE
                  |L1.282|
00011a  f0400120          ORR      r1,r0,#0x20           ;661
00011e  e7f7              B        |L1.272|
;;;664    #elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
;;;665       uint16_t tmp = 0;
;;;666       tmp = wiz_mdio_read(PHYRAR_BMCR);
;;;667       if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
;;;668       else                            tmp &= ~BMCR_PWDN;
;;;669       wiz_mdio_write(PHYRAR_BMCR, tmp);
;;;670    #endif   
;;;671    }
;;;672    
                          ENDP

                  wizphy_getphystatus PROC
;;;646    
;;;647    void wizphy_getphystatus(wiz_PhyConf* phyconf)
000120  b570              PUSH     {r4-r6,lr}
;;;648    {
000122  4604              MOV      r4,r0
;;;649       uint8_t tmp = 0;
;;;650       tmp = getPHYSR();
000124  48d2              LDR      r0,|L1.1136|
000126  f7fffffe          BL       WIZCHIP_READ
00012a  4605              MOV      r5,r0
;;;651       if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
00012c  48d1              LDR      r0,|L1.1140|
00012e  f7fffffe          BL       WIZCHIP_READ
000132  0700              LSLS     r0,r0,#28
000134  d501              BPL      |L1.314|
000136  2002              MOVS     r0,#2
000138  e002              B        |L1.320|
                  |L1.314|
;;;652       else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
00013a  f3451040          SBFX     r0,r5,#5,#1
00013e  1c40              ADDS     r0,r0,#1
                  |L1.320|
000140  7020              STRB     r0,[r4,#0]
;;;653       phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
000142  f3450040          SBFX     r0,r5,#1,#1
000146  1c40              ADDS     r0,r0,#1
000148  7060              STRB     r0,[r4,#1]
;;;654       phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
00014a  f3450080          SBFX     r0,r5,#2,#1
00014e  1c40              ADDS     r0,r0,#1
000150  70a0              STRB     r0,[r4,#2]
;;;655    }
000152  bd70              POP      {r4-r6,pc}
;;;656    
                          ENDP

                  wizphy_getphyconf PROC
;;;627    
;;;628    void wizphy_getphyconf(wiz_PhyConf* phyconf)
000154  b570              PUSH     {r4-r6,lr}
;;;629    {
000156  4604              MOV      r4,r0
;;;630    #if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
;;;631       uint8_t tmp = 0;
;;;632       tmp = getPHYSR();
000158  48c5              LDR      r0,|L1.1136|
00015a  f7fffffe          BL       WIZCHIP_READ
00015e  4605              MOV      r5,r0
;;;633       if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
000160  48c4              LDR      r0,|L1.1140|
000162  f7fffffe          BL       WIZCHIP_READ
000166  0700              LSLS     r0,r0,#28
000168  d501              BPL      |L1.366|
00016a  2002              MOVS     r0,#2
00016c  e002              B        |L1.372|
                  |L1.366|
;;;634       else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
00016e  f3451040          SBFX     r0,r5,#5,#1
000172  1c40              ADDS     r0,r0,#1
                  |L1.372|
000174  7020              STRB     r0,[r4,#0]
;;;635       phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
000176  f3451000          SBFX     r0,r5,#4,#1
00017a  1c40              ADDS     r0,r0,#1
00017c  7060              STRB     r0,[r4,#1]
;;;636       phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
00017e  f34500c0          SBFX     r0,r5,#3,#1
000182  1c40              ADDS     r0,r0,#1
000184  70a0              STRB     r0,[r4,#2]
;;;637    #elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
;;;638       uint16_t tmp = 0;
;;;639       tmp = wiz_mdio_read(PHYRAR_BMCR);
;;;640       if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
;;;641       else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
;;;642       phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
;;;643       phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
;;;644    #endif
;;;645    }
000186  bd70              POP      {r4-r6,pc}
;;;646    
                          ENDP

                  wizphy_setphyconf PROC
;;;584    
;;;585    void wizphy_setphyconf(wiz_PhyConf* phyconf)
000188  b570              PUSH     {r4-r6,lr}
;;;586    {
00018a  4605              MOV      r5,r0
;;;587    #if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
;;;588       uint8_t tmp = 0;
;;;589       if(phyconf->mode == PHY_MODE_TE)
00018c  7800              LDRB     r0,[r0,#0]
00018e  2400              MOVS     r4,#0                 ;588
;;;590       {
;;;591          setPHYCR1(getPHYCR1() | PHYCR1_TE);
000190  4eb8              LDR      r6,|L1.1140|
000192  2802              CMP      r0,#2                 ;589
;;;592          tmp = PHYCR0_AUTO;
;;;593       }
;;;594       else
;;;595       {
;;;596          setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
000194  4630              MOV      r0,r6
000196  d00d              BEQ      |L1.436|
000198  f7fffffe          BL       WIZCHIP_READ
00019c  f0200108          BIC      r1,r0,#8
0001a0  4630              MOV      r0,r6
0001a2  f7fffffe          BL       WIZCHIP_WRITE
;;;597          if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
0001a6  7828              LDRB     r0,[r5,#0]
0001a8  2801              CMP      r0,#1
0001aa  d010              BEQ      |L1.462|
;;;598          else
;;;599          {
;;;600             tmp |= 0x04;
;;;601             if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
0001ac  7868              LDRB     r0,[r5,#1]
0001ae  2404              MOVS     r4,#4                 ;600
0001b0  b140              CBZ      r0,|L1.452|
0001b2  e008              B        |L1.454|
                  |L1.436|
0001b4  f7fffffe          BL       WIZCHIP_READ
0001b8  f0400108          ORR      r1,r0,#8              ;591
0001bc  4630              MOV      r0,r6                 ;591
0001be  f7fffffe          BL       WIZCHIP_WRITE
0001c2  e004              B        |L1.462|
                  |L1.452|
0001c4  2406              MOVS     r4,#6
                  |L1.454|
;;;602             if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
0001c6  78a8              LDRB     r0,[r5,#2]
0001c8  b908              CBNZ     r0,|L1.462|
0001ca  f0440401          ORR      r4,r4,#1
                  |L1.462|
;;;603          }
;;;604       }
;;;605       setPHYCR0(tmp);
0001ce  4621              MOV      r1,r4
0001d0  e8bd4070          POP      {r4-r6,lr}
0001d4  48a8              LDR      r0,|L1.1144|
0001d6  f7ffbffe          B.W      WIZCHIP_WRITE
;;;606    #elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
;;;607       uint16_t tmp = wiz_mdio_read(PHYRAR_BMCR);
;;;608       if(phyconf->mode == PHY_MODE_TE)
;;;609       {
;;;610          setPHYCR1(getPHYC1R() | PHYCR1_TE);
;;;611          setPHYCR0(PHYCR0_AUTO);
;;;612       }
;;;613       else
;;;614       {
;;;615    	  setPHYCR1(getPHYC1R() & ~PHYCR1_TE);
;;;616          if(phyconf->mode == PHY_MODE_AUTONEGO) tmp |= BMCR_ANE;
;;;617          else
;;;618          {
;;;619    	     tmp &= ~(BMCR_ANE|BMCR_DPX|BMCR_SPD);
;;;620             if(phyconf->duplex == PHY_DUPLEX_FULL) tmp |= BMCR_DPX;
;;;621             if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
;;;622          }
;;;623          wiz_mdio_write(PHYRAR_BMCR, tmp);
;;;624       }
;;;625    #endif   
;;;626    }
;;;627    
                          ENDP

                  wizphy_reset PROC
;;;571    
;;;572    void wizphy_reset(void)
0001da  b570              PUSH     {r4-r6,lr}
;;;573    {
;;;574    #if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
;;;575       uint8_t tmp = getPHYCR1() | PHYCR1_RST;
0001dc  4da5              LDR      r5,|L1.1140|
0001de  4628              MOV      r0,r5
0001e0  f7fffffe          BL       WIZCHIP_READ
;;;576       PHYUNLOCK();
0001e4  4ea5              LDR      r6,|L1.1148|
0001e6  f0400401          ORR      r4,r0,#1              ;575
0001ea  2153              MOVS     r1,#0x53
0001ec  4630              MOV      r0,r6
0001ee  f7fffffe          BL       WIZCHIP_WRITE
;;;577       setPHYCR1(tmp);
0001f2  4621              MOV      r1,r4
0001f4  4628              MOV      r0,r5
0001f6  f7fffffe          BL       WIZCHIP_WRITE
;;;578       PHYLOCK();
0001fa  4630              MOV      r0,r6
0001fc  e8bd4070          POP      {r4-r6,lr}
000200  21ff              MOVS     r1,#0xff
000202  f7ffbffe          B.W      WIZCHIP_WRITE
;;;579    #elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
;;;580    	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
;;;581    	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
;;;582    #endif
;;;583    }
;;;584    
                          ENDP

                  wizchip_getinterruptmask PROC
;;;554    
;;;555    intr_kind wizchip_getinterruptmask(void)
000206  b510              PUSH     {r4,lr}
;;;556    {
;;;557       uint32_t ret;
;;;558       ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
000208  489d              LDR      r0,|L1.1152|
00020a  f7fffffe          BL       WIZCHIP_READ
00020e  0404              LSLS     r4,r0,#16
000210  489c              LDR      r0,|L1.1156|
000212  f7fffffe          BL       WIZCHIP_READ
000216  ea442400          ORR      r4,r4,r0,LSL #8
00021a  489b              LDR      r0,|L1.1160|
00021c  f7fffffe          BL       WIZCHIP_READ
000220  4320              ORRS     r0,r0,r4
;;;559       return (intr_kind)ret;
;;;560    }
000222  bd10              POP      {r4,pc}
;;;561    
                          ENDP

                  wizchip_setinterruptmask PROC
;;;544    
;;;545    void wizchip_setinterruptmask(intr_kind intr)
000224  b570              PUSH     {r4-r6,lr}
;;;546    {
;;;547       uint8_t imr   = (uint8_t)intr;
000226  b2c1              UXTB     r1,r0
;;;548       uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
000228  f3c02407          UBFX     r4,r0,#8,#8
;;;549       uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
00022c  f3c04507          UBFX     r5,r0,#16,#8
;;;550       setIMR(imr);
000230  4895              LDR      r0,|L1.1160|
000232  f7fffffe          BL       WIZCHIP_WRITE
;;;551       setSIMR(simr);
000236  4621              MOV      r1,r4
000238  4892              LDR      r0,|L1.1156|
00023a  f7fffffe          BL       WIZCHIP_WRITE
;;;552       setSLIMR(slimr);
00023e  4629              MOV      r1,r5
000240  e8bd4070          POP      {r4-r6,lr}
000244  488e              LDR      r0,|L1.1152|
000246  f7ffbffe          B.W      WIZCHIP_WRITE
;;;553    }
;;;554    
                          ENDP

                  wizchip_clrinterrupt PROC
;;;523    
;;;524    void wizchip_clrinterrupt(intr_kind intr)
00024a  e92d41f0          PUSH     {r4-r8,lr}
;;;525    {
;;;526       int i;
;;;527       uint8_t ir   = (uint8_t)intr;
00024e  b2c1              UXTB     r1,r0
;;;528       uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
000250  f3c02507          UBFX     r5,r0,#8,#8
;;;529       uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
000254  f3c04807          UBFX     r8,r0,#16,#8
;;;530       setIRCLR(ir);
000258  488c              LDR      r0,|L1.1164|
00025a  f7fffffe          BL       WIZCHIP_WRITE
;;;531       for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
00025e  2400              MOVS     r4,#0
;;;532       {
;;;533       	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
000260  4f8b              LDR      r7,|L1.1168|
000262  2601              MOVS     r6,#1
                  |L1.612|
000264  fa06f004          LSL      r0,r6,r4
000268  4228              TST      r0,r5
00026a  d004              BEQ      |L1.630|
00026c  eb071044          ADD      r0,r7,r4,LSL #5
000270  21ff              MOVS     r1,#0xff
000272  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.630|
000276  1c64              ADDS     r4,r4,#1
000278  2c08              CMP      r4,#8                 ;531
00027a  dbf3              BLT      |L1.612|
;;;534       }
;;;535       setSLIRCLR(slir);
00027c  4641              MOV      r1,r8
00027e  e8bd41f0          POP      {r4-r8,lr}
000282  4884              LDR      r0,|L1.1172|
000284  f7ffbffe          B.W      WIZCHIP_WRITE
;;;536    }
;;;537    
                          ENDP

                  wizchip_getinterrupt PROC
;;;538    intr_kind wizchip_getinterrupt(void)
000288  b510              PUSH     {r4,lr}
;;;539    {
;;;540       uint32_t ret;
;;;541       ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
00028a  4883              LDR      r0,|L1.1176|
00028c  f7fffffe          BL       WIZCHIP_READ
000290  0404              LSLS     r4,r0,#16
000292  4882              LDR      r0,|L1.1180|
000294  f7fffffe          BL       WIZCHIP_READ
000298  ea442400          ORR      r4,r4,r0,LSL #8
00029c  4880              LDR      r0,|L1.1184|
00029e  f7fffffe          BL       WIZCHIP_READ
0002a2  4320              ORRS     r0,r0,r4
;;;542       return (intr_kind)ret;
;;;543    }
0002a4  bd10              POP      {r4,pc}
;;;544    
                          ENDP

                  wizchip_sw_reset PROC
;;;468    
;;;469    void wizchip_sw_reset(void)
0002a6  e92d4ff0          PUSH     {r4-r11,lr}
;;;470    {
0002aa  b095              SUB      sp,sp,#0x54
;;;471       uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
;;;472       uint8_t mac[6];
;;;473       uint8_t islock = getSYSR();
0002ac  487d              LDR      r0,|L1.1188|
0002ae  f7fffffe          BL       WIZCHIP_READ
0002b2  4604              MOV      r4,r0
;;;474    
;;;475       CHIPUNLOCK();
0002b4  21ce              MOVS     r1,#0xce
0002b6  487c              LDR      r0,|L1.1192|
0002b8  f7fffffe          BL       WIZCHIP_WRITE
;;;476    
;;;477       getSHAR(mac);
0002bc  4d7b              LDR      r5,|L1.1196|
0002be  2206              MOVS     r2,#6
0002c0  a910              ADD      r1,sp,#0x40
0002c2  4628              MOV      r0,r5
0002c4  f7fffffe          BL       WIZCHIP_READ_BUF
;;;478       getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
0002c8  4e79              LDR      r6,|L1.1200|
0002ca  2204              MOVS     r2,#4
0002cc  a912              ADD      r1,sp,#0x48
0002ce  4630              MOV      r0,r6
0002d0  f7fffffe          BL       WIZCHIP_READ_BUF
0002d4  4f77              LDR      r7,|L1.1204|
0002d6  2204              MOVS     r2,#4
0002d8  a913              ADD      r1,sp,#0x4c
0002da  4638              MOV      r0,r7
0002dc  f7fffffe          BL       WIZCHIP_READ_BUF
0002e0  f8df81d4          LDR      r8,|L1.1208|
0002e4  2204              MOVS     r2,#4
0002e6  a914              ADD      r1,sp,#0x50
0002e8  4640              MOV      r0,r8
0002ea  f7fffffe          BL       WIZCHIP_READ_BUF
0002ee  f8df91cc          LDR      r9,|L1.1212|
0002f2  2210              MOVS     r2,#0x10
0002f4  4669              MOV      r1,sp
0002f6  4648              MOV      r0,r9
0002f8  f7fffffe          BL       WIZCHIP_READ_BUF
0002fc  f8dfa1c0          LDR      r10,|L1.1216|
000300  2210              MOVS     r2,#0x10
000302  a904              ADD      r1,sp,#0x10
000304  4650              MOV      r0,r10
000306  f7fffffe          BL       WIZCHIP_READ_BUF
00030a  f8dfb1b8          LDR      r11,|L1.1220|
00030e  2210              MOVS     r2,#0x10
000310  a908              ADD      r1,sp,#0x20
000312  4658              MOV      r0,r11
000314  f7fffffe          BL       WIZCHIP_READ_BUF
000318  2210              MOVS     r2,#0x10
00031a  a90c              ADD      r1,sp,#0x30
00031c  486a              LDR      r0,|L1.1224|
00031e  f7fffffe          BL       WIZCHIP_READ_BUF
;;;479       setSYCR0(SYCR0_RST);
000322  2100              MOVS     r1,#0
000324  4869              LDR      r0,|L1.1228|
000326  f7fffffe          BL       WIZCHIP_WRITE
;;;480       getSYCR0(); // for delay
00032a  4868              LDR      r0,|L1.1228|
00032c  f7fffffe          BL       WIZCHIP_READ
;;;481    
;;;482       NETUNLOCK();
000330  213a              MOVS     r1,#0x3a
000332  4867              LDR      r0,|L1.1232|
000334  f7fffffe          BL       WIZCHIP_WRITE
;;;483    
;;;484       setSHAR(mac);
000338  2206              MOVS     r2,#6
00033a  a910              ADD      r1,sp,#0x40
00033c  4628              MOV      r0,r5
00033e  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;485       setGAR(gw);
000342  2204              MOVS     r2,#4
000344  a912              ADD      r1,sp,#0x48
000346  4630              MOV      r0,r6
000348  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;486       setSUBR(sn);
00034c  2204              MOVS     r2,#4
00034e  a913              ADD      r1,sp,#0x4c
000350  4638              MOV      r0,r7
000352  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;487       setSIPR(sip);
000356  2204              MOVS     r2,#4
000358  a914              ADD      r1,sp,#0x50
00035a  4640              MOV      r0,r8
00035c  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;488       setGA6R(gw6); 
000360  2210              MOVS     r2,#0x10
000362  4669              MOV      r1,sp
000364  4648              MOV      r0,r9
000366  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;489       setSUB6R(sn6); 
00036a  2210              MOVS     r2,#0x10
00036c  a904              ADD      r1,sp,#0x10
00036e  4650              MOV      r0,r10
000370  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;490       setLLAR(lla);
000374  2210              MOVS     r2,#0x10
000376  a908              ADD      r1,sp,#0x20
000378  4658              MOV      r0,r11
00037a  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;491       setGUAR(gua);
00037e  2210              MOVS     r2,#0x10
000380  a90c              ADD      r1,sp,#0x30
000382  4851              LDR      r0,|L1.1224|
000384  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;492       if(islock & SYSR_CHPL) CHIPLOCK();
000388  0620              LSLS     r0,r4,#24
00038a  d503              BPL      |L1.916|
00038c  21ff              MOVS     r1,#0xff
00038e  4846              LDR      r0,|L1.1192|
000390  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.916|
;;;493       if(islock & SYSR_NETL) NETLOCK();
000394  0660              LSLS     r0,r4,#25
000396  d503              BPL      |L1.928|
000398  21c5              MOVS     r1,#0xc5
00039a  484d              LDR      r0,|L1.1232|
00039c  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.928|
;;;494    }
0003a0  b015              ADD      sp,sp,#0x54
0003a2  e8bd8ff0          POP      {r4-r11,pc}
;;;495    
                          ENDP

                  wizchip_init PROC
;;;496    int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
0003a6  e92d41f0          PUSH     {r4-r8,lr}
;;;497    {
0003aa  460d              MOV      r5,r1
0003ac  4606              MOV      r6,r0
;;;498       int8_t i;
;;;499       int8_t tmp = 0;
0003ae  2400              MOVS     r4,#0
;;;500       wizchip_sw_reset();
0003b0  f7fffffe          BL       wizchip_sw_reset
;;;501       if(txsize)
;;;502       {
;;;503          tmp = 0;
;;;504    			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
;;;505    			{
;;;506    				tmp += txsize[i];		
;;;507    				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
0003b4  f04f38ff          MOV      r8,#0xffffffff
0003b8  b1a6              CBZ      r6,|L1.996|
0003ba  2200              MOVS     r2,#0                 ;504
                  |L1.956|
0003bc  5cb0              LDRB     r0,[r6,r2]            ;506
0003be  4420              ADD      r0,r0,r4              ;506
0003c0  b244              SXTB     r4,r0                 ;506
0003c2  2c10              CMP      r4,#0x10
0003c4  dc16              BGT      |L1.1012|
0003c6  1c52              ADDS     r2,r2,#1
0003c8  b252              SXTB     r2,r2                 ;504
0003ca  2a08              CMP      r2,#8                 ;504
0003cc  dbf6              BLT      |L1.956|
;;;508    			}
;;;509    			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
0003ce  4f41              LDR      r7,|L1.1236|
0003d0  2400              MOVS     r4,#0
                  |L1.978|
0003d2  eb071044          ADD      r0,r7,r4,LSL #5
0003d6  5d31              LDRB     r1,[r6,r4]
0003d8  f7fffffe          BL       WIZCHIP_WRITE
0003dc  1c64              ADDS     r4,r4,#1
0003de  b264              SXTB     r4,r4
0003e0  2c08              CMP      r4,#8
0003e2  dbf6              BLT      |L1.978|
                  |L1.996|
;;;510       }
;;;511       if(rxsize)
0003e4  b1c5              CBZ      r5,|L1.1048|
;;;512       {
;;;513          tmp = 0;
0003e6  2100              MOVS     r1,#0
;;;514    			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
0003e8  4608              MOV      r0,r1
                  |L1.1002|
;;;515    			{
;;;516    				tmp += rxsize[i];		
0003ea  5c2a              LDRB     r2,[r5,r0]
0003ec  4411              ADD      r1,r1,r2
0003ee  b249              SXTB     r1,r1
;;;517    				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
0003f0  2910              CMP      r1,#0x10
0003f2  dd02              BLE      |L1.1018|
                  |L1.1012|
0003f4  4640              MOV      r0,r8
                  |L1.1014|
;;;518    			}
;;;519    			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
;;;520       }
;;;521       return 0;
;;;522    }
0003f6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1018|
0003fa  1c40              ADDS     r0,r0,#1
0003fc  b240              SXTB     r0,r0                 ;514
0003fe  2808              CMP      r0,#8                 ;514
000400  dbf3              BLT      |L1.1002|
000402  4e35              LDR      r6,|L1.1240|
000404  2400              MOVS     r4,#0                 ;519
                  |L1.1030|
000406  eb061044          ADD      r0,r6,r4,LSL #5       ;519
00040a  5d29              LDRB     r1,[r5,r4]            ;519
00040c  f7fffffe          BL       WIZCHIP_WRITE
000410  1c64              ADDS     r4,r4,#1              ;519
000412  b264              SXTB     r4,r4                 ;519
000414  2c08              CMP      r4,#8                 ;519
000416  dbf6              BLT      |L1.1030|
                  |L1.1048|
000418  2000              MOVS     r0,#0                 ;521
00041a  e7ec              B        |L1.1014|
;;;523    
                          ENDP

                  ctlwizchip PROC
;;;310    
;;;311    int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
00041c  e92d47f0          PUSH     {r4-r10,lr}
;;;312    {
000420  460c              MOV      r4,r1
;;;313       uint8_t tmp = *(uint8_t*) arg;
000422  780d              LDRB     r5,[r1,#0]
000424  4603              MOV      r3,r0                 ;312
;;;314    
;;;315       uint8_t* ptmp[2] = {0,0};
000426  2100              MOVS     r1,#0
;;;316       switch(cwtype)
;;;317       {
;;;318          case CW_SYS_LOCK:
;;;319             if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
000428  f8dfc07c          LDR      r12,|L1.1192|
;;;320             if(tmp & SYS_NET_LOCK)  NETLOCK();
00042c  f8df90a0          LDR      r9,|L1.1232|
;;;321             if(tmp & SYS_PHY_LOCK)  PHYLOCK();
000430  f8dfa048          LDR      r10,|L1.1148|
;;;322             break;
;;;323          case CW_SYS_UNLOCK:
;;;324             if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
;;;325             if(tmp & SYS_NET_LOCK)  NETUNLOCK();
;;;326             if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
;;;327             break;
;;;328          case CW_GET_SYSLOCK:
;;;329             *(uint8_t*)arg = getSYSR() >> 5;
;;;330             break;
;;;331          case CW_RESET_WIZCHIP:
;;;332             wizchip_sw_reset();
;;;333             break;
;;;334          case CW_INIT_WIZCHIP:
;;;335             if(arg != 0) 
;;;336             {
;;;337                ptmp[0] = (uint8_t*)arg;
;;;338                ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
;;;339             }
;;;340             return wizchip_init(ptmp[0], ptmp[1]);
;;;341          case CW_GET_INTERRUPT:
;;;342            *(intr_kind*)arg = wizchip_getinterrupt();
;;;343             break;
;;;344          case CW_CLR_INTERRUPT:
;;;345             wizchip_clrinterrupt(*(intr_kind*)arg);
;;;346             break;
;;;347          case CW_SET_INTRMASK:
;;;348             wizchip_setinterruptmask(*(intr_kind*)arg);
;;;349             break;         
;;;350          case CW_GET_INTRMASK:
;;;351             *(intr_kind*)arg = wizchip_getinterruptmask();
;;;352             break;   
;;;353          case CW_SET_INTRTIME:
;;;354             setINTPTMR(*(uint16_t*)arg);
000434  4e29              LDR      r6,|L1.1244|
000436  4f2a              LDR      r7,|L1.1248|
;;;355             break;
;;;356          case CW_GET_INTRTIME:
;;;357             *(uint16_t*)arg = getINTPTMR();
;;;358             break;   
;;;359          case CW_SET_IEN:
;;;360             tmp = getSYCR1();
000438  482a              LDR      r0,|L1.1252|
00043a  460a              MOV      r2,r1                 ;315
00043c  2b18              CMP      r3,#0x18              ;316
00043e  d272              BCS      |L1.1318|
000440  e8dff003          TBB      [pc,r3]               ;316
000444  0c5b6c72          DCB      0x0c,0x5b,0x6c,0x72
000448  757d8084          DCB      0x75,0x7d,0x80,0x84
00044c  888c949a          DCB      0x88,0x8c,0x94,0x9a
000450  a6abb8c3          DCB      0xa6,0xab,0xb8,0xc3
000454  d4d9dce0          DCB      0xd4,0xd9,0xdc,0xe0
000458  e4e8eff2          DCB      0xe4,0xe8,0xef,0xf2
00045c  0768              LSLS     r0,r5,#29             ;319
00045e  d503              BPL      |L1.1128|
000460  21ff              MOVS     r1,#0xff              ;319
000462  4660              MOV      r0,r12                ;319
000464  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1128|
000468  07a8              LSLS     r0,r5,#30             ;320
00046a  e03d              B        |L1.1256|
                  |L1.1132|
                          DCD      ||.data||+0x8
                  |L1.1136|
                          DCD      0x60300000
                  |L1.1140|
                          DCD      0x60301d00
                  |L1.1144|
                          DCD      0x60301c00
                  |L1.1148|
                          DCD      0x6041f600
                  |L1.1152|
                          DCD      0x60212400
                  |L1.1156|
                          DCD      0x60211400
                  |L1.1160|
                          DCD      0x60210400
                  |L1.1164|
                          DCD      0x60210800
                  |L1.1168|
                          DCD      0x60002808
                  |L1.1172|
                          DCD      0x60212800
                  |L1.1176|
                          DCD      0x60210200
                  |L1.1180|
                          DCD      0x60210100
                  |L1.1184|
                          DCD      0x60210000
                  |L1.1188|
                          DCD      0x60200000
                  |L1.1192|
                          DCD      0x6041f400
                  |L1.1196|
                          DCD      0x60412000
                  |L1.1200|
                          DCD      0x60413000
                  |L1.1204|
                          DCD      0x60413400
                  |L1.1208|
                          DCD      0x60413800
                  |L1.1212|
                          DCD      0x60417000
                  |L1.1216|
                          DCD      0x60416000
                  |L1.1220|
                          DCD      0x60414000
                  |L1.1224|
                          DCD      0x60415000
                  |L1.1228|
                          DCD      0x60200400
                  |L1.1232|
                          DCD      0x6041f500
                  |L1.1236|
                          DCD      0x60020008
                  |L1.1240|
                          DCD      0x60022008
                  |L1.1244|
                          DCD      0x6041c500
                  |L1.1248|
                          DCD      0x6041c600
                  |L1.1252|
                          DCD      0x60200500
                  |L1.1256|
0004e8  d503              BPL      |L1.1266|
0004ea  21c5              MOVS     r1,#0xc5              ;320
0004ec  4648              MOV      r0,r9                 ;320
0004ee  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1266|
0004f2  07e8              LSLS     r0,r5,#31             ;321
0004f4  d01a              BEQ      |L1.1324|
0004f6  21ff              MOVS     r1,#0xff              ;321
0004f8  e00e              B        |L1.1304|
0004fa  0768              LSLS     r0,r5,#29             ;324
0004fc  d503              BPL      |L1.1286|
0004fe  21ce              MOVS     r1,#0xce              ;324
000500  4660              MOV      r0,r12                ;324
000502  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1286|
000506  07a8              LSLS     r0,r5,#30             ;325
000508  d503              BPL      |L1.1298|
00050a  213a              MOVS     r1,#0x3a              ;325
00050c  4648              MOV      r0,r9                 ;325
00050e  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1298|
000512  07e8              LSLS     r0,r5,#31             ;326
000514  d00a              BEQ      |L1.1324|
000516  2153              MOVS     r1,#0x53              ;326
                  |L1.1304|
000518  4650              MOV      r0,r10                ;321
00051a  e064              B        |L1.1510|
00051c  48fd              LDR      r0,|L1.2324|
00051e  f7fffffe          BL       WIZCHIP_READ
000522  0940              LSRS     r0,r0,#5              ;329
000524  e037              B        |L1.1430|
                  |L1.1318|
000526  e082              B        |L1.1582|
000528  f7fffffe          BL       wizchip_sw_reset
                  |L1.1324|
00052c  e075              B        |L1.1562|
00052e  b114              CBZ      r4,|L1.1334|
000530  4622              MOV      r2,r4                 ;337
000532  f1040108          ADD      r1,r4,#8              ;338
                  |L1.1334|
000536  e8bd47f0          POP      {r4-r10,lr}           ;340
00053a  4610              MOV      r0,r2                 ;340
00053c  e7fe              B        wizchip_init
00053e  f7fffffe          BL       wizchip_getinterrupt
000542  e009              B        |L1.1368|
000544  6820              LDR      r0,[r4,#0]            ;345
000546  f7fffffe          BL       wizchip_clrinterrupt
00054a  e066              B        |L1.1562|
00054c  6820              LDR      r0,[r4,#0]            ;348
00054e  f7fffffe          BL       wizchip_setinterruptmask
000552  e062              B        |L1.1562|
000554  f7fffffe          BL       wizchip_getinterruptmask
                  |L1.1368|
000558  6020              STR      r0,[r4,#0]            ;342
00055a  e05e              B        |L1.1562|
00055c  8820              LDRH     r0,[r4,#0]            ;354
00055e  0a01              LSRS     r1,r0,#8              ;354
000560  4630              MOV      r0,r6                 ;354
000562  f7fffffe          BL       WIZCHIP_WRITE
000566  7821              LDRB     r1,[r4,#0]            ;354
000568  4638              MOV      r0,r7                 ;354
00056a  e03c              B        |L1.1510|
00056c  4638              MOV      r0,r7                 ;357
00056e  f7fffffe          BL       WIZCHIP_READ
000572  4605              MOV      r5,r0                 ;357
000574  4630              MOV      r0,r6                 ;357
000576  e022              B        |L1.1470|
000578  4605              MOV      r5,r0
00057a  f7fffffe          BL       WIZCHIP_READ
;;;361             if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
00057e  7821              LDRB     r1,[r4,#0]
000580  2901              CMP      r1,#1
000582  d002              BEQ      |L1.1418|
;;;362             else                      setSYCR1(tmp & ~SYCR1_IEN);
000584  f0200180          BIC      r1,r0,#0x80
000588  e02c              B        |L1.1508|
                  |L1.1418|
00058a  f0400180          ORR      r1,r0,#0x80           ;361
00058e  e029              B        |L1.1508|
;;;363             break;
;;;364          case CW_GET_IEN:
;;;365             *((uint8_t*)arg) = getSYCR1() >> 7;
000590  f7fffffe          BL       WIZCHIP_READ
000594  09c0              LSRS     r0,r0,#7
                  |L1.1430|
000596  7020              STRB     r0,[r4,#0]            ;329
000598  e03f              B        |L1.1562|
;;;366             break;
;;;367          case CW_GET_ID:
;;;368             ((uint8_t*)arg)[0] = WIZCHIP.id[0];
00059a  48df              LDR      r0,|L1.2328|
00059c  7882              LDRB     r2,[r0,#2]  ; WIZCHIP
00059e  7022              STRB     r2,[r4,#0]
;;;369             ((uint8_t*)arg)[1] = WIZCHIP.id[1];
0005a0  78c2              LDRB     r2,[r0,#3]  ; WIZCHIP
0005a2  7062              STRB     r2,[r4,#1]
;;;370             ((uint8_t*)arg)[2] = WIZCHIP.id[2];
0005a4  7902              LDRB     r2,[r0,#4]  ; WIZCHIP
0005a6  70a2              STRB     r2,[r4,#2]
;;;371             ((uint8_t*)arg)[3] = WIZCHIP.id[3];
0005a8  7942              LDRB     r2,[r0,#5]  ; WIZCHIP
0005aa  70e2              STRB     r2,[r4,#3]
;;;372             ((uint8_t*)arg)[4] = WIZCHIP.id[4];
0005ac  7980              LDRB     r0,[r0,#6]  ; WIZCHIP
0005ae  7120              STRB     r0,[r4,#4]
;;;373             ((uint8_t*)arg)[5] = 0;
0005b0  7161              STRB     r1,[r4,#5]
;;;374             break;   
0005b2  e032              B        |L1.1562|
;;;375          case CW_GET_VER:
;;;376             *(uint16_t*)arg = getVER();
0005b4  48d9              LDR      r0,|L1.2332|
0005b6  f7fffffe          BL       WIZCHIP_READ
0005ba  4605              MOV      r5,r0
0005bc  48d8              LDR      r0,|L1.2336|
                  |L1.1470|
0005be  f7fffffe          BL       WIZCHIP_READ
0005c2  eb052000          ADD      r0,r5,r0,LSL #8       ;357
0005c6  8020              STRH     r0,[r4,#0]            ;357
0005c8  e027              B        |L1.1562|
;;;377             break;
;;;378          case CW_SET_SYSCLK:
;;;379             tmp = getSYCR1();
0005ca  4605              MOV      r5,r0
0005cc  f7fffffe          BL       WIZCHIP_READ
;;;380             if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
0005d0  7821              LDRB     r1,[r4,#0]
0005d2  b111              CBZ      r1,|L1.1498|
;;;381             else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
0005d4  2901              CMP      r1,#1
0005d6  d003              BEQ      |L1.1504|
0005d8  e01f              B        |L1.1562|
                  |L1.1498|
0005da  f0200101          BIC      r1,r0,#1              ;380
0005de  e001              B        |L1.1508|
                  |L1.1504|
0005e0  f0400101          ORR      r1,r0,#1
                  |L1.1508|
0005e4  4628              MOV      r0,r5
                  |L1.1510|
0005e6  f7fffffe          BL       WIZCHIP_WRITE
0005ea  e016              B        |L1.1562|
;;;382             break;
;;;383          case CW_GET_SYSCLK:
;;;384             *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
0005ec  f7fffffe          BL       WIZCHIP_READ
0005f0  f0000001          AND      r0,r0,#1
;;;385             break;
0005f4  e7cf              B        |L1.1430|
;;;386          case CW_RESET_PHY:
;;;387             wizphy_reset();
0005f6  f7fffffe          BL       wizphy_reset
;;;388             break;
0005fa  e00e              B        |L1.1562|
;;;389          case CW_SET_PHYCONF:
;;;390             wizphy_setphyconf((wiz_PhyConf*)arg);
0005fc  4620              MOV      r0,r4
0005fe  f7fffffe          BL       wizphy_setphyconf
;;;391             break;
000602  e00a              B        |L1.1562|
;;;392          case CW_GET_PHYCONF:
;;;393             wizphy_getphyconf((wiz_PhyConf*)arg);
000604  4620              MOV      r0,r4
000606  f7fffffe          BL       wizphy_getphyconf
;;;394             break;
00060a  e006              B        |L1.1562|
;;;395          case CW_GET_PHYSTATUS:
;;;396             wizphy_getphystatus((wiz_PhyConf*)arg);
00060c  4620              MOV      r0,r4
00060e  f7fffffe          BL       wizphy_getphystatus
;;;397             break;
000612  e002              B        |L1.1562|
;;;398          case CW_SET_PHYPOWMODE:
;;;399             wizphy_setphypmode(tmp);
000614  4628              MOV      r0,r5
000616  f7fffffe          BL       wizphy_setphypmode
                  |L1.1562|
;;;400             break;
;;;401          case CW_GET_PHYPOWMODE:
;;;402             *(uint8_t*)arg = wizphy_getphypmode();
;;;403             break;
;;;404          case CW_GET_PHYLINK:
;;;405             *(uint8_t*)arg = wizphy_getphylink();
;;;406             break;
;;;407          default:
;;;408             return -1;
;;;409       }
;;;410       return 0;
00061a  2000              MOVS     r0,#0
;;;411    }
00061c  e50f              B        |L1.62|
00061e  e003              B        |L1.1576|
000620  e7ff              B        |L1.1570|
                  |L1.1570|
000622  f7fffffe          BL       wizphy_getphypmode
000626  e7b6              B        |L1.1430|
                  |L1.1576|
000628  f7fffffe          BL       wizphy_getphylink
00062c  e7b3              B        |L1.1430|
                  |L1.1582|
00062e  f04f30ff          MOV      r0,#0xffffffff        ;408
000632  e504              B        |L1.62|
;;;412    
                          ENDP

                  wizchip_gettimeout PROC
;;;746    
;;;747    void wizchip_gettimeout(wiz_NetTimeout* nettime)
000634  b570              PUSH     {r4-r6,lr}
;;;748    {
000636  4604              MOV      r4,r0
;;;749       nettime->s_retry_cnt   = getRCR();
000638  48ba              LDR      r0,|L1.2340|
00063a  f7fffffe          BL       WIZCHIP_READ
00063e  7020              STRB     r0,[r4,#0]
;;;750       nettime->s_time_100us  = getRTR();
000640  48b9              LDR      r0,|L1.2344|
000642  f7fffffe          BL       WIZCHIP_READ
000646  4605              MOV      r5,r0
000648  48b8              LDR      r0,|L1.2348|
00064a  f7fffffe          BL       WIZCHIP_READ
00064e  eb052000          ADD      r0,r5,r0,LSL #8
000652  8060              STRH     r0,[r4,#2]
;;;751       nettime->sl_retry_cnt  = getSLRCR();
000654  48b6              LDR      r0,|L1.2352|
000656  f7fffffe          BL       WIZCHIP_READ
00065a  7120              STRB     r0,[r4,#4]
;;;752       nettime->sl_time_100us = getSLRTR();
00065c  48b5              LDR      r0,|L1.2356|
00065e  f7fffffe          BL       WIZCHIP_READ
000662  4605              MOV      r5,r0
000664  48b4              LDR      r0,|L1.2360|
000666  f7fffffe          BL       WIZCHIP_READ
00066a  eb052000          ADD      r0,r5,r0,LSL #8
00066e  80e0              STRH     r0,[r4,#6]
;;;753    }
000670  bd70              POP      {r4-r6,pc}
;;;754    
                          ENDP

                  wizchip_settimeout PROC
;;;738    
;;;739    void wizchip_settimeout(wiz_NetTimeout* nettime)
000672  b510              PUSH     {r4,lr}
;;;740    {
000674  4604              MOV      r4,r0
;;;741       setRCR(nettime->s_retry_cnt);
000676  7801              LDRB     r1,[r0,#0]
000678  48aa              LDR      r0,|L1.2340|
00067a  f7fffffe          BL       WIZCHIP_WRITE
;;;742       setRTR(nettime->s_time_100us);
00067e  8860              LDRH     r0,[r4,#2]
000680  0a01              LSRS     r1,r0,#8
000682  48aa              LDR      r0,|L1.2348|
000684  f7fffffe          BL       WIZCHIP_WRITE
000688  78a1              LDRB     r1,[r4,#2]
00068a  48a7              LDR      r0,|L1.2344|
00068c  f7fffffe          BL       WIZCHIP_WRITE
;;;743       setSLRCR(nettime->sl_retry_cnt);
000690  7921              LDRB     r1,[r4,#4]
000692  48a7              LDR      r0,|L1.2352|
000694  f7fffffe          BL       WIZCHIP_WRITE
;;;744       setSLRTR(nettime->sl_time_100us);
000698  88e0              LDRH     r0,[r4,#6]
00069a  0a01              LSRS     r1,r0,#8
00069c  48a6              LDR      r0,|L1.2360|
00069e  f7fffffe          BL       WIZCHIP_WRITE
0006a2  79a1              LDRB     r1,[r4,#6]
0006a4  e8bd4010          POP      {r4,lr}
0006a8  48a2              LDR      r0,|L1.2356|
0006aa  f7ffbffe          B.W      WIZCHIP_WRITE
;;;745    }
;;;746    
                          ENDP

                  wizchip_getnetmode PROC
;;;728    
;;;729    netmode_type wizchip_getnetmode(void)
0006ae  b510              PUSH     {r4,lr}
;;;730    {
;;;731       uint32_t ret = 0;
;;;732       ret = getNETMR();
0006b0  48a2              LDR      r0,|L1.2364|
0006b2  f7fffffe          BL       WIZCHIP_READ
0006b6  4604              MOV      r4,r0
;;;733       ret = (ret << 8)  + getNETMR2();
0006b8  48a1              LDR      r0,|L1.2368|
0006ba  f7fffffe          BL       WIZCHIP_READ
0006be  eb002404          ADD      r4,r0,r4,LSL #8
;;;734       ret = (ret << 16) + getNET4MR();
0006c2  48a0              LDR      r0,|L1.2372|
0006c4  f7fffffe          BL       WIZCHIP_READ
0006c8  eb004404          ADD      r4,r0,r4,LSL #16
;;;735       ret = (ret << 24) + getNET6MR();
0006cc  489e              LDR      r0,|L1.2376|
0006ce  f7fffffe          BL       WIZCHIP_READ
0006d2  eb006004          ADD      r0,r0,r4,LSL #24
;;;736       return (netmode_type)ret;
;;;737    }
0006d6  bd10              POP      {r4,pc}
;;;738    
                          ENDP

                  wizchip_setnetmode PROC
;;;719    
;;;720    void wizchip_setnetmode(netmode_type netmode)
0006d8  b510              PUSH     {r4,lr}
;;;721    {
0006da  4604              MOV      r4,r0
;;;722       uint32_t tmp = (uint32_t) netmode;
;;;723       setNETMR ((uint8_t)tmp);
0006dc  b2c1              UXTB     r1,r0
0006de  4897              LDR      r0,|L1.2364|
0006e0  f7fffffe          BL       WIZCHIP_WRITE
;;;724       setNETMR2((uint8_t)(tmp>>8));
0006e4  f3c42107          UBFX     r1,r4,#8,#8
0006e8  4895              LDR      r0,|L1.2368|
0006ea  f7fffffe          BL       WIZCHIP_WRITE
;;;725       setNET4MR((uint8_t)(tmp>>16));
0006ee  f3c44107          UBFX     r1,r4,#16,#8
0006f2  4894              LDR      r0,|L1.2372|
0006f4  f7fffffe          BL       WIZCHIP_WRITE
;;;726       setNET6MR((uint8_t)(tmp>>24));
0006f8  0e21              LSRS     r1,r4,#24
0006fa  e8bd4010          POP      {r4,lr}
0006fe  4892              LDR      r0,|L1.2376|
000700  f7ffbffe          B.W      WIZCHIP_WRITE
;;;727    }
;;;728    
                          ENDP

                  wizchip_getnetinfo PROC
;;;700    
;;;701    void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
000704  b570              PUSH     {r4-r6,lr}
;;;702    {
000706  4604              MOV      r4,r0
;;;703       uint8_t i = 0;
;;;704       getSHAR(pnetinfo->mac);
000708  4601              MOV      r1,r0
00070a  2500              MOVS     r5,#0                 ;703
00070c  2206              MOVS     r2,#6
00070e  488f              LDR      r0,|L1.2380|
000710  f7fffffe          BL       WIZCHIP_READ_BUF
;;;705    
;;;706       getGAR(pnetinfo->gw);
000714  2204              MOVS     r2,#4
000716  f104010e          ADD      r1,r4,#0xe
00071a  488d              LDR      r0,|L1.2384|
00071c  f7fffffe          BL       WIZCHIP_READ_BUF
;;;707       getSUBR(pnetinfo->sn);
000720  2204              MOVS     r2,#4
000722  f104010a          ADD      r1,r4,#0xa
000726  488b              LDR      r0,|L1.2388|
000728  f7fffffe          BL       WIZCHIP_READ_BUF
;;;708       getSIPR(pnetinfo->ip);
00072c  2204              MOVS     r2,#4
00072e  1da1              ADDS     r1,r4,#6
000730  4889              LDR      r0,|L1.2392|
000732  f7fffffe          BL       WIZCHIP_READ_BUF
;;;709       
;;;710       getGA6R(pnetinfo->gw6);
000736  2210              MOVS     r2,#0x10
000738  f1040142          ADD      r1,r4,#0x42
00073c  4887              LDR      r0,|L1.2396|
00073e  f7fffffe          BL       WIZCHIP_READ_BUF
;;;711       getSUB6R(pnetinfo->sn6);
000742  2210              MOVS     r2,#0x10
000744  f1040132          ADD      r1,r4,#0x32
000748  4885              LDR      r0,|L1.2400|
00074a  f7fffffe          BL       WIZCHIP_READ_BUF
;;;712       getLLAR(pnetinfo->lla);
00074e  2210              MOVS     r2,#0x10
000750  f1040112          ADD      r1,r4,#0x12
000754  4883              LDR      r0,|L1.2404|
000756  f7fffffe          BL       WIZCHIP_READ_BUF
;;;713       getGUAR(pnetinfo->gua);
00075a  2210              MOVS     r2,#0x10
00075c  f1040122          ADD      r1,r4,#0x22
000760  4881              LDR      r0,|L1.2408|
000762  f7fffffe          BL       WIZCHIP_READ_BUF
;;;714       for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
000766  486c              LDR      r0,|L1.2328|
000768  1fc0              SUBS     r0,r0,#7
                  |L1.1898|
00076a  1962              ADDS     r2,r4,r5
00076c  5d41              LDRB     r1,[r0,r5]
00076e  1c6d              ADDS     r5,r5,#1
000770  b2ed              UXTB     r5,r5
000772  f8821052          STRB     r1,[r2,#0x52]
000776  2d04              CMP      r5,#4
000778  d3f7              BCC      |L1.1898|
;;;715       for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
00077a  497c              LDR      r1,|L1.2412|
00077c  2000              MOVS     r0,#0
                  |L1.1918|
00077e  1823              ADDS     r3,r4,r0
000780  5c0a              LDRB     r2,[r1,r0]
000782  1c40              ADDS     r0,r0,#1
000784  b2c0              UXTB     r0,r0
000786  f8832056          STRB     r2,[r3,#0x56]
00078a  2810              CMP      r0,#0x10
00078c  d3f7              BCC      |L1.1918|
;;;716    
;;;717       pnetinfo->ipmode = _IPMODE_;
00078e  4862              LDR      r0,|L1.2328|
000790  3808              SUBS     r0,r0,#8
000792  7800              LDRB     r0,[r0,#0]  ; _IPMODE_
000794  f8840066          STRB     r0,[r4,#0x66]
;;;718    }
000798  bd70              POP      {r4-r6,pc}
;;;719    
                          ENDP

                  wizchip_setnetinfo PROC
;;;682    
;;;683    void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
00079a  b570              PUSH     {r4-r6,lr}
;;;684    {
00079c  4604              MOV      r4,r0
;;;685       uint8_t i=0;
;;;686       setSHAR(pnetinfo->mac);
00079e  4601              MOV      r1,r0
0007a0  2500              MOVS     r5,#0                 ;685
0007a2  2206              MOVS     r2,#6
0007a4  4869              LDR      r0,|L1.2380|
0007a6  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;687       setGAR(pnetinfo->gw);
0007aa  2204              MOVS     r2,#4
0007ac  f104010e          ADD      r1,r4,#0xe
0007b0  4867              LDR      r0,|L1.2384|
0007b2  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;688       setSUBR(pnetinfo->sn);
0007b6  2204              MOVS     r2,#4
0007b8  f104010a          ADD      r1,r4,#0xa
0007bc  4865              LDR      r0,|L1.2388|
0007be  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;689       setSIPR(pnetinfo->ip);   
0007c2  2204              MOVS     r2,#4
0007c4  1da1              ADDS     r1,r4,#6
0007c6  4864              LDR      r0,|L1.2392|
0007c8  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;690       setGA6R(pnetinfo->gw6);
0007cc  2210              MOVS     r2,#0x10
0007ce  f1040142          ADD      r1,r4,#0x42
0007d2  4862              LDR      r0,|L1.2396|
0007d4  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;691       setSUB6R(pnetinfo->sn6);
0007d8  2210              MOVS     r2,#0x10
0007da  f1040132          ADD      r1,r4,#0x32
0007de  4860              LDR      r0,|L1.2400|
0007e0  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;692       setLLAR(pnetinfo->lla);
0007e4  2210              MOVS     r2,#0x10
0007e6  f1040112          ADD      r1,r4,#0x12
0007ea  485e              LDR      r0,|L1.2404|
0007ec  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;693       setGUAR(pnetinfo->gua);
0007f0  2210              MOVS     r2,#0x10
0007f2  f1040122          ADD      r1,r4,#0x22
0007f6  485c              LDR      r0,|L1.2408|
0007f8  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;694    
;;;695       for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
0007fc  4846              LDR      r0,|L1.2328|
0007fe  1fc0              SUBS     r0,r0,#7
                  |L1.2048|
000800  1961              ADDS     r1,r4,r5
000802  f8911052          LDRB     r1,[r1,#0x52]
000806  5541              STRB     r1,[r0,r5]
000808  1c6d              ADDS     r5,r5,#1
00080a  b2ed              UXTB     r5,r5
00080c  2d04              CMP      r5,#4
00080e  d3f7              BCC      |L1.2048|
;;;696       for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
000810  4956              LDR      r1,|L1.2412|
000812  2000              MOVS     r0,#0
                  |L1.2068|
000814  1822              ADDS     r2,r4,r0
000816  f8922056          LDRB     r2,[r2,#0x56]
00081a  540a              STRB     r2,[r1,r0]
00081c  1c40              ADDS     r0,r0,#1
00081e  b2c0              UXTB     r0,r0
000820  2810              CMP      r0,#0x10
000822  d3f7              BCC      |L1.2068|
;;;697    
;;;698       _IPMODE_   = pnetinfo->ipmode;
000824  493c              LDR      r1,|L1.2328|
000826  f8940066          LDRB     r0,[r4,#0x66]
00082a  3908              SUBS     r1,r1,#8
00082c  7008              STRB     r0,[r1,#0]
;;;699    }
00082e  bd70              POP      {r4-r6,pc}
;;;700    
                          ENDP

                  ctlnetwork PROC
;;;412    
;;;413    int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
000830  b510              PUSH     {r4,lr}
;;;414    {
;;;415       switch(cntype)
;;;416       {
;;;417          case CN_SET_NETINFO:
;;;418             wizchip_setnetinfo((wiz_NetInfo*)arg);
;;;419             break;
;;;420          case CN_GET_NETINFO:
;;;421             wizchip_getnetinfo((wiz_NetInfo*)arg);
;;;422             break;
;;;423          case CN_SET_NETMODE:
;;;424             wizchip_setnetmode(*(netmode_type*)arg);
;;;425             break;
;;;426          case CN_GET_NETMODE:
;;;427             *(netmode_type*)arg = wizchip_getnetmode();
;;;428             break;
;;;429          case CN_SET_TIMEOUT:
;;;430             wizchip_settimeout((wiz_NetTimeout*)arg);
;;;431             break;
;;;432          case CN_GET_TIMEOUT:
;;;433             wizchip_gettimeout((wiz_NetTimeout*)arg);
;;;434             break;
;;;435          case CN_SET_PREFER:
;;;436             setSLPSR(*(uint8_t*)arg);
000832  4a4f              LDR      r2,|L1.2416|
000834  460c              MOV      r4,r1                 ;414
000836  2808              CMP      r0,#8                 ;415
000838  d228              BCS      |L1.2188|
00083a  e8dff000          TBB      [pc,r0]               ;415
00083e  0408              DCB      0x04,0x08
000840  0c101418          DCB      0x0c,0x10,0x14,0x18
000844  1c21              DCB      0x1c,0x21
000846  4620              MOV      r0,r4                 ;418
000848  f7fffffe          BL       wizchip_setnetinfo
00084c  e01c              B        |L1.2184|
00084e  4620              MOV      r0,r4                 ;421
000850  f7fffffe          BL       wizchip_getnetinfo
000854  e018              B        |L1.2184|
000856  6820              LDR      r0,[r4,#0]            ;424
000858  f7fffffe          BL       wizchip_setnetmode
00085c  e014              B        |L1.2184|
00085e  f7fffffe          BL       wizchip_getnetmode
000862  6020              STR      r0,[r4,#0]            ;428
000864  e010              B        |L1.2184|
000866  4620              MOV      r0,r4                 ;430
000868  f7fffffe          BL       wizchip_settimeout
00086c  e00c              B        |L1.2184|
00086e  4620              MOV      r0,r4                 ;433
000870  f7fffffe          BL       wizchip_gettimeout
000874  e008              B        |L1.2184|
000876  7821              LDRB     r1,[r4,#0]
000878  4610              MOV      r0,r2
00087a  f7fffffe          BL       WIZCHIP_WRITE
;;;437             break;
00087e  e003              B        |L1.2184|
;;;438          case CN_GET_PREFER:
;;;439        	  *(uint8_t*)arg= getSLPSR();
000880  4610              MOV      r0,r2
000882  f7fffffe          BL       WIZCHIP_READ
000886  7020              STRB     r0,[r4,#0]
                  |L1.2184|
;;;440             break;
;;;441          default:
;;;442             return -1;
;;;443       }
;;;444       return 0;
000888  2000              MOVS     r0,#0
;;;445    }
00088a  bd10              POP      {r4,pc}
                  |L1.2188|
00088c  f04f30ff          MOV      r0,#0xffffffff        ;442
000890  bd10              POP      {r4,pc}
;;;446    
                          ENDP

                  wizchip_getprefix PROC
;;;842    
;;;843    int8_t wizchip_getprefix(wiz_Prefix * prefix)
000892  b570              PUSH     {r4-r6,lr}
;;;844    {
000894  4604              MOV      r4,r0
;;;845       if(getSLIR() & SLIR_RA)
000896  4837              LDR      r0,|L1.2420|
000898  f7fffffe          BL       WIZCHIP_READ
00089c  07c0              LSLS     r0,r0,#31
00089e  d038              BEQ      |L1.2322|
;;;846       {
;;;847          prefix->len = getPLR();
0008a0  4835              LDR      r0,|L1.2424|
0008a2  f7fffffe          BL       WIZCHIP_READ
0008a6  7020              STRB     r0,[r4,#0]
;;;848          prefix->flag = getPFR();
0008a8  4834              LDR      r0,|L1.2428|
0008aa  f7fffffe          BL       WIZCHIP_READ
0008ae  7060              STRB     r0,[r4,#1]
;;;849          prefix->valid_lifetime = getVLTR();
0008b0  4833              LDR      r0,|L1.2432|
0008b2  f7fffffe          BL       WIZCHIP_READ
0008b6  0605              LSLS     r5,r0,#24
0008b8  4832              LDR      r0,|L1.2436|
0008ba  f7fffffe          BL       WIZCHIP_READ
0008be  eb054500          ADD      r5,r5,r0,LSL #16
0008c2  4831              LDR      r0,|L1.2440|
0008c4  f7fffffe          BL       WIZCHIP_READ
0008c8  eb054500          ADD      r5,r5,r0,LSL #16
0008cc  482f              LDR      r0,|L1.2444|
0008ce  f7fffffe          BL       WIZCHIP_READ
0008d2  eb054000          ADD      r0,r5,r0,LSL #16
;;;850          prefix->preferred_lifetime = getPLTR();
0008d6  6060              STR      r0,[r4,#4]
0008d8  482d              LDR      r0,|L1.2448|
0008da  f7fffffe          BL       WIZCHIP_READ
0008de  0605              LSLS     r5,r0,#24
0008e0  482c              LDR      r0,|L1.2452|
0008e2  f7fffffe          BL       WIZCHIP_READ
0008e6  eb054500          ADD      r5,r5,r0,LSL #16
0008ea  482b              LDR      r0,|L1.2456|
0008ec  f7fffffe          BL       WIZCHIP_READ
0008f0  eb054500          ADD      r5,r5,r0,LSL #16
0008f4  4829              LDR      r0,|L1.2460|
0008f6  f7fffffe          BL       WIZCHIP_READ
0008fa  eb054000          ADD      r0,r5,r0,LSL #16
;;;851          getPAR(prefix->prefix);
0008fe  60a0              STR      r0,[r4,#8]
000900  2210              MOVS     r2,#0x10
000902  f104010c          ADD      r1,r4,#0xc
000906  4826              LDR      r0,|L1.2464|
000908  f7fffffe          BL       WIZCHIP_READ_BUF
;;;852          setSLIRCLR(SLIR_RA);
00090c  2101              MOVS     r1,#1
00090e  4825              LDR      r0,|L1.2468|
000910  e04a              B        |L1.2472|
                  |L1.2322|
000912  e04b              B        |L1.2476|
                  |L1.2324|
                          DCD      0x60200000
                  |L1.2328|
                          DCD      ||.data||+0x8
                  |L1.2332|
                          DCD      0x60000300
                  |L1.2336|
                          DCD      0x60000200
                  |L1.2340|
                          DCD      0x60420400
                  |L1.2344|
                          DCD      0x60420100
                  |L1.2348|
                          DCD      0x60420000
                  |L1.2352|
                          DCD      0x60420c00
                  |L1.2356|
                          DCD      0x60420900
                  |L1.2360|
                          DCD      0x60420800
                  |L1.2364|
                          DCD      0x60400800
                  |L1.2368|
                          DCD      0x60400900
                  |L1.2372|
                          DCD      0x60400000
                  |L1.2376|
                          DCD      0x60400400
                  |L1.2380|
                          DCD      0x60412000
                  |L1.2384|
                          DCD      0x60413000
                  |L1.2388|
                          DCD      0x60413400
                  |L1.2392|
                          DCD      0x60413800
                  |L1.2396|
                          DCD      0x60417000
                  |L1.2400|
                          DCD      0x60416000
                  |L1.2404|
                          DCD      0x60414000
                  |L1.2408|
                          DCD      0x60415000
                  |L1.2412|
                          DCD      ||.bss||
                  |L1.2416|
                          DCD      0x60212c00
                  |L1.2420|
                          DCD      0x60210200
                  |L1.2424|
                          DCD      0x6041d000
                  |L1.2428|
                          DCD      0x6041d400
                  |L1.2432|
                          DCD      0x6041d800
                  |L1.2436|
                          DCD      0x6041d900
                  |L1.2440|
                          DCD      0x6041da00
                  |L1.2444|
                          DCD      0x6041db00
                  |L1.2448|
                          DCD      0x6041dc00
                  |L1.2452|
                          DCD      0x6041dd00
                  |L1.2456|
                          DCD      0x6041de00
                  |L1.2460|
                          DCD      0x6041df00
                  |L1.2464|
                          DCD      0x6041e000
                  |L1.2468|
                          DCD      0x60212800
                  |L1.2472|
0009a8  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2476|
;;;853       }
;;;854       return -1;
0009ac  f04f30ff          MOV      r0,#0xffffffff
;;;855    }
0009b0  bd70              POP      {r4-r6,pc}
                          ENDP

                  wizchip_unsolicited PROC
;;;831    
;;;832    int8_t wizchip_unsolicited(void)
0009b2  b570              PUSH     {r4-r6,lr}
;;;833    {
;;;834       uint8_t tmp;
;;;835       setSLCR(SLCR_UNA);
0009b4  4c8a              LDR      r4,|L1.3040|
0009b6  2101              MOVS     r1,#1
0009b8  4620              MOV      r0,r4
0009ba  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2494|
;;;836       while(getSLCR());
0009be  4620              MOV      r0,r4
0009c0  f7fffffe          BL       WIZCHIP_READ
0009c4  2800              CMP      r0,#0
0009c6  d1fa              BNE      |L1.2494|
;;;837       while((tmp = getSLIR()) == 0x00);
0009c8  4d86              LDR      r5,|L1.3044|
                  |L1.2506|
0009ca  4628              MOV      r0,r5
0009cc  f7fffffe          BL       WIZCHIP_READ
0009d0  0004              MOVS     r4,r0
0009d2  d0fa              BEQ      |L1.2506|
;;;838       setSLIRCLR(~SLIR_RA);
0009d4  21fe              MOVS     r1,#0xfe
0009d6  4884              LDR      r0,|L1.3048|
0009d8  f7fffffe          BL       WIZCHIP_WRITE
;;;839       if(tmp & SLIR_TOUT) return 0;
0009dc  0620              LSLS     r0,r4,#24
0009de  d501              BPL      |L1.2532|
0009e0  2000              MOVS     r0,#0
;;;840       return -1;
;;;841    }
0009e2  bd70              POP      {r4-r6,pc}
                  |L1.2532|
0009e4  f04f30ff          MOV      r0,#0xffffffff        ;840
0009e8  bd70              POP      {r4-r6,pc}
;;;842    
                          ENDP

                  wizchip_slaac PROC
;;;812    
;;;813    int8_t wizchip_slaac(wiz_Prefix* prefix)
0009ea  b570              PUSH     {r4-r6,lr}
;;;814    {
;;;815       uint8_t tmp;
;;;816       setSLCR(SLCR_RS);
0009ec  4d7c              LDR      r5,|L1.3040|
0009ee  4604              MOV      r4,r0                 ;814
0009f0  2102              MOVS     r1,#2
0009f2  4628              MOV      r0,r5
0009f4  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2552|
;;;817       while(getSLCR());
0009f8  4628              MOV      r0,r5
0009fa  f7fffffe          BL       WIZCHIP_READ
0009fe  2800              CMP      r0,#0
000a00  d1fa              BNE      |L1.2552|
;;;818       while((tmp = getSLIR()) == 0x00);
000a02  4e78              LDR      r6,|L1.3044|
                  |L1.2564|
000a04  4630              MOV      r0,r6
000a06  f7fffffe          BL       WIZCHIP_READ
000a0a  0005              MOVS     r5,r0
000a0c  d0fa              BEQ      |L1.2564|
;;;819       setSLIRCLR(~SLIR_RA);
000a0e  21fe              MOVS     r1,#0xfe
000a10  4875              LDR      r0,|L1.3048|
000a12  f7fffffe          BL       WIZCHIP_WRITE
;;;820       if(tmp & SLIR_RS)
000a16  07a8              LSLS     r0,r5,#30
000a18  d537              BPL      |L1.2698|
;;;821       {
;;;822          prefix->len = getPLR();
000a1a  4874              LDR      r0,|L1.3052|
000a1c  f7fffffe          BL       WIZCHIP_READ
000a20  7020              STRB     r0,[r4,#0]
;;;823          prefix->flag = getPFR();
000a22  4873              LDR      r0,|L1.3056|
000a24  f7fffffe          BL       WIZCHIP_READ
000a28  7060              STRB     r0,[r4,#1]
;;;824          prefix->valid_lifetime = getVLTR();
000a2a  4872              LDR      r0,|L1.3060|
000a2c  f7fffffe          BL       WIZCHIP_READ
000a30  0605              LSLS     r5,r0,#24
000a32  4871              LDR      r0,|L1.3064|
000a34  f7fffffe          BL       WIZCHIP_READ
000a38  eb054500          ADD      r5,r5,r0,LSL #16
000a3c  486f              LDR      r0,|L1.3068|
000a3e  f7fffffe          BL       WIZCHIP_READ
000a42  eb054500          ADD      r5,r5,r0,LSL #16
000a46  486e              LDR      r0,|L1.3072|
000a48  f7fffffe          BL       WIZCHIP_READ
000a4c  eb054000          ADD      r0,r5,r0,LSL #16
;;;825          prefix->preferred_lifetime = getPLTR();
000a50  6060              STR      r0,[r4,#4]
000a52  486c              LDR      r0,|L1.3076|
000a54  f7fffffe          BL       WIZCHIP_READ
000a58  0605              LSLS     r5,r0,#24
000a5a  486b              LDR      r0,|L1.3080|
000a5c  f7fffffe          BL       WIZCHIP_READ
000a60  eb054500          ADD      r5,r5,r0,LSL #16
000a64  4869              LDR      r0,|L1.3084|
000a66  f7fffffe          BL       WIZCHIP_READ
000a6a  eb054500          ADD      r5,r5,r0,LSL #16
000a6e  4868              LDR      r0,|L1.3088|
000a70  f7fffffe          BL       WIZCHIP_READ
000a74  eb054000          ADD      r0,r5,r0,LSL #16
;;;826          getPAR(prefix->prefix);
000a78  60a0              STR      r0,[r4,#8]
000a7a  2210              MOVS     r2,#0x10
000a7c  f104010c          ADD      r1,r4,#0xc
000a80  4864              LDR      r0,|L1.3092|
000a82  f7fffffe          BL       WIZCHIP_READ_BUF
;;;827          return 0;
000a86  2000              MOVS     r0,#0
;;;828       }
;;;829       return -1;
;;;830    }
000a88  bd70              POP      {r4-r6,pc}
                  |L1.2698|
000a8a  f04f30ff          MOV      r0,#0xffffffff        ;829
000a8e  bd70              POP      {r4-r6,pc}
;;;831    
                          ENDP

                  wizchip_dad PROC
;;;800    
;;;801    int8_t wizchip_dad(uint8_t* ipv6)
000a90  b570              PUSH     {r4-r6,lr}
;;;802    {
;;;803       uint8_t tmp;
;;;804       setSLDIP6R(ipv6);
000a92  4601              MOV      r1,r0
000a94  2210              MOVS     r2,#0x10
000a96  4860              LDR      r0,|L1.3096|
000a98  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;805       setSLCR(SLCR_NS);
000a9c  4c50              LDR      r4,|L1.3040|
000a9e  2104              MOVS     r1,#4
000aa0  4620              MOV      r0,r4
000aa2  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2726|
;;;806       while(getSLCR());
000aa6  4620              MOV      r0,r4
000aa8  f7fffffe          BL       WIZCHIP_READ
000aac  2800              CMP      r0,#0
000aae  d1fa              BNE      |L1.2726|
;;;807       while((tmp = getSLIR()) == 0x00);
000ab0  4d4c              LDR      r5,|L1.3044|
                  |L1.2738|
000ab2  4628              MOV      r0,r5
000ab4  f7fffffe          BL       WIZCHIP_READ
000ab8  0004              MOVS     r4,r0
000aba  d0fa              BEQ      |L1.2738|
;;;808       setSLIRCLR(~SLIR_RA);
000abc  21fe              MOVS     r1,#0xfe
000abe  484a              LDR      r0,|L1.3048|
000ac0  f7fffffe          BL       WIZCHIP_WRITE
;;;809       if(tmp & SLIR_TOUT) return 0;
000ac4  0620              LSLS     r0,r4,#24
000ac6  d501              BPL      |L1.2764|
000ac8  2000              MOVS     r0,#0
;;;810       return -1;
;;;811    }
000aca  bd70              POP      {r4-r6,pc}
                  |L1.2764|
000acc  f04f30ff          MOV      r0,#0xffffffff        ;810
000ad0  bd70              POP      {r4-r6,pc}
;;;812    
                          ENDP

                  wizchip_ping PROC
;;;778    
;;;779    int8_t wizchip_ping(wiz_PING* ping)
000ad2  b570              PUSH     {r4-r6,lr}
;;;780    {
000ad4  4604              MOV      r4,r0
;;;781       uint8_t tmp;
;;;782       setPINGIDR(ping->id);
000ad6  8800              LDRH     r0,[r0,#0]
000ad8  0a01              LSRS     r1,r0,#8
000ada  4850              LDR      r0,|L1.3100|
000adc  f7fffffe          BL       WIZCHIP_WRITE
000ae0  7821              LDRB     r1,[r4,#0]
000ae2  484f              LDR      r0,|L1.3104|
000ae4  f7fffffe          BL       WIZCHIP_WRITE
;;;783       setPINGSEQR(ping->seq);
000ae8  8860              LDRH     r0,[r4,#2]
000aea  0a01              LSRS     r1,r0,#8
000aec  484d              LDR      r0,|L1.3108|
000aee  f7fffffe          BL       WIZCHIP_WRITE
000af2  78a1              LDRB     r1,[r4,#2]
000af4  484c              LDR      r0,|L1.3112|
000af6  f7fffffe          BL       WIZCHIP_WRITE
;;;784       if(ping->destinfo.len == 16)
000afa  7d20              LDRB     r0,[r4,#0x14]
;;;785       {
;;;786          setSLDIP6R(ping->destinfo.ip);
;;;787          setSLCR(SLCR_PING6);
000afc  4d38              LDR      r5,|L1.3040|
000afe  2810              CMP      r0,#0x10              ;784
000b00  d01c              BEQ      |L1.2876|
;;;788       }
;;;789       else
;;;790       {
;;;791          setSLDIP4R(ping->destinfo.ip);
000b02  2204              MOVS     r2,#4
000b04  1d21              ADDS     r1,r4,#4
000b06  4849              LDR      r0,|L1.3116|
000b08  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;792          setSLCR(SLCR_PING4);      
000b0c  2120              MOVS     r1,#0x20
                  |L1.2830|
000b0e  4628              MOV      r0,r5                 ;787
000b10  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2836|
;;;793       }  
;;;794       while(getSLCR());
000b14  4628              MOV      r0,r5
000b16  f7fffffe          BL       WIZCHIP_READ
000b1a  2800              CMP      r0,#0
000b1c  d1fa              BNE      |L1.2836|
;;;795       while((tmp = getSLIR()) == 0x00);
000b1e  4d31              LDR      r5,|L1.3044|
                  |L1.2848|
000b20  4628              MOV      r0,r5
000b22  f7fffffe          BL       WIZCHIP_READ
000b26  0004              MOVS     r4,r0
000b28  d0fa              BEQ      |L1.2848|
;;;796       setSLIRCLR(~SLIR_RA);
000b2a  21fe              MOVS     r1,#0xfe
000b2c  482e              LDR      r0,|L1.3048|
000b2e  f7fffffe          BL       WIZCHIP_WRITE
;;;797       if(tmp & (SLIR_PING4 | SLIR_PING6))  return 0;   
000b32  f0140f28          TST      r4,#0x28
000b36  d008              BEQ      |L1.2890|
000b38  2000              MOVS     r0,#0
;;;798       return -1;
;;;799    }
000b3a  bd70              POP      {r4-r6,pc}
                  |L1.2876|
000b3c  2210              MOVS     r2,#0x10              ;786
000b3e  1d21              ADDS     r1,r4,#4              ;786
000b40  4835              LDR      r0,|L1.3096|
000b42  f7fffffe          BL       WIZCHIP_WRITE_BUF
000b46  2108              MOVS     r1,#8                 ;787
000b48  e7e1              B        |L1.2830|
                  |L1.2890|
000b4a  f04f30ff          MOV      r0,#0xffffffff        ;798
000b4e  bd70              POP      {r4-r6,pc}
;;;800    
                          ENDP

                  wizchip_arp PROC
;;;754    
;;;755    int8_t wizchip_arp(wiz_ARP* arp)
000b50  b570              PUSH     {r4-r6,lr}
;;;756    {
000b52  4605              MOV      r5,r0
;;;757       uint8_t tmp;
;;;758       if(arp->destinfo.len == 16)
000b54  7c00              LDRB     r0,[r0,#0x10]
;;;759       {
;;;760          setSLDIP6R(arp->destinfo.ip);
;;;761          setSLCR(SLCR_ARP6);
000b56  4c22              LDR      r4,|L1.3040|
000b58  2810              CMP      r0,#0x10              ;758
000b5a  d022              BEQ      |L1.2978|
;;;762       }
;;;763       else
;;;764       {
;;;765          setSLDIP4R(arp->destinfo.ip);
000b5c  2204              MOVS     r2,#4
000b5e  4629              MOV      r1,r5
000b60  4832              LDR      r0,|L1.3116|
000b62  f7fffffe          BL       WIZCHIP_WRITE_BUF
;;;766          setSLCR(SLCR_ARP4);
000b66  2140              MOVS     r1,#0x40
                  |L1.2920|
000b68  4620              MOV      r0,r4                 ;761
000b6a  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2926|
;;;767       } 
;;;768       while(getSLCR());
000b6e  4620              MOV      r0,r4
000b70  f7fffffe          BL       WIZCHIP_READ
000b74  2800              CMP      r0,#0
000b76  d1fa              BNE      |L1.2926|
;;;769       while((tmp = getSLIR()) == 0x00);
000b78  4e1a              LDR      r6,|L1.3044|
                  |L1.2938|
000b7a  4630              MOV      r0,r6
000b7c  f7fffffe          BL       WIZCHIP_READ
000b80  0004              MOVS     r4,r0
000b82  d0fa              BEQ      |L1.2938|
;;;770       setSLIRCLR(~SLIR_RA);
000b84  21fe              MOVS     r1,#0xfe
000b86  4818              LDR      r0,|L1.3048|
000b88  f7fffffe          BL       WIZCHIP_WRITE
;;;771       if(tmp & (SLIR_ARP4 | SLIR_ARP6))
000b8c  f0140f50          TST      r4,#0x50
000b90  d00e              BEQ      |L1.2992|
;;;772       {
;;;773          getSLDHAR(arp->dha);
000b92  2206              MOVS     r2,#6
000b94  f1050111          ADD      r1,r5,#0x11
000b98  4825              LDR      r0,|L1.3120|
000b9a  f7fffffe          BL       WIZCHIP_READ_BUF
;;;774          return 0;
000b9e  2000              MOVS     r0,#0
;;;775       }  
;;;776       return -1;
;;;777    }
000ba0  bd70              POP      {r4-r6,pc}
                  |L1.2978|
000ba2  2210              MOVS     r2,#0x10              ;760
000ba4  4629              MOV      r1,r5                 ;760
000ba6  481c              LDR      r0,|L1.3096|
000ba8  f7fffffe          BL       WIZCHIP_WRITE_BUF
000bac  2110              MOVS     r1,#0x10              ;761
000bae  e7db              B        |L1.2920|
                  |L1.2992|
000bb0  f04f30ff          MOV      r0,#0xffffffff        ;776
000bb4  bd70              POP      {r4-r6,pc}
;;;778    
                          ENDP

                  ctlnetservice PROC
;;;446    
;;;447    int8_t ctlnetservice(ctlnetservice_type cnstype, void* arg)
000bb6  2806              CMP      r0,#6
;;;448    {
;;;449       switch(cnstype)
000bb8  d20f              BCS      |L1.3034|
000bba  e8dff000          TBB      [pc,r0]
000bbe  0305              DCB      0x03,0x05
000bc0  07090b0c          DCB      0x07,0x09,0x0b,0x0c
;;;450       {
;;;451          case CNS_ARP:
;;;452             return wizchip_arp((wiz_ARP*)arg);
000bc4  4608              MOV      r0,r1
000bc6  e7fe              B        wizchip_arp
;;;453          case CNS_PING:
;;;454             return wizchip_ping((wiz_PING*)arg);
000bc8  4608              MOV      r0,r1
000bca  e7fe              B        wizchip_ping
;;;455          case CNS_DAD:
;;;456             return wizchip_dad((uint8_t*)arg);
000bcc  4608              MOV      r0,r1
000bce  e7fe              B        wizchip_dad
;;;457          case CNS_SLAAC:
;;;458             return wizchip_slaac((wiz_Prefix*)arg);
000bd0  4608              MOV      r0,r1
000bd2  e7fe              B        wizchip_slaac
;;;459          case CNS_UNSOL_NA:
;;;460             return wizchip_unsolicited();
000bd4  e7fe              B        wizchip_unsolicited
;;;461          case CNS_GET_PREFIX:
;;;462             return wizchip_getprefix((wiz_Prefix*)arg);
000bd6  4608              MOV      r0,r1
000bd8  e7fe              B        wizchip_getprefix
                  |L1.3034|
;;;463          default:
;;;464              return -1;
000bda  f04f30ff          MOV      r0,#0xffffffff
;;;465              break;
;;;466       }
;;;467    }
000bde  4770              BX       lr
;;;468    
                          ENDP

                  |L1.3040|
                          DCD      0x60213000
                  |L1.3044|
                          DCD      0x60210200
                  |L1.3048|
                          DCD      0x60212800
                  |L1.3052|
                          DCD      0x6041d000
                  |L1.3056|
                          DCD      0x6041d400
                  |L1.3060|
                          DCD      0x6041d800
                  |L1.3064|
                          DCD      0x6041d900
                  |L1.3068|
                          DCD      0x6041da00
                  |L1.3072|
                          DCD      0x6041db00
                  |L1.3076|
                          DCD      0x6041dc00
                  |L1.3080|
                          DCD      0x6041dd00
                  |L1.3084|
                          DCD      0x6041de00
                  |L1.3088|
                          DCD      0x6041df00
                  |L1.3092|
                          DCD      0x6041e000
                  |L1.3096|
                          DCD      0x60418000
                  |L1.3100|
                          DCD      0x60419800
                  |L1.3104|
                          DCD      0x60419900
                  |L1.3108|
                          DCD      0x60419c00
                  |L1.3112|
                          DCD      0x60419d00
                  |L1.3116|
                          DCD      0x60418c00
                  |L1.3120|
                          DCD      0x60419000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  _DNS6_
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  _IPMODE_
000000  00                DCB      0x00
                  _DNS_
000001  000000            DCB      0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  WIZCHIP
000008  0102              DCW      0x0102
00000a  5736              DCB      0x57,0x36
00000c  31303000          DCB      0x31,0x30,0x30,0x00
                          DCD      wizchip_cris_enter
                          DCD      wizchip_cris_exit
                          DCD      wizchip_cs_select
                          DCD      wizchip_cs_deselect
                          DCD      wizchip_bus_read
                          DCD      wizchip_bus_write
                          DCD      wizchip_bus_read_buf
                          DCD      wizchip_bus_write_buf
