; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\socket.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\socket.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\socket.crf ..\..\Libraries\io6Library\Ethernet\socket.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  close PROC
;;;172    
;;;173    int8_t close(uint8_t sn)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4604              MOV      r4,r0
;;;175       CHECK_SOCKNUM();
000004  2808              CMP      r0,#8
000006  d302              BCC      |L1.14|
000008  f04f30ff          MOV      r0,#0xffffffff
;;;176       setSn_CR(sn,Sn_CR_CLOSE);
;;;177       /* wait to process the command... */
;;;178       while( getSn_CR(sn) );
;;;179       /* clear all interrupt of SOCKETn. */
;;;180       setSn_IRCLR(sn, 0xFF);
;;;181       /* Release the sock_io_mode of SOCKETn. */
;;;182       sock_io_mode &= ~(1<<sn); 
;;;183       sock_remained_size[sn] = 0;
;;;184       sock_is_sending &= ~(1<<sn);
;;;185       sock_pack_info[sn] = PACK_NONE;
;;;186       while(getSn_SR(sn) != SOCK_CLOSED);
;;;187       return SOCK_OK;
;;;188    }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  48f9              LDR      r0,|L1.1012|
000010  2110              MOVS     r1,#0x10              ;176
000012  eb001544          ADD      r5,r0,r4,LSL #5       ;176
000016  4628              MOV      r0,r5                 ;176
000018  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.28|
00001c  4628              MOV      r0,r5                 ;178
00001e  f7fffffe          BL       WIZCHIP_READ
000022  2800              CMP      r0,#0                 ;178
000024  d1fa              BNE      |L1.28|
000026  48f4              LDR      r0,|L1.1016|
000028  21ff              MOVS     r1,#0xff              ;180
00002a  eb001044          ADD      r0,r0,r4,LSL #5       ;180
00002e  f7fffffe          BL       WIZCHIP_WRITE
000032  49f2              LDR      r1,|L1.1020|
000034  2001              MOVS     r0,#1                 ;182
000036  40a0              LSLS     r0,r0,r4              ;182
000038  884a              LDRH     r2,[r1,#2]            ;182  ; sock_io_mode
00003a  4bf1              LDR      r3,|L1.1024|
00003c  4382              BICS     r2,r2,r0              ;182
00003e  804a              STRH     r2,[r1,#2]            ;182
000040  2200              MOVS     r2,#0                 ;183
000042  f8232014          STRH     r2,[r3,r4,LSL #1]     ;183
000046  888b              LDRH     r3,[r1,#4]            ;184  ; sock_is_sending
000048  4383              BICS     r3,r3,r0              ;184
00004a  1d88              ADDS     r0,r1,#6              ;185
00004c  808b              STRH     r3,[r1,#4]            ;184
00004e  5502              STRB     r2,[r0,r4]            ;185
000050  48ec              LDR      r0,|L1.1028|
000052  eb001444          ADD      r4,r0,r4,LSL #5       ;186
                  |L1.86|
000056  4620              MOV      r0,r4                 ;186
000058  f7fffffe          BL       WIZCHIP_READ
00005c  2800              CMP      r0,#0                 ;186
00005e  d1fa              BNE      |L1.86|
000060  2001              MOVS     r0,#1                 ;187
000062  bd70              POP      {r4-r6,pc}
;;;189    
                          ENDP

                  socket PROC
;;;97     
;;;98     int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
000064  e92d47ff          PUSH     {r0-r10,lr}
;;;99     { 
000068  461d              MOV      r5,r3
00006a  4616              MOV      r6,r2
00006c  4688              MOV      r8,r1
00006e  4604              MOV      r4,r0
;;;100       uint8_t taddr[16];
;;;101       CHECK_SOCKNUM(); 
000070  2808              CMP      r0,#8
000072  d304              BCC      |L1.126|
000074  f04f30ff          MOV      r0,#0xffffffff
                  |L1.120|
;;;102       switch (protocol & 0x0F)
;;;103       {
;;;104          case Sn_MR_TCP4 :
;;;105             getSIPR(taddr);
;;;106             CHECK_IPZERO(taddr, 4);
;;;107             break;
;;;108          case Sn_MR_TCP6 :
;;;109             getLLAR(taddr);
;;;110             CHECK_IPZERO(taddr, 16);
;;;111             //getGUAR(taddr);
;;;112             //CHECK_IPZERO(taddr, 16);
;;;113             break;
;;;114          case Sn_MR_TCPD :  
;;;115             getSIPR(taddr);
;;;116             CHECK_IPZERO(taddr, 4);
;;;117             getLLAR(taddr);
;;;118             CHECK_IPZERO(taddr, 16);
;;;119             //getGUAR(taddr);
;;;120             //CHECK_IPZERO(taddr, 16);
;;;121             break;
;;;122          case Sn_MR_UDP :
;;;123          case Sn_MR_UDP6 :
;;;124          case Sn_MR_UDPD :
;;;125          case Sn_MR_MACRAW :
;;;126          case Sn_MR_IPRAW4 :
;;;127          case Sn_MR_IPRAW6 :
;;;128             break; 
;;;129          default :
;;;130            return SOCKERR_SOCKMODE;
;;;131       } 
;;;132    
;;;133       if((flag & 0x04)) return SOCKERR_SOCKFLAG;
;;;134       if(flag != 0)
;;;135       {
;;;136          switch(protocol)
;;;137          {
;;;138             case Sn_MR_MACRAW:
;;;139                if((flag & (SF_DHA_MANUAL|SF_FORCE_ARP)) != 0) return SOCKERR_SOCKFLAG;
;;;140             case Sn_MR_TCP4:
;;;141             case Sn_MR_TCP6:
;;;142             case Sn_MR_TCPD:     
;;;143                if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0) return SOCKERR_SOCKFLAG;
;;;144                break;
;;;145             case Sn_MR_IPRAW4:
;;;146             case Sn_MR_IPRAW6:
;;;147                if(flag !=0) return SOCKERR_SOCKFLAG;
;;;148             default:
;;;149                break;
;;;150          }
;;;151       }
;;;152       close(sn);
;;;153       setSn_MR(sn,(protocol | (flag & 0xF0)));
;;;154       setSn_MR2(sn, flag & 0x03);  
;;;155       if(!port)
;;;156       {
;;;157          port = sock_any_port++;
;;;158          if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
;;;159       }
;;;160       setSn_PORTR(sn,port);
;;;161       setSn_CR(sn,Sn_CR_OPEN);
;;;162       while(getSn_CR(sn));
;;;163       sock_io_mode &= ~(1 <<sn);
;;;164       sock_io_mode |= (((flag & SF_IO_NONBLOCK)>>3) << sn); 
;;;165       sock_is_sending &= ~(1<<sn);
;;;166       sock_remained_size[sn] = 0;
;;;167       sock_pack_info[sn] = PACK_NONE;
;;;168       while(getSn_SR(sn) == SOCK_CLOSED) ;
;;;169       return sn;
;;;170    }  
000078  b004              ADD      sp,sp,#0x10
                  |L1.122|
00007a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.126|
00007e  f008000f          AND      r0,r8,#0xf            ;102
000082  4be1              LDR      r3,|L1.1032|
000084  f8df9384          LDR      r9,|L1.1036|
000088  f06f0a0b          MVN      r10,#0xb              ;106
00008c  466f              MOV      r7,sp                 ;100
00008e  280f              CMP      r0,#0xf               ;102
000090  d25c              BCS      |L1.332|
000092  e8dff000          TBB      [pc,r0]               ;102
000096  5b08              DCB      0x5b,0x08
000098  17175b5b          DCB      0x17,0x17,0x5b,0x5b
00009c  5b175b29          DCB      0x5b,0x17,0x5b,0x29
0000a0  17175b38          DCB      0x17,0x17,0x5b,0x38
0000a4  1700              DCB      0x17,0x00
0000a6  2204              MOVS     r2,#4                 ;105
0000a8  4639              MOV      r1,r7                 ;105
0000aa  4618              MOV      r0,r3                 ;105
0000ac  f7fffffe          BL       WIZCHIP_READ_BUF
0000b0  2100              MOVS     r1,#0                 ;106
0000b2  4608              MOV      r0,r1                 ;106
                  |L1.180|
0000b4  5c3a              LDRB     r2,[r7,r0]            ;106
0000b6  1c40              ADDS     r0,r0,#1              ;106
0000b8  4411              ADD      r1,r1,r2              ;106
0000ba  b2c0              UXTB     r0,r0                 ;106
0000bc  b289              UXTH     r1,r1                 ;106
0000be  2804              CMP      r0,#4                 ;106
0000c0  d3f8              BCC      |L1.180|
                  |L1.194|
0000c2  b3e9              CBZ      r1,|L1.320|
0000c4  0768              LSLS     r0,r5,#29             ;133
0000c6  f06f0105          MVN      r1,#5                 ;133
0000ca  d44d              BMI      |L1.360|
0000cc  b3cd              CBZ      r5,|L1.322|
0000ce  4640              MOV      r0,r8                 ;136
0000d0  f1b80f09          CMP      r8,#9                 ;136
0000d4  d045              BEQ      |L1.354|
0000d6  dc3c              BGT      |L1.338|
0000d8  2801              CMP      r0,#1                 ;136
0000da  d042              BEQ      |L1.354|
0000dc  2803              CMP      r0,#3                 ;136
0000de  d043              BEQ      |L1.360|
0000e0  f1b80f07          CMP      r8,#7                 ;136
0000e4  d142              BNE      |L1.364|
0000e6  e03a              B        |L1.350|
0000e8  2210              MOVS     r2,#0x10              ;109
0000ea  4639              MOV      r1,r7                 ;109
0000ec  4648              MOV      r0,r9                 ;109
0000ee  f7fffffe          BL       WIZCHIP_READ_BUF
0000f2  2100              MOVS     r1,#0                 ;110
0000f4  4608              MOV      r0,r1                 ;110
                  |L1.246|
0000f6  5c3a              LDRB     r2,[r7,r0]            ;110
0000f8  1c40              ADDS     r0,r0,#1              ;110
0000fa  4411              ADD      r1,r1,r2              ;110
0000fc  b2c0              UXTB     r0,r0                 ;110
0000fe  b289              UXTH     r1,r1                 ;110
000100  2810              CMP      r0,#0x10              ;110
000102  d3f8              BCC      |L1.246|
000104  e7dd              B        |L1.194|
000106  2204              MOVS     r2,#4                 ;115
000108  4639              MOV      r1,r7                 ;115
00010a  4618              MOV      r0,r3                 ;115
00010c  f7fffffe          BL       WIZCHIP_READ_BUF
000110  2100              MOVS     r1,#0                 ;116
000112  4608              MOV      r0,r1                 ;116
                  |L1.276|
000114  5c3a              LDRB     r2,[r7,r0]            ;116
000116  1c40              ADDS     r0,r0,#1              ;116
000118  4411              ADD      r1,r1,r2              ;116
00011a  b2c0              UXTB     r0,r0                 ;116
00011c  b289              UXTH     r1,r1                 ;116
00011e  2804              CMP      r0,#4                 ;116
000120  d3f8              BCC      |L1.276|
000122  b169              CBZ      r1,|L1.320|
000124  2210              MOVS     r2,#0x10              ;117
000126  4669              MOV      r1,sp                 ;117
000128  4648              MOV      r0,r9                 ;117
00012a  f7fffffe          BL       WIZCHIP_READ_BUF
00012e  2100              MOVS     r1,#0                 ;118
000130  4608              MOV      r0,r1                 ;118
                  |L1.306|
000132  5c3a              LDRB     r2,[r7,r0]            ;118
000134  1c40              ADDS     r0,r0,#1              ;118
000136  4411              ADD      r1,r1,r2              ;118
000138  b2c0              UXTB     r0,r0                 ;118
00013a  b289              UXTH     r1,r1                 ;118
00013c  2810              CMP      r0,#0x10              ;118
00013e  e001              B        |L1.324|
                  |L1.320|
000140  e002              B        |L1.328|
                  |L1.322|
000142  e013              B        |L1.364|
                  |L1.324|
000144  d3f5              BCC      |L1.306|
000146  e7bc              B        |L1.194|
                  |L1.328|
000148  4650              MOV      r0,r10                ;118
00014a  e795              B        |L1.120|
                  |L1.332|
00014c  f06f0004          MVN      r0,#4                 ;130
000150  e792              B        |L1.120|
                  |L1.338|
000152  280b              CMP      r0,#0xb               ;136
000154  d008              BEQ      |L1.360|
000156  f1b80f0d          CMP      r8,#0xd               ;136
00015a  d107              BNE      |L1.364|
00015c  e001              B        |L1.354|
                  |L1.350|
00015e  07a8              LSLS     r0,r5,#30             ;139
000160  d102              BNE      |L1.360|
                  |L1.354|
000162  f0150f90          TST      r5,#0x90              ;143
000166  d001              BEQ      |L1.364|
                  |L1.360|
000168  4608              MOV      r0,r1                 ;147
00016a  e785              B        |L1.120|
                  |L1.364|
00016c  4620              MOV      r0,r4                 ;152
00016e  f7fffffe          BL       close
000172  48a7              LDR      r0,|L1.1040|
000174  f00501f0          AND      r1,r5,#0xf0           ;153
000178  ea410108          ORR      r1,r1,r8              ;153
00017c  eb001044          ADD      r0,r0,r4,LSL #5       ;153
000180  f7fffffe          BL       WIZCHIP_WRITE
000184  48a3              LDR      r0,|L1.1044|
000186  f0050103          AND      r1,r5,#3              ;154
00018a  eb001044          ADD      r0,r0,r4,LSL #5       ;154
00018e  f7fffffe          BL       WIZCHIP_WRITE
000192  4f9a              LDR      r7,|L1.1020|
000194  b956              CBNZ     r6,|L1.428|
000196  883e              LDRH     r6,[r7,#0]            ;157  ; sock_any_port
000198  1c70              ADDS     r0,r6,#1              ;157
00019a  b280              UXTH     r0,r0                 ;157
00019c  f5a0417f          SUB      r1,r0,#0xff00         ;158
0001a0  8038              STRH     r0,[r7,#0]            ;157
0001a2  39f0              SUBS     r1,r1,#0xf0           ;158
0001a4  d102              BNE      |L1.428|
0001a6  f44f6080          MOV      r0,#0x400             ;158
0001aa  8038              STRH     r0,[r7,#0]            ;158
                  |L1.428|
0001ac  489a              LDR      r0,|L1.1048|
0001ae  0a31              LSRS     r1,r6,#8              ;160
0001b0  eb001044          ADD      r0,r0,r4,LSL #5       ;160
0001b4  f7fffffe          BL       WIZCHIP_WRITE
0001b8  4898              LDR      r0,|L1.1052|
0001ba  b2f1              UXTB     r1,r6                 ;160
0001bc  eb001044          ADD      r0,r0,r4,LSL #5       ;160
0001c0  f7fffffe          BL       WIZCHIP_WRITE
0001c4  488b              LDR      r0,|L1.1012|
0001c6  2101              MOVS     r1,#1                 ;161
0001c8  eb001644          ADD      r6,r0,r4,LSL #5       ;161
0001cc  4630              MOV      r0,r6                 ;161
0001ce  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.466|
0001d2  4630              MOV      r0,r6                 ;162
0001d4  f7fffffe          BL       WIZCHIP_READ
0001d8  2800              CMP      r0,#0                 ;162
0001da  d1fa              BNE      |L1.466|
0001dc  2001              MOVS     r0,#1                 ;163
0001de  40a0              LSLS     r0,r0,r4              ;163
0001e0  8879              LDRH     r1,[r7,#2]            ;163  ; sock_io_mode
0001e2  f3c502c0          UBFX     r2,r5,#3,#1           ;164
0001e6  4381              BICS     r1,r1,r0              ;163
0001e8  40a2              LSLS     r2,r2,r4              ;164
0001ea  430a              ORRS     r2,r2,r1              ;164
0001ec  807a              STRH     r2,[r7,#2]            ;164
0001ee  88b9              LDRH     r1,[r7,#4]            ;165  ; sock_is_sending
0001f0  4381              BICS     r1,r1,r0              ;165
0001f2  80b9              STRH     r1,[r7,#4]            ;165
0001f4  4982              LDR      r1,|L1.1024|
0001f6  2000              MOVS     r0,#0                 ;166
0001f8  f8210014          STRH     r0,[r1,r4,LSL #1]     ;166
0001fc  497f              LDR      r1,|L1.1020|
0001fe  1d89              ADDS     r1,r1,#6              ;167
000200  5508              STRB     r0,[r1,r4]            ;167
000202  4880              LDR      r0,|L1.1028|
000204  eb001544          ADD      r5,r0,r4,LSL #5       ;168
                  |L1.520|
000208  4628              MOV      r0,r5                 ;168
00020a  f7fffffe          BL       WIZCHIP_READ
00020e  2800              CMP      r0,#0                 ;168
000210  d0fa              BEQ      |L1.520|
000212  b260              SXTB     r0,r4                 ;169
000214  e730              B        |L1.120|
;;;171    
                          ENDP

                  listen PROC
;;;190    
;;;191    int8_t listen(uint8_t sn)
000216  b570              PUSH     {r4-r6,lr}
;;;192    {
000218  4605              MOV      r5,r0
;;;193       CHECK_SOCKNUM();
00021a  2808              CMP      r0,#8
00021c  d302              BCC      |L1.548|
00021e  f04f30ff          MOV      r0,#0xffffffff
;;;194       CHECK_SOCKINIT();
;;;195       setSn_CR(sn,Sn_CR_LISTEN);
;;;196       while(getSn_CR(sn));
;;;197       while(getSn_SR(sn) != SOCK_LISTEN)
;;;198       {
;;;199          close(sn);
;;;200          return SOCKERR_SOCKCLOSED;
;;;201       }
;;;202       return SOCK_OK;
;;;203    }
000222  bd70              POP      {r4-r6,pc}
                  |L1.548|
000224  4877              LDR      r0,|L1.1028|
000226  eb001645          ADD      r6,r0,r5,LSL #5       ;194
00022a  4630              MOV      r0,r6                 ;194
00022c  f7fffffe          BL       WIZCHIP_READ
000230  2813              CMP      r0,#0x13              ;194
000232  d002              BEQ      |L1.570|
000234  f06f0002          MVN      r0,#2                 ;194
000238  bd70              POP      {r4-r6,pc}
                  |L1.570|
00023a  486e              LDR      r0,|L1.1012|
00023c  2102              MOVS     r1,#2                 ;195
00023e  eb001445          ADD      r4,r0,r5,LSL #5       ;195
000242  4620              MOV      r0,r4                 ;195
000244  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.584|
000248  4620              MOV      r0,r4                 ;196
00024a  f7fffffe          BL       WIZCHIP_READ
00024e  2800              CMP      r0,#0                 ;196
000250  d1fa              BNE      |L1.584|
000252  4630              MOV      r0,r6                 ;196
000254  f7fffffe          BL       WIZCHIP_READ
000258  2814              CMP      r0,#0x14              ;197
00025a  d005              BEQ      |L1.616|
00025c  4628              MOV      r0,r5                 ;199
00025e  f7fffffe          BL       close
000262  f06f0003          MVN      r0,#3                 ;200
000266  bd70              POP      {r4-r6,pc}
                  |L1.616|
000268  2001              MOVS     r0,#1                 ;202
00026a  bd70              POP      {r4-r6,pc}
;;;204    
                          ENDP

                  connect PROC
;;;205    
;;;206    int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen)
00026c  e92d47f0          PUSH     {r4-r10,lr}
;;;207    { 
000270  4698              MOV      r8,r3
000272  4617              MOV      r7,r2
000274  4689              MOV      r9,r1
000276  4604              MOV      r4,r0
;;;208    
;;;209       CHECK_SOCKNUM();
000278  2808              CMP      r0,#8
00027a  d302              BCC      |L1.642|
00027c  f04f30ff          MOV      r0,#0xffffffff
;;;210       CHECK_TCPMODE();
;;;211       CHECK_SOCKINIT();
;;;212      
;;;213       CHECK_IPZERO(addr, addrlen);
;;;214       if(port == 0) return SOCKERR_PORTZERO;
;;;215    
;;;216       setSn_DPORTR(sn, port);
;;;217      
;;;218       if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
;;;219       {
;;;220          if( getSn_MR(sn) & 0x08)  
;;;221          {
;;;222             setSn_DIP6R(sn,addr);
;;;223             setSn_CR(sn,Sn_CR_CONNECT6);
;;;224          }
;;;225          else return SOCKERR_SOCKMODE;
;;;226       } 
;;;227       else           // addrlen=4, Sn_MR_TCP4(0001), Sn_MR_TCPD(1101)
;;;228       {
;;;229          if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
;;;230          setSn_DIPR(sn,addr);
;;;231          setSn_CR(sn,Sn_CR_CONNECT);
;;;232       }
;;;233       while(getSn_CR(sn));
;;;234    
;;;235       if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
;;;236    
;;;237       while(getSn_SR(sn) != SOCK_ESTABLISHED)
;;;238       {
;;;239          if (getSn_IR(sn) & Sn_IR_TIMEOUT)
;;;240          {
;;;241             setSn_IRCLR(sn, Sn_IR_TIMEOUT);
;;;242             return SOCKERR_TIMEOUT;
;;;243          }
;;;244          if (getSn_SR(sn) == SOCK_CLOSED)
;;;245          {
;;;246             return SOCKERR_SOCKCLOSED;
;;;247          }
;;;248       } 
;;;249       return SOCK_OK;
;;;250    }
000280  e6fb              B        |L1.122|
                  |L1.642|
000282  4863              LDR      r0,|L1.1040|
000284  eb001644          ADD      r6,r0,r4,LSL #5       ;210
000288  4630              MOV      r0,r6                 ;210
00028a  f7fffffe          BL       WIZCHIP_READ
00028e  f0000003          AND      r0,r0,#3              ;210
000292  f06f0a04          MVN      r10,#4                ;210
000296  2801              CMP      r0,#1                 ;210
000298  d15c              BNE      |L1.852|
00029a  485a              LDR      r0,|L1.1028|
00029c  eb001544          ADD      r5,r0,r4,LSL #5       ;211
0002a0  4628              MOV      r0,r5                 ;211
0002a2  f7fffffe          BL       WIZCHIP_READ
0002a6  2813              CMP      r0,#0x13              ;211
0002a8  d002              BEQ      |L1.688|
0002aa  f06f0002          MVN      r0,#2                 ;211
0002ae  e6e4              B        |L1.122|
                  |L1.688|
0002b0  2100              MOVS     r1,#0                 ;213
0002b2  4608              MOV      r0,r1                 ;213
0002b4  e005              B        |L1.706|
                  |L1.694|
0002b6  f8192000          LDRB     r2,[r9,r0]            ;213
0002ba  1c40              ADDS     r0,r0,#1              ;213
0002bc  4411              ADD      r1,r1,r2              ;213
0002be  b289              UXTH     r1,r1                 ;213
0002c0  b2c0              UXTB     r0,r0                 ;213
                  |L1.706|
0002c2  4540              CMP      r0,r8                 ;213
0002c4  d3f7              BCC      |L1.694|
0002c6  b379              CBZ      r1,|L1.808|
0002c8  b37f              CBZ      r7,|L1.810|
0002ca  4855              LDR      r0,|L1.1056|
0002cc  0a39              LSRS     r1,r7,#8              ;216
0002ce  eb001044          ADD      r0,r0,r4,LSL #5       ;216
0002d2  f7fffffe          BL       WIZCHIP_WRITE
0002d6  4853              LDR      r0,|L1.1060|
0002d8  b2f9              UXTB     r1,r7                 ;216
0002da  eb001044          ADD      r0,r0,r4,LSL #5       ;216
0002de  f7fffffe          BL       WIZCHIP_WRITE
0002e2  4944              LDR      r1,|L1.1012|
0002e4  f1b80f10          CMP      r8,#0x10              ;218
0002e8  eb011744          ADD      r7,r1,r4,LSL #5       ;223
0002ec  4630              MOV      r0,r6                 ;218
0002ee  d023              BEQ      |L1.824|
0002f0  f7fffffe          BL       WIZCHIP_READ
0002f4  2809              CMP      r0,#9                 ;229
0002f6  d02d              BEQ      |L1.852|
0002f8  484b              LDR      r0,|L1.1064|
0002fa  2204              MOVS     r2,#4                 ;230
0002fc  eb001044          ADD      r0,r0,r4,LSL #5       ;230
000300  4649              MOV      r1,r9                 ;230
000302  f7fffffe          BL       WIZCHIP_WRITE_BUF
000306  4638              MOV      r0,r7                 ;230
000308  2104              MOVS     r1,#4                 ;231
                  |L1.778|
00030a  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.782|
00030e  4638              MOV      r0,r7                 ;231
000310  f7fffffe          BL       WIZCHIP_READ
000314  2800              CMP      r0,#0                 ;233
000316  d1fa              BNE      |L1.782|
000318  4938              LDR      r1,|L1.1020|
00031a  2001              MOVS     r0,#1                 ;235
00031c  40a0              LSLS     r0,r0,r4              ;235
00031e  8849              LDRH     r1,[r1,#2]            ;235  ; sock_io_mode
000320  4208              TST      r0,r1                 ;235
000322  d02e              BEQ      |L1.898|
000324  2000              MOVS     r0,#0                 ;235
                  |L1.806|
000326  e6a8              B        |L1.122|
                  |L1.808|
000328  e000              B        |L1.812|
                  |L1.810|
00032a  e002              B        |L1.818|
                  |L1.812|
00032c  f06f000b          MVN      r0,#0xb               ;213
000330  e6a3              B        |L1.122|
                  |L1.818|
000332  f06f000a          MVN      r0,#0xa               ;214
000336  e6a0              B        |L1.122|
                  |L1.824|
000338  f7fffffe          BL       WIZCHIP_READ
00033c  0700              LSLS     r0,r0,#28             ;220
00033e  d509              BPL      |L1.852|
000340  483a              LDR      r0,|L1.1068|
000342  2210              MOVS     r2,#0x10              ;222
000344  eb001044          ADD      r0,r0,r4,LSL #5       ;222
000348  4649              MOV      r1,r9                 ;222
00034a  f7fffffe          BL       WIZCHIP_WRITE_BUF
00034e  4638              MOV      r0,r7                 ;222
000350  2184              MOVS     r1,#0x84              ;223
000352  e7da              B        |L1.778|
                  |L1.852|
000354  4650              MOV      r0,r10                ;229
000356  e690              B        |L1.122|
                  |L1.856|
000358  4630              MOV      r0,r6
00035a  f7fffffe          BL       WIZCHIP_READ
00035e  0700              LSLS     r0,r0,#28             ;239
000360  d508              BPL      |L1.884|
000362  4825              LDR      r0,|L1.1016|
000364  2108              MOVS     r1,#8                 ;241
000366  eb001044          ADD      r0,r0,r4,LSL #5       ;241
00036a  f7fffffe          BL       WIZCHIP_WRITE
00036e  f06f000c          MVN      r0,#0xc               ;242
000372  e682              B        |L1.122|
                  |L1.884|
000374  4628              MOV      r0,r5
000376  f7fffffe          BL       WIZCHIP_READ
00037a  b928              CBNZ     r0,|L1.904|
00037c  f06f0003          MVN      r0,#3                 ;246
000380  e67b              B        |L1.122|
                  |L1.898|
000382  482b              LDR      r0,|L1.1072|
000384  eb001644          ADD      r6,r0,r4,LSL #5       ;239
                  |L1.904|
000388  4628              MOV      r0,r5                 ;239
00038a  f7fffffe          BL       WIZCHIP_READ
00038e  2817              CMP      r0,#0x17              ;237
000390  d1e2              BNE      |L1.856|
000392  2001              MOVS     r0,#1                 ;249
000394  e671              B        |L1.122|
;;;251    
                          ENDP

                  disconnect PROC
;;;252    int8_t disconnect(uint8_t sn)
000396  b570              PUSH     {r4-r6,lr}
;;;253    {
000398  4604              MOV      r4,r0
;;;254       CHECK_SOCKNUM();
00039a  2808              CMP      r0,#8
00039c  d302              BCC      |L1.932|
00039e  f04f30ff          MOV      r0,#0xffffffff
;;;255       CHECK_TCPMODE();
;;;256       if(getSn_SR(sn) != SOCK_CLOSED)
;;;257       {
;;;258          setSn_CR(sn,Sn_CR_DISCON);
;;;259          /* wait to process the command... */
;;;260          while(getSn_CR(sn));
;;;261          if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
;;;262          while(getSn_SR(sn) != SOCK_CLOSED)
;;;263          {
;;;264             if(getSn_IR(sn) & Sn_IR_TIMEOUT)
;;;265             {
;;;266                close(sn);
;;;267                return SOCKERR_TIMEOUT;
;;;268             }
;;;269          }
;;;270       }
;;;271       return SOCK_OK;
;;;272    }
0003a2  bd70              POP      {r4-r6,pc}
                  |L1.932|
0003a4  481a              LDR      r0,|L1.1040|
0003a6  eb001044          ADD      r0,r0,r4,LSL #5       ;255
0003aa  f7fffffe          BL       WIZCHIP_READ
0003ae  f0000003          AND      r0,r0,#3              ;255
0003b2  2801              CMP      r0,#1                 ;255
0003b4  d002              BEQ      |L1.956|
0003b6  f06f0004          MVN      r0,#4                 ;255
0003ba  bd70              POP      {r4-r6,pc}
                  |L1.956|
0003bc  4811              LDR      r0,|L1.1028|
0003be  eb001544          ADD      r5,r0,r4,LSL #5       ;256
0003c2  4628              MOV      r0,r5                 ;256
0003c4  f7fffffe          BL       WIZCHIP_READ
0003c8  b198              CBZ      r0,|L1.1010|
0003ca  480a              LDR      r0,|L1.1012|
0003cc  2108              MOVS     r1,#8                 ;258
0003ce  eb001644          ADD      r6,r0,r4,LSL #5       ;258
0003d2  4630              MOV      r0,r6                 ;258
0003d4  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.984|
0003d8  4630              MOV      r0,r6                 ;260
0003da  f7fffffe          BL       WIZCHIP_READ
0003de  2800              CMP      r0,#0                 ;260
0003e0  d1fa              BNE      |L1.984|
0003e2  4906              LDR      r1,|L1.1020|
0003e4  2001              MOVS     r0,#1                 ;261
0003e6  40a0              LSLS     r0,r0,r4              ;261
0003e8  8849              LDRH     r1,[r1,#2]            ;261  ; sock_io_mode
0003ea  4208              TST      r0,r1                 ;261
0003ec  d02d              BEQ      |L1.1098|
0003ee  2000              MOVS     r0,#0                 ;261
0003f0  bd70              POP      {r4-r6,pc}
                  |L1.1010|
0003f2  e032              B        |L1.1114|
                  |L1.1012|
                          DCD      0x60001008
                  |L1.1016|
                          DCD      0x60002808
                  |L1.1020|
                          DCD      ||.data||
                  |L1.1024|
                          DCD      ||.bss||
                  |L1.1028|
                          DCD      0x60003008
                  |L1.1032|
                          DCD      0x60413800
                  |L1.1036|
                          DCD      0x60414000
                  |L1.1040|
                          DCD      0x60000008
                  |L1.1044|
                          DCD      0x60014408
                  |L1.1048|
                          DCD      0x60011408
                  |L1.1052|
                          DCD      0x60011508
                  |L1.1056|
                          DCD      0x60014008
                  |L1.1060|
                          DCD      0x60014108
                  |L1.1064|
                          DCD      0x60012008
                  |L1.1068|
                          DCD      0x60013008
                  |L1.1072|
                          DCD      0x60002008
                  |L1.1076|
000434  4630              MOV      r0,r6                 ;264
000436  f7fffffe          BL       WIZCHIP_READ
00043a  0700              LSLS     r0,r0,#28             ;264
00043c  d508              BPL      |L1.1104|
00043e  4620              MOV      r0,r4                 ;266
000440  f7fffffe          BL       close
000444  f06f000c          MVN      r0,#0xc               ;267
000448  bd70              POP      {r4-r6,pc}
                  |L1.1098|
00044a  48fe              LDR      r0,|L1.2116|
00044c  eb001644          ADD      r6,r0,r4,LSL #5       ;264
                  |L1.1104|
000450  4628              MOV      r0,r5                 ;264
000452  f7fffffe          BL       WIZCHIP_READ
000456  2800              CMP      r0,#0                 ;262
000458  d1ec              BNE      |L1.1076|
                  |L1.1114|
00045a  2001              MOVS     r0,#1                 ;271
00045c  bd70              POP      {r4-r6,pc}
;;;273    
                          ENDP

                  send PROC
;;;274    
;;;275    datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
00045e  e92d5ff0          PUSH     {r4-r12,lr}
;;;276    {
000462  4605              MOV      r5,r0
;;;277       uint8_t tmp=0;
;;;278       datasize_t freesize=0;
;;;279       /* 
;;;280        * The below codes can be omitted for optmization of speed
;;;281        */
;;;282       //CHECK_SOCKNUM();
;;;283       //CHECK_TCPMODE(Sn_MR_TCP4);
;;;284       /************/
;;;285    
;;;286       freesize = getSn_TxMAX(sn);
000464  48f8              LDR      r0,|L1.2120|
000466  4617              MOV      r7,r2                 ;276
000468  468b              MOV      r11,r1                ;276
00046a  eb001045          ADD      r0,r0,r5,LSL #5
00046e  f7fffffe          BL       WIZCHIP_READ
000472  0280              LSLS     r0,r0,#10
000474  b200              SXTH     r0,r0
;;;287       if (len > freesize) len = freesize; // check size not to exceed MAX size.
000476  4287              CMP      r7,r0
000478  dd00              BLE      |L1.1148|
00047a  4607              MOV      r7,r0
                  |L1.1148|
;;;288       while(1)
;;;289       {
;;;290          freesize = (datasize_t)getSn_TX_FSR(sn);
;;;291          tmp = getSn_SR(sn);
00047c  48f3              LDR      r0,|L1.2124|
;;;292          if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
;;;293          {
;;;294             if(tmp == SOCK_CLOSED) close(sn);
;;;295             return SOCKERR_SOCKSTATUS;
;;;296          }
;;;297          if(len <= freesize) break;
;;;298          if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
00047e  2401              MOVS     r4,#1
000480  f8df93cc          LDR      r9,|L1.2128|
000484  f06f0a06          MVN      r10,#6                ;295
000488  eb001645          ADD      r6,r0,r5,LSL #5       ;291
00048c  40ac              LSLS     r4,r4,r5
                  |L1.1166|
00048e  4628              MOV      r0,r5                 ;290
000490  f7fffffe          BL       getSn_TX_FSR
000494  4680              MOV      r8,r0                 ;290
000496  4630              MOV      r0,r6                 ;290
000498  f7fffffe          BL       WIZCHIP_READ
00049c  2817              CMP      r0,#0x17              ;292
00049e  d006              BEQ      |L1.1198|
0004a0  281c              CMP      r0,#0x1c              ;292
0004a2  d004              BEQ      |L1.1198|
0004a4  bb48              CBNZ     r0,|L1.1274|
                  |L1.1190|
0004a6  4628              MOV      r0,r5                 ;294
0004a8  f7fffffe          BL       close
0004ac  e025              B        |L1.1274|
                  |L1.1198|
0004ae  4547              CMP      r7,r8                 ;297
0004b0  dd04              BLE      |L1.1212|
0004b2  f8b90002          LDRH     r0,[r9,#2]  ; sock_io_mode
0004b6  4204              TST      r4,r0
0004b8  d0e9              BEQ      |L1.1166|
0004ba  e025              B        |L1.1288|
                  |L1.1212|
;;;299       }
;;;300       wiz_send_data(sn, buf, len);
0004bc  463a              MOV      r2,r7
0004be  4659              MOV      r1,r11
0004c0  4628              MOV      r0,r5
0004c2  f7fffffe          BL       wiz_send_data
;;;301       if(sock_is_sending & (1<<sn))
0004c6  f8b90004          LDRH     r0,[r9,#4]  ; sock_is_sending
0004ca  4204              TST      r4,r0
0004cc  d024              BEQ      |L1.1304|
;;;302       {
;;;303          while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
;;;304          {    
;;;305             tmp = getSn_SR(sn);
;;;306             if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
;;;307             {
;;;308                if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
0004ce  48dd              LDR      r0,|L1.2116|
0004d0  eb001845          ADD      r8,r0,r5,LSL #5
                  |L1.1236|
0004d4  4640              MOV      r0,r8
0004d6  f7fffffe          BL       WIZCHIP_READ
0004da  06c0              LSLS     r0,r0,#27             ;303
0004dc  d416              BMI      |L1.1292|
0004de  4630              MOV      r0,r6                 ;303
0004e0  f7fffffe          BL       WIZCHIP_READ
0004e4  2817              CMP      r0,#0x17              ;306
0004e6  d00b              BEQ      |L1.1280|
0004e8  281c              CMP      r0,#0x1c              ;306
0004ea  d009              BEQ      |L1.1280|
0004ec  2800              CMP      r0,#0
0004ee  d0da              BEQ      |L1.1190|
0004f0  4640              MOV      r0,r8
0004f2  f7fffffe          BL       WIZCHIP_READ
0004f6  0700              LSLS     r0,r0,#28
0004f8  d4d5              BMI      |L1.1190|
                  |L1.1274|
;;;309                return SOCKERR_SOCKSTATUS;
0004fa  4650              MOV      r0,r10
                  |L1.1276|
;;;310             }
;;;311             if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
;;;312          } 
;;;313          setSn_IRCLR(sn, Sn_IR_SENDOK);
;;;314       }
;;;315       setSn_CR(sn,Sn_CR_SEND);
;;;316     
;;;317       while(getSn_CR(sn));   // wait to process the command...
;;;318       sock_is_sending |= (1<<sn);
;;;319     
;;;320       return len;
;;;321    }
0004fc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1280|
000500  f8b90002          LDRH     r0,[r9,#2]            ;311  ; sock_io_mode
000504  4204              TST      r4,r0                 ;311
000506  d0e5              BEQ      |L1.1236|
                  |L1.1288|
000508  2000              MOVS     r0,#0                 ;311
00050a  e7f7              B        |L1.1276|
                  |L1.1292|
00050c  48d1              LDR      r0,|L1.2132|
00050e  2110              MOVS     r1,#0x10              ;313
000510  eb001045          ADD      r0,r0,r5,LSL #5       ;313
000514  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1304|
000518  48cf              LDR      r0,|L1.2136|
00051a  2120              MOVS     r1,#0x20              ;315
00051c  eb001545          ADD      r5,r0,r5,LSL #5       ;315
000520  4628              MOV      r0,r5                 ;315
000522  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1318|
000526  4628              MOV      r0,r5                 ;317
000528  f7fffffe          BL       WIZCHIP_READ
00052c  2800              CMP      r0,#0                 ;317
00052e  d1fa              BNE      |L1.1318|
000530  f8b91004          LDRH     r1,[r9,#4]            ;318  ; sock_is_sending
000534  4638              MOV      r0,r7                 ;320
000536  430c              ORRS     r4,r4,r1              ;318
000538  f8a94004          STRH     r4,[r9,#4]            ;318
00053c  e7de              B        |L1.1276|
;;;322    
                          ENDP

                  recv PROC
;;;323    
;;;324    datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
00053e  e92d47f0          PUSH     {r4-r10,lr}
;;;325    {
000542  4606              MOV      r6,r0
;;;326       uint8_t  tmp = 0;
;;;327       datasize_t recvsize = 0;
;;;328       /* 
;;;329        * The below codes can be omitted for optmization of speed
;;;330        */
;;;331       //CHECK_SOCKNUM();
;;;332       //CHECK_TCPMODE();
;;;333       //CHECK_SOCKDATA();
;;;334       /************/
;;;335     
;;;336       recvsize = getSn_RxMAX(sn); 
000544  48c5              LDR      r0,|L1.2140|
000546  4614              MOV      r4,r2                 ;325
000548  468a              MOV      r10,r1                ;325
00054a  eb001046          ADD      r0,r0,r6,LSL #5
00054e  f7fffffe          BL       WIZCHIP_READ
000552  0280              LSLS     r0,r0,#10
000554  b200              SXTH     r0,r0
;;;337       if(recvsize < len) len = recvsize;
000556  42a0              CMP      r0,r4
000558  da00              BGE      |L1.1372|
00055a  4604              MOV      r4,r0
                  |L1.1372|
;;;338       while(1)
;;;339       {
;;;340          recvsize = (datasize_t)getSn_RX_RSR(sn);
;;;341          tmp = getSn_SR(sn);
00055c  48bb              LDR      r0,|L1.2124|
;;;342          if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
;;;343          {
;;;344             if(tmp == SOCK_CLOSED) close(sn);
;;;345             return SOCKERR_SOCKSTATUS;
;;;346          }
;;;347          if(recvsize) break;
;;;348          if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
00055e  2701              MOVS     r7,#1
000560  f8df92ec          LDR      r9,|L1.2128|
000564  eb001846          ADD      r8,r0,r6,LSL #5       ;341
000568  40b7              LSLS     r7,r7,r6
                  |L1.1386|
00056a  4630              MOV      r0,r6                 ;340
00056c  f7fffffe          BL       getSn_RX_RSR
000570  4605              MOV      r5,r0                 ;340
000572  4640              MOV      r0,r8                 ;340
000574  f7fffffe          BL       WIZCHIP_READ
000578  2817              CMP      r0,#0x17              ;342
00057a  d008              BEQ      |L1.1422|
00057c  281c              CMP      r0,#0x1c              ;342
00057e  d006              BEQ      |L1.1422|
000580  b910              CBNZ     r0,|L1.1416|
000582  4630              MOV      r0,r6                 ;344
000584  f7fffffe          BL       close
                  |L1.1416|
000588  f06f0006          MVN      r0,#6                 ;345
                  |L1.1420|
;;;349       }
;;;350       if(recvsize < len) len = recvsize;
;;;351       wiz_recv_data(sn, buf, len); 
;;;352       setSn_CR(sn,Sn_CR_RECV); 
;;;353       while(getSn_CR(sn));  
;;;354       return len;
;;;355    }
00058c  e575              B        |L1.122|
                  |L1.1422|
00058e  b1ad              CBZ      r5,|L1.1468|
000590  42a5              CMP      r5,r4                 ;350
000592  da00              BGE      |L1.1430|
000594  462c              MOV      r4,r5                 ;350
                  |L1.1430|
000596  4622              MOV      r2,r4                 ;351
000598  4651              MOV      r1,r10                ;351
00059a  4630              MOV      r0,r6                 ;351
00059c  f7fffffe          BL       wiz_recv_data
0005a0  48ad              LDR      r0,|L1.2136|
0005a2  2140              MOVS     r1,#0x40              ;352
0005a4  eb001546          ADD      r5,r0,r6,LSL #5       ;352
0005a8  4628              MOV      r0,r5                 ;352
0005aa  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1454|
0005ae  4628              MOV      r0,r5                 ;353
0005b0  f7fffffe          BL       WIZCHIP_READ
0005b4  2800              CMP      r0,#0                 ;353
0005b6  d1fa              BNE      |L1.1454|
0005b8  4620              MOV      r0,r4                 ;354
0005ba  e55e              B        |L1.122|
                  |L1.1468|
0005bc  f8b90002          LDRH     r0,[r9,#2]            ;348  ; sock_io_mode
0005c0  4207              TST      r7,r0                 ;348
0005c2  d0d2              BEQ      |L1.1386|
0005c4  2000              MOVS     r0,#0                 ;348
0005c6  e558              B        |L1.122|
;;;356    
                          ENDP

                  sendto PROC
;;;357    
;;;358    datasize_t sendto(uint8_t sn, uint8_t * buf, datasize_t len, uint8_t * addr, uint16_t port, uint8_t addrlen)
0005c8  e92d5ff0          PUSH     {r4-r12,lr}
;;;359    {
0005cc  4604              MOV      r4,r0
0005ce  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;360       uint8_t tmp = 0;
;;;361       uint8_t tcmd = 0;
;;;362       uint16_t freesize = 0;
;;;363       /* 
;;;364        * The below codes can be omitted for optmization of speed
;;;365        */
;;;366       //CHECK_SOCKNUM();
;;;367       //CHECK_DGRAMMODE();
;;;368       /************/
;;;369       tmp = getSn_MR(sn);
0005d2  48a3              LDR      r0,|L1.2144|
0005d4  469a              MOV      r10,r3                ;359
0005d6  4616              MOV      r6,r2                 ;359
0005d8  468b              MOV      r11,r1                ;359
0005da  f04f0900          MOV      r9,#0                 ;361
0005de  eb001044          ADD      r0,r0,r4,LSL #5
0005e2  f7fffffe          BL       WIZCHIP_READ
0005e6  4605              MOV      r5,r0
;;;370       if(tmp != Sn_MR_MACRAW)
0005e8  2807              CMP      r0,#7
0005ea  d021              BEQ      |L1.1584|
;;;371       {
;;;372           if (addrlen == 16)      // addrlen=16, Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)), IPRAW6(1011)
;;;373          {
;;;374             if( tmp & 0x08)  
;;;375             {
;;;376                setSn_DIP6R(sn,addr);
;;;377                tcmd = Sn_CR_SEND6;
;;;378             }
;;;379             else return SOCKERR_SOCKMODE;
0005ec  f06f0104          MVN      r1,#4
0005f0  f1b80f10          CMP      r8,#0x10              ;372
0005f4  d004              BEQ      |L1.1536|
;;;380          } 
;;;381          else if(addrlen == 4)      // addrlen=4, Sn_MR_UDP4(0010), Sn_MR_UDPD(1110), IPRAW4(0011)
0005f6  f1b80f04          CMP      r8,#4
0005fa  d00c              BEQ      |L1.1558|
;;;382          {
;;;383             if(tmp == Sn_MR_UDP6 || tmp == Sn_MR_IPRAW6) return SOCKERR_SOCKMODE;
;;;384             setSn_DIPR(sn,addr);
;;;385             tcmd = Sn_CR_SEND;
;;;386          }
;;;387          else return SOCKERR_IPINVALID;
0005fc  1fc8              SUBS     r0,r1,#7
;;;388       }
;;;389       if(tmp & 0x02)     // Sn_MR_UPD4(0010), Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)
;;;390       {
;;;391          if(port){ setSn_DPORTR(sn, port);}
;;;392          else   return SOCKERR_PORTZERO;
;;;393       }
;;;394      
;;;395       freesize = getSn_TxMAX(sn);
;;;396       if (len > freesize) len = freesize; // check size not to exceed MAX size.
;;;397      
;;;398       while(1)
;;;399       {
;;;400          freesize = getSn_TX_FSR(sn);
;;;401          if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
;;;402          if(len <= freesize) break;
;;;403          if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
;;;404       };
;;;405       wiz_send_data(sn, buf, len);
;;;406       setSn_CR(sn,tcmd);
;;;407       while(getSn_CR(sn));
;;;408      
;;;409       while(1)
;;;410       {
;;;411          tmp = getSn_IR(sn);
;;;412          if(tmp & Sn_IR_SENDOK)
;;;413          {
;;;414             setSn_IRCLR(sn, Sn_IR_SENDOK);
;;;415             break;
;;;416          }  
;;;417          else if(tmp & Sn_IR_TIMEOUT)
;;;418          {
;;;419             setSn_IRCLR(sn, Sn_IR_TIMEOUT);   
;;;420             return SOCKERR_TIMEOUT;
;;;421          }
;;;422       }  
;;;423       return (int32_t)len;
;;;424    }
0005fe  e77d              B        |L1.1276|
                  |L1.1536|
000600  0728              LSLS     r0,r5,#28             ;374
000602  d547              BPL      |L1.1684|
000604  4897              LDR      r0,|L1.2148|
000606  2210              MOVS     r2,#0x10              ;376
000608  eb001044          ADD      r0,r0,r4,LSL #5       ;376
00060c  4651              MOV      r1,r10                ;376
00060e  f7fffffe          BL       WIZCHIP_WRITE_BUF
000612  20a0              MOVS     r0,#0xa0              ;377
000614  e00b              B        |L1.1582|
                  |L1.1558|
000616  2d0a              CMP      r5,#0xa               ;383
000618  d03c              BEQ      |L1.1684|
00061a  2d0b              CMP      r5,#0xb               ;383
00061c  d03a              BEQ      |L1.1684|
00061e  4892              LDR      r0,|L1.2152|
000620  2204              MOVS     r2,#4                 ;384
000622  eb001044          ADD      r0,r0,r4,LSL #5       ;384
000626  4651              MOV      r1,r10                ;384
000628  f7fffffe          BL       WIZCHIP_WRITE_BUF
00062c  2020              MOVS     r0,#0x20              ;385
                  |L1.1582|
00062e  4681              MOV      r9,r0                 ;385
                  |L1.1584|
000630  07a8              LSLS     r0,r5,#30             ;389
000632  d50c              BPL      |L1.1614|
000634  b387              CBZ      r7,|L1.1688|
000636  488d              LDR      r0,|L1.2156|
000638  0a39              LSRS     r1,r7,#8              ;391
00063a  eb001044          ADD      r0,r0,r4,LSL #5       ;391
00063e  f7fffffe          BL       WIZCHIP_WRITE
000642  488b              LDR      r0,|L1.2160|
000644  b2f9              UXTB     r1,r7                 ;391
000646  eb001044          ADD      r0,r0,r4,LSL #5       ;391
00064a  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1614|
00064e  487e              LDR      r0,|L1.2120|
000650  eb001044          ADD      r0,r0,r4,LSL #5       ;395
000654  f7fffffe          BL       WIZCHIP_READ
000658  f64f71ff          MOV      r1,#0xffff            ;395
00065c  ea012080          AND      r0,r1,r0,LSL #10      ;395
000660  4286              CMP      r6,r0                 ;396
000662  dd00              BLE      |L1.1638|
000664  b206              SXTH     r6,r0                 ;396
                  |L1.1638|
000666  4879              LDR      r0,|L1.2124|
000668  2701              MOVS     r7,#1                 ;403
00066a  f8dfa1e4          LDR      r10,|L1.2128|
00066e  eb001844          ADD      r8,r0,r4,LSL #5       ;401
000672  40a7              LSLS     r7,r7,r4              ;403
                  |L1.1652|
000674  4620              MOV      r0,r4                 ;400
000676  f7fffffe          BL       getSn_TX_FSR
00067a  b285              UXTH     r5,r0                 ;400
00067c  4640              MOV      r0,r8                 ;400
00067e  f7fffffe          BL       WIZCHIP_READ
000682  b168              CBZ      r0,|L1.1696|
000684  42ae              CMP      r6,r5                 ;402
000686  dd0e              BLE      |L1.1702|
000688  f8ba0002          LDRH     r0,[r10,#2]           ;403  ; sock_io_mode
00068c  4207              TST      r7,r0                 ;403
00068e  d0f1              BEQ      |L1.1652|
000690  2000              MOVS     r0,#0                 ;403
000692  e733              B        |L1.1276|
                  |L1.1684|
000694  4608              MOV      r0,r1                 ;383
000696  e731              B        |L1.1276|
                  |L1.1688|
000698  e7ff              B        |L1.1690|
                  |L1.1690|
00069a  f06f000a          MVN      r0,#0xa               ;392
00069e  e72d              B        |L1.1276|
                  |L1.1696|
0006a0  f06f0003          MVN      r0,#3                 ;401
0006a4  e72a              B        |L1.1276|
                  |L1.1702|
0006a6  4632              MOV      r2,r6                 ;405
0006a8  4659              MOV      r1,r11                ;405
0006aa  4620              MOV      r0,r4                 ;405
0006ac  f7fffffe          BL       wiz_send_data
0006b0  4869              LDR      r0,|L1.2136|
0006b2  4649              MOV      r1,r9                 ;406
0006b4  eb001744          ADD      r7,r0,r4,LSL #5       ;406
0006b8  4638              MOV      r0,r7                 ;406
0006ba  f7fffffe          BL       WIZCHIP_WRITE
0006be  4865              LDR      r0,|L1.2132|
0006c0  eb001544          ADD      r5,r0,r4,LSL #5       ;414
                  |L1.1732|
0006c4  4638              MOV      r0,r7                 ;407
0006c6  f7fffffe          BL       WIZCHIP_READ
0006ca  2800              CMP      r0,#0                 ;407
0006cc  d1fa              BNE      |L1.1732|
0006ce  485d              LDR      r0,|L1.2116|
0006d0  eb001444          ADD      r4,r0,r4,LSL #5       ;411
                  |L1.1748|
0006d4  4620              MOV      r0,r4                 ;411
0006d6  f7fffffe          BL       WIZCHIP_READ
0006da  06c1              LSLS     r1,r0,#27             ;412
0006dc  d505              BPL      |L1.1770|
0006de  4628              MOV      r0,r5                 ;412
0006e0  2110              MOVS     r1,#0x10              ;414
0006e2  f7fffffe          BL       WIZCHIP_WRITE
0006e6  4630              MOV      r0,r6                 ;423
0006e8  e708              B        |L1.1276|
                  |L1.1770|
0006ea  0700              LSLS     r0,r0,#28             ;417
0006ec  d5f2              BPL      |L1.1748|
0006ee  4628              MOV      r0,r5                 ;417
0006f0  2108              MOVS     r1,#8                 ;419
0006f2  f7fffffe          BL       WIZCHIP_WRITE
0006f6  f06f000c          MVN      r0,#0xc               ;420
0006fa  e6ff              B        |L1.1276|
;;;425    
                          ENDP

                  recvfrom PROC
;;;426    
;;;427    datasize_t recvfrom(uint8_t sn, uint8_t * buf, datasize_t len, uint8_t * addr, uint16_t *port, uint8_t *addrlen)
0006fc  e92d4fff          PUSH     {r0-r11,lr}
;;;428    { 
;;;429       uint8_t  head[2];
;;;430       datasize_t pack_len=0;
;;;431      
;;;432       /* 
;;;433        * The below codes can be omitted for optmization of speed
;;;434        */
;;;435       //CHECK_SOCKNUM();
;;;436       //CHECK_DGRAMMODE();
;;;437       //CHECK_SOCKDATA();
;;;438       /************/
;;;439      
;;;440       if(sock_remained_size[sn] == 0)
000700  f8dfa170          LDR      r10,|L1.2164|
000704  4604              MOV      r4,r0                 ;428
000706  b083              SUB      sp,sp,#0xc            ;428
000708  f83a1014          LDRH     r1,[r10,r4,LSL #1]
;;;441       {
;;;442          while(1)
;;;443          {
;;;444             pack_len = getSn_RX_RSR(sn);
;;;445             if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
;;;446             if(pack_len != 0)
;;;447             {
;;;448                sock_pack_info[sn] = PACK_NONE;
00070c  f8df9140          LDR      r9,|L1.2128|
;;;449                break;
;;;450             } 
;;;451             if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;
;;;452          };
;;;453          /* First read 2 bytes of PACKET INFO in SOCKETn RX buffer*/
;;;454          wiz_recv_data(sn, head, 2);  
;;;455          setSn_CR(sn,Sn_CR_RECV);
000710  4851              LDR      r0,|L1.2136|
000712  f8dd8044          LDR      r8,[sp,#0x44]         ;440
000716  4693              MOV      r11,r2                ;428
000718  f1090906          ADD      r9,r9,#6              ;448
00071c  eb001544          ADD      r5,r0,r4,LSL #5
000720  2900              CMP      r1,#0                 ;440
000722  d175              BNE      |L1.2064|
000724  4849              LDR      r0,|L1.2124|
000726  2601              MOVS     r6,#1                 ;451
000728  eb001744          ADD      r7,r0,r4,LSL #5       ;445
00072c  40a6              LSLS     r6,r6,r4              ;451
                  |L1.1838|
00072e  4620              MOV      r0,r4                 ;444
000730  f7fffffe          BL       getSn_RX_RSR
000734  9001              STR      r0,[sp,#4]            ;444
000736  4638              MOV      r0,r7                 ;444
000738  f7fffffe          BL       WIZCHIP_READ
00073c  b368              CBZ      r0,|L1.1946|
00073e  9801              LDR      r0,[sp,#4]            ;446
000740  b380              CBZ      r0,|L1.1956|
000742  2000              MOVS     r0,#0                 ;448
000744  f8090004          STRB     r0,[r9,r4]            ;448
000748  464f              MOV      r7,r9                 ;448
00074a  2202              MOVS     r2,#2                 ;454
00074c  4669              MOV      r1,sp                 ;454
00074e  4620              MOV      r0,r4                 ;454
000750  f7fffffe          BL       wiz_recv_data
000754  4628              MOV      r0,r5                 ;454
000756  2140              MOVS     r1,#0x40
000758  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.1884|
00075c  4628              MOV      r0,r5
;;;456          while(getSn_CR(sn));
00075e  f7fffffe          BL       WIZCHIP_READ
000762  2800              CMP      r0,#0
000764  d1fa              BNE      |L1.1884|
;;;457          pack_len = head[0] & 0x07;
000766  f89d0000          LDRB     r0,[sp,#0]
;;;458          pack_len = (pack_len << 8) + head[1];
00076a  f89d1001          LDRB     r1,[sp,#1]
00076e  f0000007          AND      r0,r0,#7              ;457
000772  eb012600          ADD      r6,r1,r0,LSL #8
;;;459        
;;;460          switch (getSn_MR(sn) & 0x0F)
000776  483a              LDR      r0,|L1.2144|
000778  eb001044          ADD      r0,r0,r4,LSL #5
00077c  9001              STR      r0,[sp,#4]
00077e  f7fffffe          BL       WIZCHIP_READ
000782  f000000f          AND      r0,r0,#0xf
000786  280a              CMP      r0,#0xa
000788  d01a              BEQ      |L1.1984|
00078a  dc12              BGT      |L1.1970|
00078c  2802              CMP      r0,#2
00078e  d017              BEQ      |L1.1984|
000790  2803              CMP      r0,#3
000792  d015              BEQ      |L1.1984|
000794  2807              CMP      r0,#7
000796  d110              BNE      |L1.1978|
000798  e030              B        |L1.2044|
                  |L1.1946|
00079a  f06f0003          MVN      r0,#3                 ;445
                  |L1.1950|
;;;461          {
;;;462             case Sn_MR_UDP4 :
;;;463             case Sn_MR_UDP6:
;;;464             case Sn_MR_UDPD:
;;;465             case Sn_MR_IPRAW6:
;;;466             case Sn_MR_IPRAW4 : 
;;;467                if(addr == 0) return SOCKERR_ARG;
;;;468                sock_pack_info[sn] = head[0] & 0xF8;
;;;469                if(sock_pack_info[sn] & PACK_IPv6) *addrlen = 16;
;;;470                else *addrlen = 4;
;;;471                wiz_recv_data(sn, addr, *addrlen);
;;;472                setSn_CR(sn,Sn_CR_RECV);
;;;473                while(getSn_CR(sn));
;;;474                break;
;;;475             case Sn_MR_MACRAW :
;;;476                if(pack_len > 1514) 
;;;477                {
;;;478                   close(sn);
;;;479                   return SOCKFATAL_PACKLEN;
;;;480                }
;;;481                break; 
;;;482             default:
;;;483                return SOCKERR_SOCKMODE;
;;;484                break;
;;;485          }
;;;486          sock_remained_size[sn] = pack_len;
;;;487          sock_pack_info[sn] |= PACK_FIRST;
;;;488          if((getSn_MR(sn) & 0x03) == 0x02)  // Sn_MR_UDP4(0010), Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)
;;;489          {
;;;490             /* Read port number of PACKET INFO in SOCKETn RX buffer */
;;;491             if(port==0) return SOCKERR_ARG;
;;;492             wiz_recv_data(sn, head, 2);
;;;493             *port = ( ((((uint16_t)head[0])) << 8) + head[1] );
;;;494             setSn_CR(sn,Sn_CR_RECV);
;;;495             while(getSn_CR(sn));   
;;;496          }
;;;497       }   
;;;498       
;;;499       if   (len < sock_remained_size[sn]) pack_len = len;
;;;500       else pack_len = sock_remained_size[sn];    
;;;501       wiz_recv_data(sn, buf, pack_len);
;;;502       setSn_CR(sn,Sn_CR_RECV);  
;;;503       /* wait to process the command... */
;;;504       while(getSn_CR(sn)) ;
;;;505     
;;;506       sock_remained_size[sn] -= pack_len; 
;;;507       if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= PACK_REMAINED; 
;;;508       else sock_pack_info[sn] |= PACK_COMPLETED; 
;;;509     
;;;510       return pack_len;
;;;511    }
00079e  b007              ADD      sp,sp,#0x1c
0007a0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1956|
0007a4  e7ff              B        |L1.1958|
                  |L1.1958|
0007a6  482a              LDR      r0,|L1.2128|
0007a8  8840              LDRH     r0,[r0,#2]            ;451  ; sock_io_mode
0007aa  4206              TST      r6,r0                 ;451
0007ac  d0bf              BEQ      |L1.1838|
0007ae  2000              MOVS     r0,#0                 ;451
0007b0  e7f5              B        |L1.1950|
                  |L1.1970|
0007b2  280b              CMP      r0,#0xb               ;460
0007b4  d004              BEQ      |L1.1984|
0007b6  280e              CMP      r0,#0xe               ;460
0007b8  d002              BEQ      |L1.1984|
                  |L1.1978|
0007ba  f06f0004          MVN      r0,#4                 ;483
0007be  e7ee              B        |L1.1950|
                  |L1.1984|
0007c0  9806              LDR      r0,[sp,#0x18]         ;467
0007c2  2800              CMP      r0,#0                 ;467
0007c4  d072              BEQ      |L1.2220|
0007c6  f89d0000          LDRB     r0,[sp,#0]            ;468
0007ca  f00000f8          AND      r0,r0,#0xf8           ;468
0007ce  5538              STRB     r0,[r7,r4]            ;468
0007d0  0600              LSLS     r0,r0,#24             ;469
0007d2  d501              BPL      |L1.2008|
0007d4  2110              MOVS     r1,#0x10              ;469
0007d6  e000              B        |L1.2010|
                  |L1.2008|
0007d8  2104              MOVS     r1,#4                 ;470
                  |L1.2010|
0007da  f8881000          STRB     r1,[r8,#0]            ;470
0007de  b2ca              UXTB     r2,r1                 ;471
0007e0  4620              MOV      r0,r4                 ;471
0007e2  9906              LDR      r1,[sp,#0x18]         ;471
0007e4  f7fffffe          BL       wiz_recv_data
0007e8  4628              MOV      r0,r5                 ;471
0007ea  2140              MOVS     r1,#0x40              ;472
0007ec  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2032|
0007f0  4628              MOV      r0,r5                 ;472
0007f2  f7fffffe          BL       WIZCHIP_READ
0007f6  2800              CMP      r0,#0                 ;473
0007f8  d1fa              BNE      |L1.2032|
0007fa  e00a              B        |L1.2066|
                  |L1.2044|
0007fc  f24050ea          MOV      r0,#0x5ea             ;476
000800  4286              CMP      r6,r0                 ;476
000802  dd06              BLE      |L1.2066|
000804  4620              MOV      r0,r4                 ;478
000806  f7fffffe          BL       close
00080a  f46f707a          MVN      r0,#0x3e8             ;479
00080e  e7c6              B        |L1.1950|
                  |L1.2064|
000810  e03f              B        |L1.2194|
                  |L1.2066|
000812  f82a6014          STRH     r6,[r10,r4,LSL #1]    ;486
000816  5d38              LDRB     r0,[r7,r4]            ;487
000818  f0400002          ORR      r0,r0,#2              ;487
00081c  5538              STRB     r0,[r7,r4]            ;487
00081e  9801              LDR      r0,[sp,#4]            ;488
000820  f7fffffe          BL       WIZCHIP_READ
000824  f0000003          AND      r0,r0,#3              ;488
000828  2802              CMP      r0,#2                 ;488
00082a  d132              BNE      |L1.2194|
00082c  9810              LDR      r0,[sp,#0x40]         ;491
00082e  b3e8              CBZ      r0,|L1.2220|
000830  2202              MOVS     r2,#2                 ;492
000832  4669              MOV      r1,sp                 ;492
000834  4620              MOV      r0,r4                 ;492
000836  f7fffffe          BL       wiz_recv_data
00083a  f89d0001          LDRB     r0,[sp,#1]            ;493
00083e  f89d1000          LDRB     r1,[sp,#0]            ;493
000842  e019              B        |L1.2168|
                  |L1.2116|
                          DCD      0x60002008
                  |L1.2120|
                          DCD      0x60020008
                  |L1.2124|
                          DCD      0x60003008
                  |L1.2128|
                          DCD      ||.data||
                  |L1.2132|
                          DCD      0x60002808
                  |L1.2136|
                          DCD      0x60001008
                  |L1.2140|
                          DCD      0x60022008
                  |L1.2144|
                          DCD      0x60000008
                  |L1.2148|
                          DCD      0x60013008
                  |L1.2152|
                          DCD      0x60012008
                  |L1.2156|
                          DCD      0x60014008
                  |L1.2160|
                          DCD      0x60014108
                  |L1.2164|
                          DCD      ||.bss||
                  |L1.2168|
000878  eb002001          ADD      r0,r0,r1,LSL #8       ;493
00087c  9910              LDR      r1,[sp,#0x40]         ;493
00087e  8008              STRH     r0,[r1,#0]            ;493
000880  4628              MOV      r0,r5                 ;493
000882  2140              MOVS     r1,#0x40              ;494
000884  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2184|
000888  4628              MOV      r0,r5                 ;494
00088a  f7fffffe          BL       WIZCHIP_READ
00088e  2800              CMP      r0,#0                 ;495
000890  d1fa              BNE      |L1.2184|
                  |L1.2194|
000892  f93a6014          LDRSH    r6,[r10,r4,LSL #1]    ;499
000896  4657              MOV      r7,r10                ;499
000898  4658              MOV      r0,r11                ;499
00089a  455e              CMP      r6,r11                ;499
00089c  dd00              BLE      |L1.2208|
00089e  4606              MOV      r6,r0                 ;499
                  |L1.2208|
0008a0  4632              MOV      r2,r6                 ;501
0008a2  4620              MOV      r0,r4                 ;501
0008a4  9904              LDR      r1,[sp,#0x10]         ;501
0008a6  f7fffffe          BL       wiz_recv_data
0008aa  e000              B        |L1.2222|
                  |L1.2220|
0008ac  e014              B        |L1.2264|
                  |L1.2222|
0008ae  4628              MOV      r0,r5                 ;501
0008b0  2140              MOVS     r1,#0x40              ;502
0008b2  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2230|
0008b6  4628              MOV      r0,r5                 ;502
0008b8  f7fffffe          BL       WIZCHIP_READ
0008bc  2800              CMP      r0,#0                 ;504
0008be  d1fa              BNE      |L1.2230|
0008c0  f8370014          LDRH     r0,[r7,r4,LSL #1]     ;506
0008c4  1b80              SUBS     r0,r0,r6              ;506
0008c6  b200              SXTH     r0,r0                 ;506
0008c8  f8270014          STRH     r0,[r7,r4,LSL #1]     ;506
0008cc  f8191004          LDRB     r1,[r9,r4]            ;508
0008d0  b128              CBZ      r0,|L1.2270|
0008d2  f0410104          ORR      r1,r1,#4              ;507
0008d6  e004              B        |L1.2274|
                  |L1.2264|
0008d8  f06f0009          MVN      r0,#9                 ;491
0008dc  e75f              B        |L1.1950|
                  |L1.2270|
0008de  f0410108          ORR      r1,r1,#8              ;508
                  |L1.2274|
0008e2  f8091004          STRB     r1,[r9,r4]            ;508
0008e6  4630              MOV      r0,r6                 ;510
0008e8  e759              B        |L1.1950|
;;;512    
                          ENDP

                  ctlsocket PROC
;;;513    int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
0008ea  e92d41f0          PUSH     {r4-r8,lr}
;;;514    {
0008ee  4614              MOV      r4,r2
0008f0  468c              MOV      r12,r1
;;;515       uint8_t tmp = 0;
;;;516       CHECK_SOCKNUM();
0008f2  2808              CMP      r0,#8
0008f4  d303              BCC      |L1.2302|
0008f6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2298|
;;;517       tmp = *((uint8_t*)arg); 
;;;518       switch(cstype)
;;;519       {
;;;520          case CS_SET_IOMODE:
;;;521             if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
;;;522             else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
;;;523             else return SOCKERR_ARG;
;;;524             break;
;;;525          case CS_GET_IOMODE: 
;;;526             *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
;;;527             break;
;;;528          case CS_GET_MAXTXBUF:
;;;529             *((datasize_t*)arg) = getSn_TxMAX(sn);
;;;530             break;
;;;531          case CS_GET_MAXRXBUF:  
;;;532             *((datasize_t*)arg) = getSn_RxMAX(sn);
;;;533             break;
;;;534          case CS_CLR_INTERRUPT:
;;;535             if( tmp > SIK_ALL) return SOCKERR_ARG;
;;;536             setSn_IRCLR(sn,tmp);
;;;537             break;
;;;538          case CS_GET_INTERRUPT:
;;;539             *((uint8_t*)arg) = getSn_IR(sn);
;;;540             break;
;;;541          case CS_SET_INTMASK:
;;;542             if( tmp > SIK_ALL) return SOCKERR_ARG;
;;;543             setSn_IMR(sn,tmp);
;;;544             break;
;;;545          case CS_GET_INTMASK:
;;;546             *((uint8_t*)arg) = getSn_IMR(sn);
;;;547             break;
;;;548          case CS_SET_PREFER:
;;;549        	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
;;;550        	  setSn_PSR(sn, tmp);
;;;551        	  break;
;;;552          case CS_GET_PREFER:
;;;553        	  *(uint8_t*) arg = getSn_PSR(sn);
;;;554        	  break;
;;;555          default:
;;;556             return SOCKERR_ARG;
;;;557       }
;;;558       return SOCK_OK;
;;;559    }
0008fa  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2302|
0008fe  4ac9              LDR      r2,|L1.3108|
000900  4fc7              LDR      r7,|L1.3104|
000902  eb021640          ADD      r6,r2,r0,LSL #5       ;543
000906  4ac8              LDR      r2,|L1.3112|
000908  7821              LDRB     r1,[r4,#0]            ;517
00090a  eb021540          ADD      r5,r2,r0,LSL #5       ;550
00090e  887a              LDRH     r2,[r7,#2]            ;521
000910  f06f0309          MVN      r3,#9                 ;523
000914  f1bc0f0a          CMP      r12,#0xa              ;518
000918  d23f              BCS      |L1.2458|
00091a  e8dff00c          TBB      [pc,r12]              ;518
00091e  0511              DCB      0x05,0x11
000920  15171f25          DCB      0x15,0x17,0x1f,0x25
000924  2b32343a          DCB      0x2b,0x32,0x34,0x3a
000928  2401              MOVS     r4,#1                 ;514
00092a  4084              LSLS     r4,r4,r0              ;521
00092c  2901              CMP      r1,#1                 ;521
00092e  d001              BEQ      |L1.2356|
000930  b119              CBZ      r1,|L1.2362|
000932  e032              B        |L1.2458|
                  |L1.2356|
000934  4314              ORRS     r4,r4,r2              ;521
000936  807c              STRH     r4,[r7,#2]            ;521
000938  e021              B        |L1.2430|
                  |L1.2362|
00093a  43a2              BICS     r2,r2,r4              ;522
00093c  807a              STRH     r2,[r7,#2]            ;522
00093e  e01e              B        |L1.2430|
000940  40c2              LSRS     r2,r2,r0              ;526
000942  f0020001          AND      r0,r2,#1              ;526
000946  e013              B        |L1.2416|
000948  49b8              LDR      r1,|L1.3116|
00094a  e000              B        |L1.2382|
00094c  49b8              LDR      r1,|L1.3120|
                  |L1.2382|
00094e  eb011040          ADD      r0,r1,r0,LSL #5       ;529
000952  f7fffffe          BL       WIZCHIP_READ
000956  0280              LSLS     r0,r0,#10             ;529
000958  8020              STRH     r0,[r4,#0]            ;529
00095a  e010              B        |L1.2430|
00095c  291f              CMP      r1,#0x1f              ;535
00095e  d81c              BHI      |L1.2458|
000960  4ab4              LDR      r2,|L1.3124|
000962  eb021040          ADD      r0,r2,r0,LSL #5       ;536
000966  e008              B        |L1.2426|
000968  49b3              LDR      r1,|L1.3128|
00096a  eb011040          ADD      r0,r1,r0,LSL #5       ;539
00096e  e011              B        |L1.2452|
                  |L1.2416|
000970  7020              STRB     r0,[r4,#0]            ;526
000972  e004              B        |L1.2430|
000974  291f              CMP      r1,#0x1f              ;542
000976  d810              BHI      |L1.2458|
000978  4630              MOV      r0,r6                 ;542
                  |L1.2426|
00097a  f7fffffe          BL       WIZCHIP_WRITE
                  |L1.2430|
00097e  2001              MOVS     r0,#1                 ;558
000980  e7bb              B        |L1.2298|
000982  4630              MOV      r0,r6
000984  e006              B        |L1.2452|
000986  f0010003          AND      r0,r1,#3              ;549
00098a  2801              CMP      r0,#1                 ;549
00098c  d005              BEQ      |L1.2458|
00098e  4628              MOV      r0,r5                 ;549
000990  e7f3              B        |L1.2426|
000992  4628              MOV      r0,r5                 ;551
                  |L1.2452|
000994  f7fffffe          BL       WIZCHIP_READ
000998  e7ea              B        |L1.2416|
                  |L1.2458|
00099a  4618              MOV      r0,r3                 ;556
00099c  e7ad              B        |L1.2298|
;;;560    
                          ENDP

                  setsockopt PROC
;;;561    int8_t setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
00099e  e92d41f0          PUSH     {r4-r8,lr}
;;;562    {
0009a2  4615              MOV      r5,r2
0009a4  4604              MOV      r4,r0
;;;563       CHECK_SOCKNUM();
0009a6  2808              CMP      r0,#8
0009a8  d302              BCC      |L1.2480|
0009aa  f04f30ff          MOV      r0,#0xffffffff
;;;564       switch(sotype)
;;;565       {
;;;566          case SO_TTL:
;;;567             setSn_TTLR(sn,*(uint8_t*)arg);
;;;568             break;
;;;569          case SO_TOS:
;;;570             setSn_TOSR(sn,*(uint8_t*)arg);
;;;571             break;
;;;572          case SO_MSS:
;;;573             setSn_MSSR(sn,*(uint16_t*)arg);
;;;574             break;
;;;575          case SO_DESTIP:
;;;576             if(((wiz_IPAddress*)arg)->len == 16) setSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
;;;577             else           setSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
;;;578             break;
;;;579          case SO_DESTPORT:
;;;580             setSn_DPORTR(sn, *(uint16_t*)arg);
;;;581             break;
;;;582          case SO_KEEPALIVESEND:
;;;583             CHECK_TCPMODE();   
;;;584             if(getSn_KPALVTR(sn) != 0) return SOCKERR_SOCKOPT;
;;;585             setSn_CR(sn,Sn_CR_SEND_KEEP);
;;;586             while(getSn_CR(sn) != 0)
;;;587             {     
;;;588                if (getSn_IR(sn) & Sn_IR_TIMEOUT)
;;;589                {
;;;590                   setSn_IRCLR(sn, Sn_IR_TIMEOUT);
;;;591                   return SOCKERR_TIMEOUT;
;;;592                }
;;;593             }
;;;594             break;
;;;595          case SO_KEEPALIVEAUTO:
;;;596             CHECK_TCPMODE();
;;;597             setSn_KPALVTR(sn,*(uint8_t*)arg);
;;;598             break;   
;;;599          default:
;;;600             return SOCKERR_ARG;
;;;601       } 
;;;602       return SOCK_OK;
;;;603    }
0009ae  e7a4              B        |L1.2298|
                  |L1.2480|
0009b0  48a2              LDR      r0,|L1.3132|
0009b2  4aa3              LDR      r2,|L1.3136|
0009b4  eb001044          ADD      r0,r0,r4,LSL #5       ;583
0009b8  f06f0704          MVN      r7,#4                 ;583
0009bc  eb021644          ADD      r6,r2,r4,LSL #5       ;584
0009c0  2908              CMP      r1,#8                 ;564
0009c2  d26b              BCS      |L1.2716|
0009c4  e8dff001          TBB      [pc,r1]               ;564
0009c8  6a04070e          DCB      0x6a,0x04,0x07,0x0e
0009cc  1828325f          DCB      0x18,0x28,0x32,0x5f
0009d0  7829              LDRB     r1,[r5,#0]            ;567
0009d2  489c              LDR      r0,|L1.3140|
0009d4  e001              B        |L1.2522|
0009d6  7829              LDRB     r1,[r5,#0]            ;570
0009d8  489b              LDR      r0,|L1.3144|
                  |L1.2522|
0009da  eb001044          ADD      r0,r0,r4,LSL #5       ;567
                  |L1.2526|
0009de  f7fffffe          BL       WIZCHIP_WRITE
0009e2  e04e              B        |L1.2690|
0009e4  8828              LDRH     r0,[r5,#0]            ;573
0009e6  0a01              LSRS     r1,r0,#8              ;573
0009e8  4898              LDR      r0,|L1.3148|
0009ea  eb001044          ADD      r0,r0,r4,LSL #5       ;573
0009ee  f7fffffe          BL       WIZCHIP_WRITE
0009f2  7829              LDRB     r1,[r5,#0]            ;573
0009f4  4896              LDR      r0,|L1.3152|
0009f6  e7f0              B        |L1.2522|
0009f8  7c28              LDRB     r0,[r5,#0x10]         ;576
0009fa  2810              CMP      r0,#0x10              ;576
0009fc  d007              BEQ      |L1.2574|
0009fe  4895              LDR      r0,|L1.3156|
000a00  2204              MOVS     r2,#4                 ;577
000a02  eb001044          ADD      r0,r0,r4,LSL #5       ;577
                  |L1.2566|
000a06  4629              MOV      r1,r5                 ;576
000a08  f7fffffe          BL       WIZCHIP_WRITE_BUF
000a0c  e039              B        |L1.2690|
                  |L1.2574|
000a0e  4892              LDR      r0,|L1.3160|
000a10  2210              MOVS     r2,#0x10              ;576
000a12  eb001044          ADD      r0,r0,r4,LSL #5       ;576
000a16  e7f6              B        |L1.2566|
000a18  8828              LDRH     r0,[r5,#0]            ;580
000a1a  0a01              LSRS     r1,r0,#8              ;580
000a1c  488f              LDR      r0,|L1.3164|
000a1e  eb001044          ADD      r0,r0,r4,LSL #5       ;580
000a22  f7fffffe          BL       WIZCHIP_WRITE
000a26  7829              LDRB     r1,[r5,#0]            ;580
000a28  488d              LDR      r0,|L1.3168|
000a2a  e7d6              B        |L1.2522|
000a2c  f7fffffe          BL       WIZCHIP_READ
000a30  f0000003          AND      r0,r0,#3              ;583
000a34  2801              CMP      r0,#1                 ;583
000a36  d12c              BNE      |L1.2706|
000a38  4630              MOV      r0,r6                 ;583
000a3a  f7fffffe          BL       WIZCHIP_READ
000a3e  b110              CBZ      r0,|L1.2630|
000a40  f06f0001          MVN      r0,#1                 ;584
000a44  e759              B        |L1.2298|
                  |L1.2630|
000a46  4887              LDR      r0,|L1.3172|
000a48  2122              MOVS     r1,#0x22              ;585
000a4a  eb001644          ADD      r6,r0,r4,LSL #5       ;585
000a4e  4630              MOV      r0,r6                 ;585
000a50  f7fffffe          BL       WIZCHIP_WRITE
000a54  4878              LDR      r0,|L1.3128|
000a56  eb001544          ADD      r5,r0,r4,LSL #5       ;588
000a5a  e00d              B        |L1.2680|
                  |L1.2652|
000a5c  4628              MOV      r0,r5                 ;588
000a5e  f7fffffe          BL       WIZCHIP_READ
000a62  0700              LSLS     r0,r0,#28             ;588
000a64  d508              BPL      |L1.2680|
000a66  4873              LDR      r0,|L1.3124|
000a68  2108              MOVS     r1,#8                 ;590
000a6a  eb001044          ADD      r0,r0,r4,LSL #5       ;590
000a6e  f7fffffe          BL       WIZCHIP_WRITE
000a72  f06f000c          MVN      r0,#0xc               ;591
000a76  e740              B        |L1.2298|
                  |L1.2680|
000a78  4630              MOV      r0,r6
000a7a  f7fffffe          BL       WIZCHIP_READ
000a7e  2800              CMP      r0,#0                 ;586
000a80  d1ec              BNE      |L1.2652|
                  |L1.2690|
000a82  2001              MOVS     r0,#1                 ;602
000a84  e739              B        |L1.2298|
000a86  f7fffffe          BL       WIZCHIP_READ
000a8a  f0000003          AND      r0,r0,#3              ;596
000a8e  2801              CMP      r0,#1                 ;596
000a90  d001              BEQ      |L1.2710|
                  |L1.2706|
000a92  4638              MOV      r0,r7                 ;596
000a94  e731              B        |L1.2298|
                  |L1.2710|
000a96  7829              LDRB     r1,[r5,#0]            ;597
000a98  4630              MOV      r0,r6                 ;597
000a9a  e7a0              B        |L1.2526|
                  |L1.2716|
000a9c  f06f0009          MVN      r0,#9                 ;600
000aa0  e72b              B        |L1.2298|
;;;604    
                          ENDP

                  getsockopt PROC
;;;605    int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
000aa2  e92d47f0          PUSH     {r4-r10,lr}
;;;606    {
000aa6  4615              MOV      r5,r2
000aa8  4604              MOV      r4,r0
;;;607       CHECK_SOCKNUM();
000aaa  2808              CMP      r0,#8
000aac  d302              BCC      |L1.2740|
000aae  f04f30ff          MOV      r0,#0xffffffff
;;;608       switch(sotype)
;;;609       {
;;;610          case SO_FLAG:
;;;611             *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
;;;612             break;
;;;613          case SO_TTL:
;;;614             *(uint8_t*) arg = getSn_TTLR(sn);
;;;615             break;
;;;616          case SO_TOS:
;;;617             *(uint8_t*) arg = getSn_TOSR(sn);
;;;618             break;
;;;619          case SO_MSS: 
;;;620             *(uint16_t*) arg = getSn_MSSR(sn);
;;;621             break;
;;;622          case SO_DESTIP:
;;;623             CHECK_TCPMODE();
;;;624             if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
;;;625             {
;;;626                getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
;;;627                ((wiz_IPAddress*)arg)->len = 16;
;;;628             } 
;;;629             else
;;;630             {
;;;631                getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
;;;632                ((wiz_IPAddress*)arg)->len = 4;
;;;633             } 
;;;634             break;
;;;635          case SO_DESTPORT:  
;;;636             *(uint16_t*) arg = getSn_DPORTR(sn);
;;;637             break; 
;;;638          case SO_KEEPALIVEAUTO:
;;;639             CHECK_TCPMODE();
;;;640             *(uint16_t*) arg = getSn_KPALVTR(sn);
;;;641             break;
;;;642          case SO_SENDBUF:
;;;643             *(datasize_t*) arg = getSn_TX_FSR(sn);
;;;644             break;
;;;645          case SO_RECVBUF:
;;;646             *(datasize_t*) arg = getSn_RX_RSR(sn);
;;;647             break;
;;;648          case SO_STATUS:
;;;649             *(uint8_t*) arg = getSn_SR(sn);
;;;650             break;
;;;651          case SO_EXTSTATUS:
;;;652             CHECK_TCPMODE();
;;;653             *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
;;;654             break;
;;;655          case SO_REMAINSIZE:
;;;656             if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
;;;657             if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
;;;658             else                      *(uint16_t*)arg = sock_remained_size[sn];
;;;659             break;
;;;660          case SO_PACKINFO:
;;;661             if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
;;;662             if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
;;;663             else *(uint8_t*)arg = sock_pack_info[sn];
;;;664             break;
;;;665          case SO_MODE:
;;;666        	  *(uint8_t*) arg = 0x0F&getSn_MR(sn);
;;;667          default:
;;;668             return SOCKERR_SOCKOPT;
;;;669       }
;;;670       return SOCK_OK;
;;;671    }
000ab2  e438              B        |L1.806|
                  |L1.2740|
000ab4  486c              LDR      r0,|L1.3176|
000ab6  f06f0904          MVN      r9,#4                 ;623
000aba  eb001744          ADD      r7,r0,r4,LSL #5       ;624
000abe  485f              LDR      r0,|L1.3132|
000ac0  f06f0806          MVN      r8,#6                 ;656
000ac4  eb001644          ADD      r6,r0,r4,LSL #5       ;611
000ac8  290f              CMP      r1,#0xf               ;608
000aca  d270              BCS      |L1.2990|
000acc  e8dff001          TBB      [pc,r1]               ;608
000ad0  081b1d1f          DCB      0x08,0x1b,0x1d,0x1f
000ad4  2746a454          DCB      0x27,0x46,0xa4,0x54
000ad8  61656970          DCB      0x61,0x65,0x69,0x70
000adc  7d9e8b00          DCB      0x7d,0x9e,0x8b,0x00
000ae0  4630              MOV      r0,r6                 ;608
000ae2  f7fffffe          BL       WIZCHIP_READ
000ae6  f00006f0          AND      r6,r0,#0xf0           ;611
000aea  4860              LDR      r0,|L1.3180|
000aec  eb001044          ADD      r0,r0,r4,LSL #5       ;611
000af0  f7fffffe          BL       WIZCHIP_READ
000af4  4306              ORRS     r6,r6,r0              ;611
000af6  484a              LDR      r0,|L1.3104|
000af8  8840              LDRH     r0,[r0,#2]            ;611  ; sock_io_mode
000afa  40e0              LSRS     r0,r0,r4              ;611
000afc  f0000001          AND      r0,r0,#1              ;611
000b00  ea4600c0          ORR      r0,r6,r0,LSL #3       ;611
000b04  e07f              B        |L1.3078|
000b06  484f              LDR      r0,|L1.3140|
000b08  e04c              B        |L1.2980|
000b0a  484f              LDR      r0,|L1.3144|
000b0c  e04a              B        |L1.2980|
000b0e  4850              LDR      r0,|L1.3152|
000b10  eb001044          ADD      r0,r0,r4,LSL #5       ;620
000b14  f7fffffe          BL       WIZCHIP_READ
000b18  4606              MOV      r6,r0                 ;620
000b1a  484c              LDR      r0,|L1.3148|
000b1c  e025              B        |L1.2922|
000b1e  4630              MOV      r0,r6                 ;621
000b20  f7fffffe          BL       WIZCHIP_READ
000b24  f0000003          AND      r0,r0,#3              ;623
000b28  2801              CMP      r0,#1                 ;623
000b2a  d165              BNE      |L1.3064|
000b2c  4638              MOV      r0,r7                 ;623
000b2e  f7fffffe          BL       WIZCHIP_READ
000b32  0740              LSLS     r0,r0,#29             ;624
000b34  d508              BPL      |L1.2888|
000b36  4848              LDR      r0,|L1.3160|
000b38  2210              MOVS     r2,#0x10              ;626
000b3a  eb001044          ADD      r0,r0,r4,LSL #5       ;626
000b3e  4629              MOV      r1,r5                 ;626
000b40  f7fffffe          BL       WIZCHIP_READ_BUF
000b44  2010              MOVS     r0,#0x10              ;627
000b46  e007              B        |L1.2904|
                  |L1.2888|
000b48  4842              LDR      r0,|L1.3156|
000b4a  2204              MOVS     r2,#4                 ;631
000b4c  eb001044          ADD      r0,r0,r4,LSL #5       ;631
000b50  4629              MOV      r1,r5                 ;631
000b52  f7fffffe          BL       WIZCHIP_READ_BUF
000b56  2004              MOVS     r0,#4                 ;632
                  |L1.2904|
000b58  7428              STRB     r0,[r5,#0x10]         ;627
000b5a  e055              B        |L1.3080|
000b5c  4840              LDR      r0,|L1.3168|
000b5e  eb001044          ADD      r0,r0,r4,LSL #5       ;636
000b62  f7fffffe          BL       WIZCHIP_READ
000b66  4606              MOV      r6,r0                 ;636
000b68  483c              LDR      r0,|L1.3164|
                  |L1.2922|
000b6a  eb001044          ADD      r0,r0,r4,LSL #5       ;636
000b6e  f7fffffe          BL       WIZCHIP_READ
000b72  eb062000          ADD      r0,r6,r0,LSL #8       ;636
000b76  e034              B        |L1.3042|
000b78  4630              MOV      r0,r6                 ;636
000b7a  f7fffffe          BL       WIZCHIP_READ
000b7e  f0000003          AND      r0,r0,#3              ;639
000b82  2801              CMP      r0,#1                 ;639
000b84  d138              BNE      |L1.3064|
000b86  482e              LDR      r0,|L1.3136|
000b88  eb001044          ADD      r0,r0,r4,LSL #5       ;640
000b8c  f7fffffe          BL       WIZCHIP_READ
000b90  e027              B        |L1.3042|
000b92  4620              MOV      r0,r4                 ;643
000b94  f7fffffe          BL       getSn_TX_FSR
000b98  e023              B        |L1.3042|
                  |L1.2970|
000b9a  4620              MOV      r0,r4                 ;646
000b9c  f7fffffe          BL       getSn_RX_RSR
000ba0  e01f              B        |L1.3042|
000ba2  4833              LDR      r0,|L1.3184|
                  |L1.2980|
000ba4  eb001044          ADD      r0,r0,r4,LSL #5       ;649
000ba8  f7fffffe          BL       WIZCHIP_READ
000bac  e02b              B        |L1.3078|
                  |L1.2990|
000bae  e033              B        |L1.3096|
000bb0  4630              MOV      r0,r6                 ;649
000bb2  f7fffffe          BL       WIZCHIP_READ
000bb6  f0000003          AND      r0,r0,#3              ;652
000bba  2801              CMP      r0,#1                 ;652
000bbc  d11c              BNE      |L1.3064|
000bbe  4638              MOV      r0,r7                 ;652
000bc0  f7fffffe          BL       WIZCHIP_READ
000bc4  f0000007          AND      r0,r0,#7              ;653
000bc8  e01d              B        |L1.3078|
000bca  4630              MOV      r0,r6                 ;654
000bcc  f7fffffe          BL       WIZCHIP_READ
000bd0  b1a0              CBZ      r0,|L1.3068|
000bd2  4630              MOV      r0,r6                 ;656
000bd4  f7fffffe          BL       WIZCHIP_READ
000bd8  07c0              LSLS     r0,r0,#31             ;657
000bda  d1de              BNE      |L1.2970|
000bdc  4825              LDR      r0,|L1.3188|
000bde  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;658
                  |L1.3042|
000be2  8028              STRH     r0,[r5,#0]            ;657
000be4  e010              B        |L1.3080|
000be6  4630              MOV      r0,r6                 ;657
000be8  f7fffffe          BL       WIZCHIP_READ
000bec  b130              CBZ      r0,|L1.3068|
000bee  4630              MOV      r0,r6                 ;661
000bf0  f7fffffe          BL       WIZCHIP_READ
000bf4  07c0              LSLS     r0,r0,#31             ;662
000bf6  d003              BEQ      |L1.3072|
                  |L1.3064|
000bf8  4648              MOV      r0,r9                 ;662
000bfa  e4c7              B        |L1.1420|
                  |L1.3068|
000bfc  4640              MOV      r0,r8                 ;661
000bfe  e4c5              B        |L1.1420|
                  |L1.3072|
000c00  4807              LDR      r0,|L1.3104|
000c02  1d80              ADDS     r0,r0,#6              ;663
000c04  5d00              LDRB     r0,[r0,r4]            ;663
                  |L1.3078|
000c06  7028              STRB     r0,[r5,#0]            ;663
                  |L1.3080|
000c08  2001              MOVS     r0,#1                 ;670
000c0a  e4bf              B        |L1.1420|
000c0c  4630              MOV      r0,r6
000c0e  f7fffffe          BL       WIZCHIP_READ
000c12  f000000f          AND      r0,r0,#0xf            ;666
000c16  7028              STRB     r0,[r5,#0]            ;666
                  |L1.3096|
000c18  f06f0001          MVN      r0,#1                 ;668
000c1c  e4b6              B        |L1.1420|
                          ENDP

000c1e  0000              DCW      0x0000
                  |L1.3104|
                          DCD      ||.data||
                  |L1.3108|
                          DCD      0x60002408
                  |L1.3112|
                          DCD      0x60000408
                  |L1.3116|
                          DCD      0x60020008
                  |L1.3120|
                          DCD      0x60022008
                  |L1.3124|
                          DCD      0x60002808
                  |L1.3128|
                          DCD      0x60002008
                  |L1.3132|
                          DCD      0x60000008
                  |L1.3136|
                          DCD      0x60018808
                  |L1.3140|
                          DCD      0x60010808
                  |L1.3144|
                          DCD      0x60010408
                  |L1.3148|
                          DCD      0x60011008
                  |L1.3152|
                          DCD      0x60011108
                  |L1.3156|
                          DCD      0x60012008
                  |L1.3160|
                          DCD      0x60013008
                  |L1.3164|
                          DCD      0x60014008
                  |L1.3168|
                          DCD      0x60014108
                  |L1.3172|
                          DCD      0x60001008
                  |L1.3176|
                          DCD      0x60003108
                  |L1.3180|
                          DCD      0x60014408
                  |L1.3184|
                          DCD      0x60003008
                  |L1.3188|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  sock_remained_size
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  sock_any_port
000000  0400              DCW      0x0400
                  sock_io_mode
000002  0000              DCW      0x0000
                  sock_is_sending
000004  0000              DCW      0x0000
                  sock_pack_info
000006  0000              DCB      0x00,0x00
                          DCDU     0x00000000
00000c  0000              DCB      0x00,0x00
