; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\stm32f4xx_usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f4xx_usart.crf ..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;177      */
;;;178    void USART_DeInit(USART_TypeDef* USARTx)
000000  49c7              LDR      r1,|L1.800|
;;;179    {
000002  b510              PUSH     {r4,lr}
;;;180      /* Check the parameters */
;;;181      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;182    
;;;183      if (USARTx == USART1)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;184      {
;;;185        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2010              MOVS     r0,#0x10
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;186        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000010  2100              MOVS     r1,#0
000012  2010              MOVS     r0,#0x10
000014  e028              B        |L1.104|
                  |L1.22|
;;;187      }
;;;188      else if (USARTx == USART2)
000016  49c3              LDR      r1,|L1.804|
000018  4288              CMP      r0,r1
00001a  d102              BNE      |L1.34|
;;;189      {
;;;190        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  044c              LSLS     r4,r1,#17
;;;191        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
000020  e010              B        |L1.68|
                  |L1.34|
;;;192      }
;;;193      else if (USARTx == USART3)
000022  49c1              LDR      r1,|L1.808|
000024  4288              CMP      r0,r1
000026  d102              BNE      |L1.46|
;;;194      {
;;;195        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
000028  2101              MOVS     r1,#1
00002a  048c              LSLS     r4,r1,#18
;;;196        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
00002c  e00a              B        |L1.68|
                  |L1.46|
;;;197      }    
;;;198      else if (USARTx == UART4)
00002e  49bf              LDR      r1,|L1.812|
000030  4288              CMP      r0,r1
000032  d102              BNE      |L1.58|
;;;199      {
;;;200        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000034  2101              MOVS     r1,#1
000036  04cc              LSLS     r4,r1,#19
;;;201        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000038  e004              B        |L1.68|
                  |L1.58|
;;;202      }
;;;203      else if (USARTx == UART5)
00003a  49bd              LDR      r1,|L1.816|
00003c  4288              CMP      r0,r1
00003e  d10a              BNE      |L1.86|
;;;204      {
;;;205        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000040  2101              MOVS     r1,#1
000042  050c              LSLS     r4,r1,#20
                  |L1.68|
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;206        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
00004a  4620              MOV      r0,r4
00004c  e8bd4010          POP      {r4,lr}
000050  2100              MOVS     r1,#0
000052  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.86|
;;;207      }     
;;;208      else
;;;209      {
;;;210        if (USARTx == USART6)
000056  49b7              LDR      r1,|L1.820|
000058  4288              CMP      r0,r1
00005a  d109              BNE      |L1.112|
;;;211        { 
;;;212          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
00005c  2101              MOVS     r1,#1
00005e  2020              MOVS     r0,#0x20
000060  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;213          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
000064  2100              MOVS     r1,#0
000066  2020              MOVS     r0,#0x20
                  |L1.104|
000068  e8bd4010          POP      {r4,lr}
00006c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.112|
;;;214        }
;;;215      }
;;;216    }
000070  bd10              POP      {r4,pc}
;;;217    
                          ENDP

                  USART_Init PROC
;;;226      */
;;;227    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000072  b57f              PUSH     {r0-r6,lr}
;;;228    {
000074  4604              MOV      r4,r0
;;;229      uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;230      uint32_t integerdivider = 0x00;
;;;231      uint32_t fractionaldivider = 0x00;
;;;232      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;233    
;;;234      /* Check the parameters */
;;;235      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;236      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;237      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;238      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;239      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;240      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;241      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;242    
;;;243      /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
;;;244      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
;;;245      {
;;;246        assert_param(IS_USART_1236_PERIPH(USARTx));
;;;247      }
;;;248    
;;;249    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;250      tmpreg = USARTx->CR2;
000076  8a00              LDRH     r0,[r0,#0x10]
000078  460d              MOV      r5,r1                 ;228
;;;251    
;;;252      /* Clear STOP[13:12] bits */
;;;253      tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
;;;254    
;;;255      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
;;;256          Set STOP[13:12] bits according to USART_StopBits value */
;;;257      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
00007a  88c9              LDRH     r1,[r1,#6]
00007c  f4205040          BIC      r0,r0,#0x3000         ;253
000080  4301              ORRS     r1,r1,r0
;;;258      
;;;259      /* Write to USART CR2 */
;;;260      USARTx->CR2 = (uint16_t)tmpreg;
000082  8221              STRH     r1,[r4,#0x10]
;;;261    
;;;262    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;263      tmpreg = USARTx->CR1;
000084  89a0              LDRH     r0,[r4,#0xc]
;;;264    
;;;265      /* Clear M, PCE, PS, TE and RE bits */
;;;266      tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
000086  f241610c          MOV      r1,#0x160c
00008a  4388              BICS     r0,r0,r1
;;;267    
;;;268      /* Configure the USART Word Length, Parity and mode: 
;;;269         Set the M bits according to USART_WordLength value 
;;;270         Set PCE and PS bits according to USART_Parity value
;;;271         Set TE and RE bits according to USART_Mode value */
;;;272      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
00008c  88a9              LDRH     r1,[r5,#4]
00008e  892a              LDRH     r2,[r5,#8]
000090  4311              ORRS     r1,r1,r2
000092  896a              LDRH     r2,[r5,#0xa]
000094  4302              ORRS     r2,r2,r0
000096  4311              ORRS     r1,r1,r2
;;;273                USART_InitStruct->USART_Mode;
;;;274    
;;;275      /* Write to USART CR1 */
;;;276      USARTx->CR1 = (uint16_t)tmpreg;
000098  81a1              STRH     r1,[r4,#0xc]
;;;277    
;;;278    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;279      tmpreg = USARTx->CR3;
00009a  8aa0              LDRH     r0,[r4,#0x14]
;;;280    
;;;281      /* Clear CTSE and RTSE bits */
;;;282      tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
00009c  f4207140          BIC      r1,r0,#0x300
;;;283    
;;;284      /* Configure the USART HFC : 
;;;285          Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;286      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
0000a0  89a8              LDRH     r0,[r5,#0xc]
0000a2  4308              ORRS     r0,r0,r1
;;;287    
;;;288      /* Write to USART CR3 */
;;;289      USARTx->CR3 = (uint16_t)tmpreg;
0000a4  82a0              STRH     r0,[r4,#0x14]
;;;290    
;;;291    /*---------------------------- USART BRR Configuration -----------------------*/
;;;292      /* Configure the USART Baud Rate */
;;;293      RCC_GetClocksFreq(&RCC_ClocksStatus);
0000a6  4668              MOV      r0,sp
0000a8  f7fffffe          BL       RCC_GetClocksFreq
;;;294    
;;;295      if ((USARTx == USART1) || (USARTx == USART6))
0000ac  489c              LDR      r0,|L1.800|
0000ae  4284              CMP      r4,r0
0000b0  d002              BEQ      |L1.184|
0000b2  48a0              LDR      r0,|L1.820|
0000b4  4284              CMP      r4,r0
0000b6  d101              BNE      |L1.188|
                  |L1.184|
;;;296      {
;;;297        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
0000b8  9803              LDR      r0,[sp,#0xc]
0000ba  e000              B        |L1.190|
                  |L1.188|
;;;298      }
;;;299      else
;;;300      {
;;;301        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
0000bc  9802              LDR      r0,[sp,#8]
                  |L1.190|
;;;302      }
;;;303      
;;;304      /* Determine the integer part */
;;;305      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
0000be  89a1              LDRH     r1,[r4,#0xc]
0000c0  0409              LSLS     r1,r1,#16
;;;306      {
;;;307        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;308        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
;;;309      }
;;;310      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;311      {
;;;312        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;313        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
0000c2  eb0001c0          ADD      r1,r0,r0,LSL #3
0000c6  eb011000          ADD      r0,r1,r0,LSL #4
0000ca  6829              LDR      r1,[r5,#0]            ;305
0000cc  d501              BPL      |L1.210|
0000ce  0049              LSLS     r1,r1,#1              ;308
0000d0  e000              B        |L1.212|
                  |L1.210|
0000d2  0089              LSLS     r1,r1,#2
                  |L1.212|
0000d4  fbb0f0f1          UDIV     r0,r0,r1
;;;314      }
;;;315      tmpreg = (integerdivider / 100) << 4;
0000d8  2264              MOVS     r2,#0x64
0000da  fbb0f1f2          UDIV     r1,r0,r2
0000de  0109              LSLS     r1,r1,#4
;;;316    
;;;317      /* Determine the fractional part */
;;;318      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
0000e0  090b              LSRS     r3,r1,#4
0000e2  f06f0518          MVN      r5,#0x18
0000e6  436b              MULS     r3,r5,r3
0000e8  eb000083          ADD      r0,r0,r3,LSL #2
;;;319    
;;;320      /* Implement the fractional part in the register */
;;;321      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
0000ec  89a3              LDRH     r3,[r4,#0xc]
0000ee  041d              LSLS     r5,r3,#16
;;;322      {
;;;323        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
0000f0  f04f0332          MOV      r3,#0x32
0000f4  d506              BPL      |L1.260|
0000f6  eb0300c0          ADD      r0,r3,r0,LSL #3
0000fa  fbb0f0f2          UDIV     r0,r0,r2
0000fe  f0000007          AND      r0,r0,#7
000102  e005              B        |L1.272|
                  |L1.260|
;;;324      }
;;;325      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;326      {
;;;327        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
000104  eb031000          ADD      r0,r3,r0,LSL #4
000108  fbb0f0f2          UDIV     r0,r0,r2
00010c  f000000f          AND      r0,r0,#0xf
                  |L1.272|
000110  4308              ORRS     r0,r0,r1
;;;328      }
;;;329      
;;;330      /* Write to USART BRR register */
;;;331      USARTx->BRR = (uint16_t)tmpreg;
000112  8120              STRH     r0,[r4,#8]
;;;332    }
000114  bd7f              POP      {r0-r6,pc}
;;;333    
                          ENDP

                  USART_StructInit PROC
;;;339      */
;;;340    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000116  f44f5116          MOV      r1,#0x2580
;;;341    {
;;;342      /* USART_InitStruct members default value */
;;;343      USART_InitStruct->USART_BaudRate = 9600;
;;;344      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
00011a  6001              STR      r1,[r0,#0]
00011c  2100              MOVS     r1,#0
00011e  8081              STRH     r1,[r0,#4]
;;;345      USART_InitStruct->USART_StopBits = USART_StopBits_1;
000120  80c1              STRH     r1,[r0,#6]
;;;346      USART_InitStruct->USART_Parity = USART_Parity_No ;
000122  8101              STRH     r1,[r0,#8]
;;;347      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000124  220c              MOVS     r2,#0xc
000126  8142              STRH     r2,[r0,#0xa]
;;;348      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000128  8181              STRH     r1,[r0,#0xc]
;;;349    }
00012a  4770              BX       lr
;;;350    
                          ENDP

                  USART_ClockInit PROC
;;;359      */
;;;360    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
00012c  b510              PUSH     {r4,lr}
;;;361    {
;;;362      uint32_t tmpreg = 0x00;
;;;363      /* Check the parameters */
;;;364      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;365      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;366      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;367      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;368      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;369      
;;;370    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;371      tmpreg = USARTx->CR2;
00012e  8a02              LDRH     r2,[r0,#0x10]
;;;372      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;373      tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
;;;374      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;375      /* Set CLKEN bit according to USART_Clock value */
;;;376      /* Set CPOL bit according to USART_CPOL value */
;;;377      /* Set CPHA bit according to USART_CPHA value */
;;;378      /* Set LBCL bit according to USART_LastBit value */
;;;379      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
000130  884c              LDRH     r4,[r1,#2]
000132  f4226370          BIC      r3,r2,#0xf00          ;373
000136  880a              LDRH     r2,[r1,#0]
000138  4322              ORRS     r2,r2,r4
00013a  888c              LDRH     r4,[r1,#4]
00013c  88c9              LDRH     r1,[r1,#6]
00013e  430c              ORRS     r4,r4,r1
000140  4322              ORRS     r2,r2,r4
000142  431a              ORRS     r2,r2,r3
;;;380                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;381      /* Write to USART CR2 */
;;;382      USARTx->CR2 = (uint16_t)tmpreg;
000144  8202              STRH     r2,[r0,#0x10]
;;;383    }
000146  bd10              POP      {r4,pc}
;;;384    
                          ENDP

                  USART_ClockStructInit PROC
;;;390      */
;;;391    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000148  2100              MOVS     r1,#0
;;;392    {
;;;393      /* USART_ClockInitStruct members default value */
;;;394      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
00014a  8001              STRH     r1,[r0,#0]
;;;395      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
00014c  8041              STRH     r1,[r0,#2]
;;;396      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
00014e  8081              STRH     r1,[r0,#4]
;;;397      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000150  80c1              STRH     r1,[r0,#6]
;;;398    }
000152  4770              BX       lr
;;;399    
                          ENDP

                  USART_Cmd PROC
;;;407      */
;;;408    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000154  2900              CMP      r1,#0
;;;409    {
;;;410      /* Check the parameters */
;;;411      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;412      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;413      
;;;414      if (NewState != DISABLE)
;;;415      {
;;;416        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;417        USARTx->CR1 |= USART_CR1_UE;
;;;418      }
;;;419      else
;;;420      {
;;;421        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;422        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
000156  8981              LDRH     r1,[r0,#0xc]
000158  d002              BEQ      |L1.352|
00015a  f4415100          ORR      r1,r1,#0x2000         ;417
00015e  e001              B        |L1.356|
                  |L1.352|
000160  f4215100          BIC      r1,r1,#0x2000
                  |L1.356|
000164  8181              STRH     r1,[r0,#0xc]          ;417
;;;423      }
;;;424    }
000166  4770              BX       lr
;;;425    
                          ENDP

                  USART_SetPrescaler PROC
;;;433      */
;;;434    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000168  8b02              LDRH     r2,[r0,#0x18]
;;;435    { 
;;;436      /* Check the parameters */
;;;437      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;438      
;;;439      /* Clear the USART prescaler */
;;;440      USARTx->GTPR &= USART_GTPR_GT;
00016a  f402427f          AND      r2,r2,#0xff00
00016e  8302              STRH     r2,[r0,#0x18]
;;;441      /* Set the USART prescaler */
;;;442      USARTx->GTPR |= USART_Prescaler;
000170  8b02              LDRH     r2,[r0,#0x18]
000172  430a              ORRS     r2,r2,r1
000174  8302              STRH     r2,[r0,#0x18]
;;;443    }
000176  4770              BX       lr
;;;444    
                          ENDP

                  USART_OverSampling8Cmd PROC
;;;454      */
;;;455    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000178  2900              CMP      r1,#0
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;459      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;460      
;;;461      if (NewState != DISABLE)
;;;462      {
;;;463        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;464        USARTx->CR1 |= USART_CR1_OVER8;
;;;465      }
;;;466      else
;;;467      {
;;;468        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;469        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
00017a  8981              LDRH     r1,[r0,#0xc]
00017c  d002              BEQ      |L1.388|
00017e  f4414100          ORR      r1,r1,#0x8000         ;464
000182  e001              B        |L1.392|
                  |L1.388|
000184  f3c1010e          UBFX     r1,r1,#0,#15
                  |L1.392|
000188  8181              STRH     r1,[r0,#0xc]          ;464
;;;470      }
;;;471    }  
00018a  4770              BX       lr
;;;472    
                          ENDP

                  USART_OneBitMethodCmd PROC
;;;480      */
;;;481    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00018c  2900              CMP      r1,#0
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      
;;;487      if (NewState != DISABLE)
;;;488      {
;;;489        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;490        USARTx->CR3 |= USART_CR3_ONEBIT;
;;;491      }
;;;492      else
;;;493      {
;;;494        /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
;;;495        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
00018e  8a81              LDRH     r1,[r0,#0x14]
000190  d002              BEQ      |L1.408|
000192  f4416100          ORR      r1,r1,#0x800          ;490
000196  e001              B        |L1.412|
                  |L1.408|
000198  f4216100          BIC      r1,r1,#0x800
                  |L1.412|
00019c  8281              STRH     r1,[r0,#0x14]         ;490
;;;496      }
;;;497    }
00019e  4770              BX       lr
;;;498    
                          ENDP

                  USART_SendData PROC
;;;537      */
;;;538    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
0001a0  f3c10108          UBFX     r1,r1,#0,#9
;;;539    {
;;;540      /* Check the parameters */
;;;541      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;542      assert_param(IS_USART_DATA(Data)); 
;;;543        
;;;544      /* Transmit Data */
;;;545      USARTx->DR = (Data & (uint16_t)0x01FF);
0001a4  8081              STRH     r1,[r0,#4]
;;;546    }
0001a6  4770              BX       lr
;;;547    
                          ENDP

                  USART_ReceiveData PROC
;;;553      */
;;;554    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
0001a8  8880              LDRH     r0,[r0,#4]
;;;555    {
;;;556      /* Check the parameters */
;;;557      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;558      
;;;559      /* Receive Data */
;;;560      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
0001aa  f3c00008          UBFX     r0,r0,#0,#9
;;;561    }
0001ae  4770              BX       lr
;;;562    
                          ENDP

                  USART_SetAddress PROC
;;;604      */
;;;605    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
0001b0  8a02              LDRH     r2,[r0,#0x10]
;;;606    {
;;;607      /* Check the parameters */
;;;608      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;609      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;610        
;;;611      /* Clear the USART address */
;;;612      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
0001b2  f022020f          BIC      r2,r2,#0xf
0001b6  8202              STRH     r2,[r0,#0x10]
;;;613      /* Set the USART address node */
;;;614      USARTx->CR2 |= USART_Address;
0001b8  8a02              LDRH     r2,[r0,#0x10]
0001ba  430a              ORRS     r2,r2,r1
0001bc  8202              STRH     r2,[r0,#0x10]
;;;615    }
0001be  4770              BX       lr
;;;616    
                          ENDP

                  USART_ReceiverWakeUpCmd PROC
;;;624      */
;;;625    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0001c0  2900              CMP      r1,#0
;;;626    {
;;;627      /* Check the parameters */
;;;628      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;629      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;630      
;;;631      if (NewState != DISABLE)
;;;632      {
;;;633        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;634        USARTx->CR1 |= USART_CR1_RWU;
;;;635      }
;;;636      else
;;;637      {
;;;638        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;639        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
0001c2  8981              LDRH     r1,[r0,#0xc]
0001c4  d002              BEQ      |L1.460|
0001c6  f0410102          ORR      r1,r1,#2              ;634
0001ca  e001              B        |L1.464|
                  |L1.460|
0001cc  f0210102          BIC      r1,r1,#2
                  |L1.464|
0001d0  8181              STRH     r1,[r0,#0xc]          ;634
;;;640      }
;;;641    }
0001d2  4770              BX       lr
;;;642    /**
                          ENDP

                  USART_WakeUpConfig PROC
;;;651      */
;;;652    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
0001d4  8982              LDRH     r2,[r0,#0xc]
;;;653    {
;;;654      /* Check the parameters */
;;;655      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;656      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;657      
;;;658      USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
0001d6  f4226200          BIC      r2,r2,#0x800
0001da  8182              STRH     r2,[r0,#0xc]
;;;659      USARTx->CR1 |= USART_WakeUp;
0001dc  8982              LDRH     r2,[r0,#0xc]
0001de  430a              ORRS     r2,r2,r1
0001e0  8182              STRH     r2,[r0,#0xc]
;;;660    }
0001e2  4770              BX       lr
;;;661    
                          ENDP

                  USART_LINBreakDetectLengthConfig PROC
;;;720      */
;;;721    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
0001e4  8a02              LDRH     r2,[r0,#0x10]
;;;722    {
;;;723      /* Check the parameters */
;;;724      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;725      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;726      
;;;727      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
0001e6  f0220220          BIC      r2,r2,#0x20
0001ea  8202              STRH     r2,[r0,#0x10]
;;;728      USARTx->CR2 |= USART_LINBreakDetectLength;  
0001ec  8a02              LDRH     r2,[r0,#0x10]
0001ee  430a              ORRS     r2,r2,r1
0001f0  8202              STRH     r2,[r0,#0x10]
;;;729    }
0001f2  4770              BX       lr
;;;730    
                          ENDP

                  USART_LINCmd PROC
;;;738      */
;;;739    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0001f4  2900              CMP      r1,#0
;;;740    {
;;;741      /* Check the parameters */
;;;742      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;743      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;744      
;;;745      if (NewState != DISABLE)
;;;746      {
;;;747        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;748        USARTx->CR2 |= USART_CR2_LINEN;
;;;749      }
;;;750      else
;;;751      {
;;;752        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;753        USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
0001f6  8a01              LDRH     r1,[r0,#0x10]
0001f8  d002              BEQ      |L1.512|
0001fa  f4414180          ORR      r1,r1,#0x4000         ;748
0001fe  e001              B        |L1.516|
                  |L1.512|
000200  f4214180          BIC      r1,r1,#0x4000
                  |L1.516|
000204  8201              STRH     r1,[r0,#0x10]         ;748
;;;754      }
;;;755    }
000206  4770              BX       lr
;;;756    
                          ENDP

                  USART_SendBreak PROC
;;;762      */
;;;763    void USART_SendBreak(USART_TypeDef* USARTx)
000208  8981              LDRH     r1,[r0,#0xc]
;;;764    {
;;;765      /* Check the parameters */
;;;766      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;767      
;;;768      /* Send break characters */
;;;769      USARTx->CR1 |= USART_CR1_SBK;
00020a  f0410101          ORR      r1,r1,#1
00020e  8181              STRH     r1,[r0,#0xc]
;;;770    }
000210  4770              BX       lr
;;;771    
                          ENDP

                  USART_HalfDuplexCmd PROC
;;;815      */
;;;816    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000212  2900              CMP      r1,#0
;;;817    {
;;;818      /* Check the parameters */
;;;819      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;820      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;821      
;;;822      if (NewState != DISABLE)
;;;823      {
;;;824        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;825        USARTx->CR3 |= USART_CR3_HDSEL;
;;;826      }
;;;827      else
;;;828      {
;;;829        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;830        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
000214  8a81              LDRH     r1,[r0,#0x14]
000216  d002              BEQ      |L1.542|
000218  f0410108          ORR      r1,r1,#8              ;825
00021c  e001              B        |L1.546|
                  |L1.542|
00021e  f0210108          BIC      r1,r1,#8
                  |L1.546|
000222  8281              STRH     r1,[r0,#0x14]         ;825
;;;831      }
;;;832    }
000224  4770              BX       lr
;;;833    
                          ENDP

                  USART_SetGuardTime PROC
;;;900      */
;;;901    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000226  8b02              LDRH     r2,[r0,#0x18]
;;;902    {    
;;;903      /* Check the parameters */
;;;904      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;905      
;;;906      /* Clear the USART Guard time */
;;;907      USARTx->GTPR &= USART_GTPR_PSC;
000228  b2d2              UXTB     r2,r2
00022a  8302              STRH     r2,[r0,#0x18]
;;;908      /* Set the USART guard time */
;;;909      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
00022c  8b02              LDRH     r2,[r0,#0x18]
00022e  ea422101          ORR      r1,r2,r1,LSL #8
000232  8301              STRH     r1,[r0,#0x18]
;;;910    }
000234  4770              BX       lr
;;;911    
                          ENDP

                  USART_SmartCardCmd PROC
;;;919      */
;;;920    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000236  2900              CMP      r1,#0
;;;921    {
;;;922      /* Check the parameters */
;;;923      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;924      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;925      if (NewState != DISABLE)
;;;926      {
;;;927        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;928        USARTx->CR3 |= USART_CR3_SCEN;
;;;929      }
;;;930      else
;;;931      {
;;;932        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;933        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
000238  8a81              LDRH     r1,[r0,#0x14]
00023a  d002              BEQ      |L1.578|
00023c  f0410120          ORR      r1,r1,#0x20           ;928
000240  e001              B        |L1.582|
                  |L1.578|
000242  f0210120          BIC      r1,r1,#0x20
                  |L1.582|
000246  8281              STRH     r1,[r0,#0x14]         ;928
;;;934      }
;;;935    }
000248  4770              BX       lr
;;;936    
                          ENDP

                  USART_SmartCardNACKCmd PROC
;;;944      */
;;;945    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00024a  2900              CMP      r1,#0
;;;946    {
;;;947      /* Check the parameters */
;;;948      assert_param(IS_USART_1236_PERIPH(USARTx)); 
;;;949      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;950      if (NewState != DISABLE)
;;;951      {
;;;952        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;953        USARTx->CR3 |= USART_CR3_NACK;
;;;954      }
;;;955      else
;;;956      {
;;;957        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;958        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
00024c  8a81              LDRH     r1,[r0,#0x14]
00024e  d002              BEQ      |L1.598|
000250  f0410110          ORR      r1,r1,#0x10           ;953
000254  e001              B        |L1.602|
                  |L1.598|
000256  f0210110          BIC      r1,r1,#0x10
                  |L1.602|
00025a  8281              STRH     r1,[r0,#0x14]         ;953
;;;959      }
;;;960    }
00025c  4770              BX       lr
;;;961    
                          ENDP

                  USART_IrDAConfig PROC
;;;1015     */
;;;1016   void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
00025e  8a82              LDRH     r2,[r0,#0x14]
;;;1017   {
;;;1018     /* Check the parameters */
;;;1019     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1020     assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;1021       
;;;1022     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
000260  f0220204          BIC      r2,r2,#4
000264  8282              STRH     r2,[r0,#0x14]
;;;1023     USARTx->CR3 |= USART_IrDAMode;
000266  8a82              LDRH     r2,[r0,#0x14]
000268  430a              ORRS     r2,r2,r1
00026a  8282              STRH     r2,[r0,#0x14]
;;;1024   }
00026c  4770              BX       lr
;;;1025   
                          ENDP

                  USART_IrDACmd PROC
;;;1033     */
;;;1034   void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
00026e  2900              CMP      r1,#0
;;;1035   {
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1038     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1039       
;;;1040     if (NewState != DISABLE)
;;;1041     {
;;;1042       /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;1043       USARTx->CR3 |= USART_CR3_IREN;
;;;1044     }
;;;1045     else
;;;1046     {
;;;1047       /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;1048       USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
000270  8a81              LDRH     r1,[r0,#0x14]
000272  d002              BEQ      |L1.634|
000274  f0410102          ORR      r1,r1,#2              ;1043
000278  e001              B        |L1.638|
                  |L1.634|
00027a  f0210102          BIC      r1,r1,#2
                  |L1.638|
00027e  8281              STRH     r1,[r0,#0x14]         ;1043
;;;1049     }
;;;1050   }
000280  4770              BX       lr
;;;1051   
                          ENDP

                  USART_DMACmd PROC
;;;1079     */
;;;1080   void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000282  2a00              CMP      r2,#0
;;;1081   {
;;;1082     /* Check the parameters */
;;;1083     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1084     assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;1085     assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;1086   
;;;1087     if (NewState != DISABLE)
;;;1088     {
;;;1089       /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;1090          DMAR bits in the USART CR3 register */
;;;1091       USARTx->CR3 |= USART_DMAReq;
;;;1092     }
;;;1093     else
;;;1094     {
;;;1095       /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;1096          DMAR bits in the USART CR3 register */
;;;1097       USARTx->CR3 &= (uint16_t)~USART_DMAReq;
000284  8a82              LDRH     r2,[r0,#0x14]
000286  d001              BEQ      |L1.652|
000288  430a              ORRS     r2,r2,r1              ;1091
00028a  e000              B        |L1.654|
                  |L1.652|
00028c  438a              BICS     r2,r2,r1
                  |L1.654|
00028e  8282              STRH     r2,[r0,#0x14]         ;1091
;;;1098     }
;;;1099   }
000290  4770              BX       lr
;;;1100   
                          ENDP

                  USART_ITConfig PROC
;;;1207     */
;;;1208   void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000292  b510              PUSH     {r4,lr}
;;;1209   {
;;;1210     uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
;;;1211     uint32_t usartxbase = 0x00;
;;;1212     /* Check the parameters */
;;;1213     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1214     assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;1215     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1216   
;;;1217     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1218     if (USART_IT == USART_IT_CTS)
;;;1219     {
;;;1220       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1221     } 
;;;1222       
;;;1223     usartxbase = (uint32_t)USARTx;
;;;1224   
;;;1225     /* Get the USART register index */
;;;1226     usartreg = (((uint8_t)USART_IT) >> 0x05);
000294  f3c11342          UBFX     r3,r1,#5,#3
;;;1227   
;;;1228     /* Get the interrupt position */
;;;1229     itpos = USART_IT & IT_MASK;
000298  f001041f          AND      r4,r1,#0x1f
;;;1230     itmask = (((uint32_t)0x01) << itpos);
00029c  2101              MOVS     r1,#1
00029e  40a1              LSLS     r1,r1,r4
;;;1231       
;;;1232     if (usartreg == 0x01) /* The IT is in CR1 register */
0002a0  2b01              CMP      r3,#1
0002a2  d007              BEQ      |L1.692|
;;;1233     {
;;;1234       usartxbase += 0x0C;
;;;1235     }
;;;1236     else if (usartreg == 0x02) /* The IT is in CR2 register */
0002a4  2b02              CMP      r3,#2
0002a6  d007              BEQ      |L1.696|
0002a8  3014              ADDS     r0,r0,#0x14
                  |L1.682|
;;;1237     {
;;;1238       usartxbase += 0x10;
;;;1239     }
;;;1240     else /* The IT is in CR3 register */
;;;1241     {
;;;1242       usartxbase += 0x14; 
;;;1243     }
;;;1244     if (NewState != DISABLE)
0002aa  2a00              CMP      r2,#0
;;;1245     {
;;;1246       *(__IO uint32_t*)usartxbase  |= itmask;
;;;1247     }
;;;1248     else
;;;1249     {
;;;1250       *(__IO uint32_t*)usartxbase &= ~itmask;
0002ac  6802              LDR      r2,[r0,#0]
0002ae  d005              BEQ      |L1.700|
0002b0  430a              ORRS     r2,r2,r1              ;1246
0002b2  e004              B        |L1.702|
                  |L1.692|
0002b4  300c              ADDS     r0,r0,#0xc            ;1246
0002b6  e7f8              B        |L1.682|
                  |L1.696|
0002b8  3010              ADDS     r0,r0,#0x10           ;1234
0002ba  e7f6              B        |L1.682|
                  |L1.700|
0002bc  438a              BICS     r2,r2,r1
                  |L1.702|
0002be  6002              STR      r2,[r0,#0]            ;1246
;;;1251     }
;;;1252   }
0002c0  bd10              POP      {r4,pc}
;;;1253   
                          ENDP

                  USART_GetFlagStatus PROC
;;;1271     */
;;;1272   FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
0002c2  4602              MOV      r2,r0
;;;1273   {
;;;1274     FlagStatus bitstatus = RESET;
0002c4  2000              MOVS     r0,#0
;;;1275     /* Check the parameters */
;;;1276     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1277     assert_param(IS_USART_FLAG(USART_FLAG));
;;;1278   
;;;1279     /* The CTS flag is not available for UART4 and UART5 */
;;;1280     if (USART_FLAG == USART_FLAG_CTS)
;;;1281     {
;;;1282       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1283     } 
;;;1284       
;;;1285     if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
0002c6  8812              LDRH     r2,[r2,#0]
0002c8  420a              TST      r2,r1
0002ca  d000              BEQ      |L1.718|
;;;1286     {
;;;1287       bitstatus = SET;
0002cc  2001              MOVS     r0,#1
                  |L1.718|
;;;1288     }
;;;1289     else
;;;1290     {
;;;1291       bitstatus = RESET;
;;;1292     }
;;;1293     return bitstatus;
;;;1294   }
0002ce  4770              BX       lr
;;;1295   
                          ENDP

                  USART_ClearFlag PROC
;;;1320     */
;;;1321   void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
0002d0  43c9              MVNS     r1,r1
;;;1322   {
;;;1323     /* Check the parameters */
;;;1324     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1325     assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;1326   
;;;1327     /* The CTS flag is not available for UART4 and UART5 */
;;;1328     if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
;;;1329     {
;;;1330       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1331     } 
;;;1332          
;;;1333     USARTx->SR = (uint16_t)~USART_FLAG;
0002d2  8001              STRH     r1,[r0,#0]
;;;1334   }
0002d4  4770              BX       lr
;;;1335   
                          ENDP

                  USART_GetITStatus PROC
;;;1354     */
;;;1355   ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
0002d6  b570              PUSH     {r4-r6,lr}
;;;1356   {
;;;1357     uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
;;;1358     ITStatus bitstatus = RESET;
;;;1359     /* Check the parameters */
;;;1360     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1361     assert_param(IS_USART_GET_IT(USART_IT)); 
;;;1362   
;;;1363     /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;1364     if (USART_IT == USART_IT_CTS)
;;;1365     {
;;;1366       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1367     } 
;;;1368       
;;;1369     /* Get the USART register index */
;;;1370     usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;1371     /* Get the interrupt position */
;;;1372     itmask = USART_IT & IT_MASK;
0002d8  f001051f          AND      r5,r1,#0x1f
;;;1373     itmask = (uint32_t)0x01 << itmask;
0002dc  2601              MOVS     r6,#1
0002de  2400              MOVS     r4,#0                 ;1358
0002e0  f3c11342          UBFX     r3,r1,#5,#3           ;1370
0002e4  fa06f205          LSL      r2,r6,r5
;;;1374     
;;;1375     if (usartreg == 0x01) /* The IT  is in CR1 register */
0002e8  2b01              CMP      r3,#1
0002ea  d00f              BEQ      |L1.780|
;;;1376     {
;;;1377       itmask &= USARTx->CR1;
;;;1378     }
;;;1379     else if (usartreg == 0x02) /* The IT  is in CR2 register */
0002ec  2b02              CMP      r3,#2
0002ee  d00f              BEQ      |L1.784|
;;;1380     {
;;;1381       itmask &= USARTx->CR2;
;;;1382     }
;;;1383     else /* The IT  is in CR3 register */
;;;1384     {
;;;1385       itmask &= USARTx->CR3;
0002f0  8a83              LDRH     r3,[r0,#0x14]
                  |L1.754|
;;;1386     }
;;;1387     
;;;1388     bitpos = USART_IT >> 0x08;
0002f2  ea4f2111          LSR      r1,r1,#8
;;;1389     bitpos = (uint32_t)0x01 << bitpos;
;;;1390     bitpos &= USARTx->SR;
0002f6  8800              LDRH     r0,[r0,#0]
0002f8  4213              TST      r3,r2                 ;1381
0002fa  fa06f601          LSL      r6,r6,r1              ;1389
0002fe  ea000006          AND      r0,r0,r6
000302  d001              BEQ      |L1.776|
;;;1391     if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
000304  b100              CBZ      r0,|L1.776|
;;;1392     {
;;;1393       bitstatus = SET;
000306  2401              MOVS     r4,#1
                  |L1.776|
;;;1394     }
;;;1395     else
;;;1396     {
;;;1397       bitstatus = RESET;
;;;1398     }
;;;1399     
;;;1400     return bitstatus;  
000308  4620              MOV      r0,r4
;;;1401   }
00030a  bd70              POP      {r4-r6,pc}
                  |L1.780|
00030c  8983              LDRH     r3,[r0,#0xc]          ;1377
00030e  e7f0              B        |L1.754|
                  |L1.784|
000310  8a03              LDRH     r3,[r0,#0x10]         ;1381
000312  e7ee              B        |L1.754|
;;;1402   
                          ENDP

                  USART_ClearITPendingBit PROC
;;;1428     */
;;;1429   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000314  0a0a              LSRS     r2,r1,#8
;;;1430   {
;;;1431     uint16_t bitpos = 0x00, itmask = 0x00;
;;;1432     /* Check the parameters */
;;;1433     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1434     assert_param(IS_USART_CLEAR_IT(USART_IT)); 
;;;1435   
;;;1436     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1437     if (USART_IT == USART_IT_CTS)
;;;1438     {
;;;1439       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1440     } 
;;;1441       
;;;1442     bitpos = USART_IT >> 0x08;
;;;1443     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000316  2101              MOVS     r1,#1
000318  4091              LSLS     r1,r1,r2
;;;1444     USARTx->SR = (uint16_t)~itmask;
00031a  43c9              MVNS     r1,r1
00031c  8001              STRH     r1,[r0,#0]
;;;1445   }
00031e  4770              BX       lr
;;;1446   
                          ENDP

                  |L1.800|
                          DCD      0x40011000
                  |L1.804|
                          DCD      0x40004400
                  |L1.808|
                          DCD      0x40004800
                  |L1.812|
                          DCD      0x40004c00
                  |L1.816|
                          DCD      0x40005000
                  |L1.820|
                          DCD      0x40011400

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_usart.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_usart_c_9565154b____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f4xx_usart_c_9565154b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_usart_c_9565154b____REVSH|
#line 128
|__asm___17_stm32f4xx_usart_c_9565154b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
