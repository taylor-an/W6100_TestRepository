; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\usart.crf usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;20     *******************************************************************************/
;;;21     void USART_Configuration(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;22     {                                               
;;;23       USART_InitTypeDef USART_InitStructure; 
;;;24     /*
;;;25          USARTx configured as follow:
;;;26              - BaudRate = 115200 baud  
;;;27              - Word Length = 8 Bits
;;;28              - One Stop Bit
;;;29              - No parity
;;;30              - Hardware flow control disabled (RTS and CTS signals)
;;;31              - Receive and transmit    
;;;32      */
;;;33       USART_InitStructure.USART_BaudRate = 115200;
000002  f44f30e1          MOV      r0,#0x1c200
;;;34       USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  9000              STR      r0,[sp,#0]
000008  2000              MOVS     r0,#0
00000a  f8ad0004          STRH     r0,[sp,#4]
;;;35       USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000e  f8ad0006          STRH     r0,[sp,#6]
;;;36       USART_InitStructure.USART_Parity = USART_Parity_No;
000012  f8ad0008          STRH     r0,[sp,#8]
;;;37       USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000016  f8ad000c          STRH     r0,[sp,#0xc]
;;;38       USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00001a  200c              MOVS     r0,#0xc
;;;39       USART_Init(Open_USART, &USART_InitStructure);
00001c  4c1d              LDR      r4,|L1.148|
00001e  f8ad000a          STRH     r0,[sp,#0xa]          ;38
000022  4669              MOV      r1,sp
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       USART_Init
;;;40       /* Enable the Open_USART Transmit interrupt: this interrupt is generated when the 
;;;41          Open_USART transmit data register is empty */
;;;42       //USART_ITConfig(Open_USART,USART_IT_RXNE,ENABLE);
;;;43       USART_Cmd(Open_USART, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       USART_Cmd
;;;44     
;;;45     }
000032  bd1f              POP      {r0-r4,pc}
;;;46     
                          ENDP

                  _sys_exit PROC
;;;56     
;;;57     void _sys_exit(int x)
000034  4770              BX       lr
;;;58     {
;;;59         x = x;
;;;60     }
;;;61     #endif
                          ENDP

                  fputc PROC
;;;67       */
;;;68     PUTCHAR_PROTOTYPE
000036  b570              PUSH     {r4-r6,lr}
;;;69     {
;;;70       /* Place your implementation of fputc here */
;;;71       /* e.g. write a character to the USART */
;;;72       USART_SendData(Open_USART, (uint8_t) ch);
000038  4d16              LDR      r5,|L1.148|
00003a  4604              MOV      r4,r0                 ;69
00003c  b2c1              UXTB     r1,r0
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       USART_SendData
                  |L1.68|
;;;73     
;;;74       /* Loop until the end of transmission */
;;;75       while (USART_GetFlagStatus(Open_USART, USART_FLAG_TC) == RESET)
000044  2140              MOVS     r1,#0x40
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       USART_GetFlagStatus
00004c  2800              CMP      r0,#0
00004e  d0f9              BEQ      |L1.68|
;;;76       {}
;;;77     
;;;78       return ch;
000050  4620              MOV      r0,r4
;;;79     }
000052  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP

                  UartGetc PROC
;;;81     uint8_t UartGetc(void)
000054  b510              PUSH     {r4,lr}
;;;82     {
;;;83         while( USART_GetFlagStatus(Open_USART, USART_FLAG_RXNE)==RESET);
000056  4c0f              LDR      r4,|L1.148|
                  |L1.88|
000058  2120              MOVS     r1,#0x20
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       USART_GetFlagStatus
000060  2800              CMP      r0,#0
000062  d0f9              BEQ      |L1.88|
;;;84         
;;;85         return USART_ReceiveData(Open_USART);
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       USART_ReceiveData
00006a  b2c0              UXTB     r0,r0
;;;86     }
00006c  bd10              POP      {r4,pc}
;;;87     
                          ENDP

                  UartGets PROC
;;;88     int UartGets(uint8_t *str, int size)
00006e  b570              PUSH     {r4-r6,lr}
;;;89     {
000070  460d              MOV      r5,r1
000072  4604              MOV      r4,r0
;;;90         uint8_t ch;
;;;91         
;;;92         while(size)
;;;93         {
;;;94             ch = UartGetc();
;;;95             if(ch != '\n') (*str) = ch;
;;;96             if(ch == '\r') break;
;;;97             
;;;98             str++;
;;;99             size--;
000074  e008              B        |L1.136|
                  |L1.118|
000076  f7fffffe          BL       UartGetc
00007a  280a              CMP      r0,#0xa               ;95
00007c  d002              BEQ      |L1.132|
00007e  7020              STRB     r0,[r4,#0]            ;95
000080  280d              CMP      r0,#0xd               ;96
000082  d003              BEQ      |L1.140|
                  |L1.132|
000084  1c64              ADDS     r4,r4,#1              ;95
000086  1e6d              SUBS     r5,r5,#1              ;95
                  |L1.136|
000088  2d00              CMP      r5,#0                 ;92
00008a  d1f4              BNE      |L1.118|
                  |L1.140|
;;;100        }
;;;101        *str = 0;
00008c  2000              MOVS     r0,#0
00008e  7020              STRB     r0,[r4,#0]
;;;102        
;;;103        return size;
000090  4628              MOV      r0,r5
;;;104    }
000092  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP

                  |L1.148|
                          DCD      0x40011000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "usart.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_3deb77c7____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_3deb77c7____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_3deb77c7____REVSH|
#line 128
|__asm___7_usart_c_3deb77c7____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
