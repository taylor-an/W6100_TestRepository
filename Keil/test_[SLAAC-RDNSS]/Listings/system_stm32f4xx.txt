; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\system_stm32f4xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\system_stm32f4xx.crf ..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Source\Templates\system_stm32f4xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;208      */
;;;209    void SystemInit(void)
000000  4854              LDR      r0,|L1.340|
;;;210    {
000002  b510              PUSH     {r4,lr}
;;;211      /* FPU settings ------------------------------------------------------------*/
;;;212      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;213        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;214      #endif
;;;215    
;;;216      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;217      /* Set HSION bit */
;;;218      RCC->CR |= (uint32_t)0x00000001;
00000c  4852              LDR      r0,|L1.344|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;219    
;;;220      /* Reset CFGR register */
;;;221      RCC->CFGR = 0x00000000;
000016  4a50              LDR      r2,|L1.344|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;222    
;;;223      /* Reset HSEON, CSSON and PLLON bits */
;;;224      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b4e              LDR      r3,|L1.348|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;225    
;;;226      /* Reset PLLCFGR register */
;;;227      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a4d              LDR      r2,|L1.352|
00002a  601a              STR      r2,[r3,#0]
;;;228    
;;;229      /* Reset HSEBYP bit */
;;;230      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;231    
;;;232      /* Disable all interrupts */
;;;233      RCC->CIR = 0x00000000;
000034  4848              LDR      r0,|L1.344|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;234    
;;;235    #ifdef DATA_IN_ExtSRAM
;;;236      SystemInit_ExtMemCtl(); 
;;;237    #endif /* DATA_IN_ExtSRAM */
;;;238             
;;;239      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;240         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;241      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;242    
;;;243      /* Configure the Vector Table location add offset address ------------------*/
;;;244    #ifdef VECT_TAB_SRAM
;;;245      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;246    #else
;;;247      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4945              LDR      r1,|L1.340|
000040  f04f6000          MOV      r0,#0x8000000
000044  3980              SUBS     r1,r1,#0x80
000046  6008              STR      r0,[r1,#0]
;;;248    #endif
;;;249    }
000048  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;286      */
;;;287    void SystemCoreClockUpdate(void)
00004a  b570              PUSH     {r4-r6,lr}
;;;288    {
;;;289      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;290      
;;;291      /* Get SYSCLK source -------------------------------------------------------*/
;;;292      tmp = RCC->CFGR & RCC_CFGR_SWS;
00004c  4d42              LDR      r5,|L1.344|
00004e  3508              ADDS     r5,r5,#8
000050  6828              LDR      r0,[r5,#0]
;;;293    
;;;294      switch (tmp)
;;;295      {
;;;296        case 0x00:  /* HSI used as system clock source */
;;;297          SystemCoreClock = HSI_VALUE;
000052  4b44              LDR      r3,|L1.356|
000054  4944              LDR      r1,|L1.360|
000056  f010000c          ANDS     r0,r0,#0xc            ;292
00005a  d004              BEQ      |L1.102|
;;;298          break;
;;;299        case 0x04:  /* HSE used as system clock source */
;;;300          SystemCoreClock = HSE_VALUE;
00005c  105e              ASRS     r6,r3,#1
00005e  2804              CMP      r0,#4                 ;294
000060  d003              BEQ      |L1.106|
000062  2808              CMP      r0,#8                 ;294
000064  d003              BEQ      |L1.110|
                  |L1.102|
000066  600b              STR      r3,[r1,#0]            ;298  ; SystemCoreClock
000068  e01b              B        |L1.162|
                  |L1.106|
;;;301          break;
00006a  600e              STR      r6,[r1,#0]  ; SystemCoreClock
00006c  e019              B        |L1.162|
                  |L1.110|
;;;302        case 0x08:  /* PLL used as system clock source */
;;;303    
;;;304          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;305             SYSCLK = PLL_VCO / PLL_P
;;;306             */    
;;;307          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
00006e  4a3a              LDR      r2,|L1.344|
000070  1d12              ADDS     r2,r2,#4
000072  6810              LDR      r0,[r2,#0]
000074  f3c05480          UBFX     r4,r0,#22,#1
;;;308          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000078  6810              LDR      r0,[r2,#0]
00007a  f000003f          AND      r0,r0,#0x3f
;;;309          
;;;310          if (pllsource != 0)
00007e  b114              CBZ      r4,|L1.134|
;;;311          {
;;;312            /* HSE used as PLL clock source */
;;;313            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000080  fbb6f0f0          UDIV     r0,r6,r0
000084  e001              B        |L1.138|
                  |L1.134|
;;;314          }
;;;315          else
;;;316          {
;;;317            /* HSI used as PLL clock source */
;;;318            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000086  fbb3f0f0          UDIV     r0,r3,r0
                  |L1.138|
00008a  6813              LDR      r3,[r2,#0]
;;;319          }
;;;320    
;;;321          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
00008c  6812              LDR      r2,[r2,#0]
00008e  f3c31388          UBFX     r3,r3,#6,#9           ;318
000092  4358              MULS     r0,r3,r0              ;318
000094  f3c24201          UBFX     r2,r2,#16,#2
000098  1c52              ADDS     r2,r2,#1
00009a  0052              LSLS     r2,r2,#1
;;;322          SystemCoreClock = pllvco/pllp;
00009c  fbb0f0f2          UDIV     r0,r0,r2
0000a0  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L1.162|
;;;323          break;
;;;324        default:
;;;325          SystemCoreClock = HSI_VALUE;
;;;326          break;
;;;327      }
;;;328      /* Compute HCLK frequency --------------------------------------------------*/
;;;329      /* Get HCLK prescaler */
;;;330      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
0000a2  6828              LDR      r0,[r5,#0]
0000a4  4a30              LDR      r2,|L1.360|
0000a6  f3c01003          UBFX     r0,r0,#4,#4
0000aa  1d12              ADDS     r2,r2,#4
0000ac  5c10              LDRB     r0,[r2,r0]
;;;331      /* HCLK frequency */
;;;332      SystemCoreClock >>= tmp;
0000ae  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
0000b0  40c2              LSRS     r2,r2,r0
0000b2  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;333    }
0000b4  bd70              POP      {r4-r6,pc}
;;;334    
                          ENDP

                  SetSysClock PROC
;;;342      */
;;;343    static void SetSysClock(void)
0000b6  b50c              PUSH     {r2,r3,lr}
;;;344    {
;;;345    /******************************************************************************/
;;;346    /*            PLL (clocked by HSE) used as System clock source                */
;;;347    /******************************************************************************/
;;;348      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
0000b8  2200              MOVS     r2,#0
;;;349      
;;;350      /* Enable HSE */
;;;351      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
0000ba  4927              LDR      r1,|L1.344|
0000bc  9200              STR      r2,[sp,#0]            ;348
0000be  9201              STR      r2,[sp,#4]
0000c0  6808              LDR      r0,[r1,#0]
0000c2  f4403080          ORR      r0,r0,#0x10000
0000c6  6008              STR      r0,[r1,#0]
;;;352     
;;;353      /* Wait till HSE is ready and if Time out is reached exit */
;;;354      do
;;;355      {
;;;356        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;357        StartUpCounter++;
;;;358      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
0000c8  f44f63a0          MOV      r3,#0x500
                  |L1.204|
0000cc  6808              LDR      r0,[r1,#0]            ;356
0000ce  f4003000          AND      r0,r0,#0x20000        ;356
0000d2  9001              STR      r0,[sp,#4]            ;357
0000d4  9800              LDR      r0,[sp,#0]            ;357
0000d6  1c40              ADDS     r0,r0,#1              ;357
0000d8  9000              STR      r0,[sp,#0]
0000da  9801              LDR      r0,[sp,#4]
0000dc  b910              CBNZ     r0,|L1.228|
0000de  9800              LDR      r0,[sp,#0]
0000e0  4298              CMP      r0,r3
0000e2  d1f3              BNE      |L1.204|
                  |L1.228|
;;;359    
;;;360      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
0000e4  6808              LDR      r0,[r1,#0]
0000e6  0380              LSLS     r0,r0,#14
0000e8  d532              BPL      |L1.336|
;;;361      {
;;;362        HSEStatus = (uint32_t)0x01;
0000ea  2001              MOVS     r0,#1
;;;363      }
;;;364      else
;;;365      {
;;;366        HSEStatus = (uint32_t)0x00;
;;;367      }
;;;368    
;;;369      if (HSEStatus == (uint32_t)0x01)
;;;370      {
;;;371        /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
;;;372        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
0000ec  9001              STR      r0,[sp,#4]
0000ee  481a              LDR      r0,|L1.344|
0000f0  3040              ADDS     r0,r0,#0x40
0000f2  6802              LDR      r2,[r0,#0]
0000f4  f0425280          ORR      r2,r2,#0x10000000
0000f8  6002              STR      r2,[r0,#0]
;;;373        PWR->CR |= PWR_CR_VOS;
0000fa  481c              LDR      r0,|L1.364|
0000fc  6802              LDR      r2,[r0,#0]
0000fe  f4424280          ORR      r2,r2,#0x4000
000102  6002              STR      r2,[r0,#0]
;;;374    
;;;375        /* HCLK = SYSCLK / 1*/
;;;376        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000104  4814              LDR      r0,|L1.344|
000106  3008              ADDS     r0,r0,#8
000108  6802              LDR      r2,[r0,#0]
00010a  6002              STR      r2,[r0,#0]
;;;377          
;;;378        /* PCLK2 = HCLK / 2*/
;;;379        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
00010c  6802              LDR      r2,[r0,#0]
00010e  6002              STR      r2,[r0,#0]
;;;380        
;;;381        /* PCLK1 = HCLK / 4*/
;;;382        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
000110  6802              LDR      r2,[r0,#0]
000112  f44252a0          ORR      r2,r2,#0x1400
000116  6002              STR      r2,[r0,#0]
;;;383    
;;;384        /* Configure the main PLL 
;;;385    	 	* Reset Value : 0x24003010
;;;386    	 	* VCO : 8MHz
;;;387    	 	* PLLN = 420 (0x1A4, 0b1_1010_0100)
;;;388    	 	* PLLM = 10	 (0xA, 0b00_1010)
;;;389    	 	* PLLP = 0 (value ='2' )
;;;390    	 	* PLLQ = 7 
;;;391    	 	* f(vco clolk) = 8MHz * 420 * 10 = 336MHz
;;;392    	 	* f(pll general clock output) = 336MHz / 2(PLLP) = 168MHz
;;;393    	 	* f(usb otg fs, sdio, rng, clock outpu) = 336MHz / 7(PLLQ) = 48MHz	
;;;394    	 	* 0010_01111_0000_0000_0110_1001_0000_1010
;;;395    	 	* RCC->PLLCFGR =   0x2700690A
;;;396      	 */
;;;397        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
000118  1f03              SUBS     r3,r0,#4
00011a  4a15              LDR      r2,|L1.368|
00011c  601a              STR      r2,[r3,#0]
;;;398    
;;;399        /* Enable the main PLL */
;;;400        RCC->CR |= RCC_CR_PLLON;
00011e  680a              LDR      r2,[r1,#0]
000120  f0427280          ORR      r2,r2,#0x1000000
000124  600a              STR      r2,[r1,#0]
                  |L1.294|
;;;401    
;;;402        /* Wait till the main PLL is ready */
;;;403        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000126  680a              LDR      r2,[r1,#0]
000128  0192              LSLS     r2,r2,#6
00012a  d5fc              BPL      |L1.294|
;;;404        {
;;;405        }
;;;406       
;;;407        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;408        FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
00012c  4a11              LDR      r2,|L1.372|
00012e  f2406105          MOV      r1,#0x605
000132  6011              STR      r1,[r2,#0]
;;;409    
;;;410        /* Select the main PLL as system clock source */
;;;411        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000134  6801              LDR      r1,[r0,#0]
000136  f0210103          BIC      r1,r1,#3
00013a  6001              STR      r1,[r0,#0]
;;;412        RCC->CFGR |= RCC_CFGR_SW_PLL;
00013c  6801              LDR      r1,[r0,#0]
00013e  f0410102          ORR      r1,r1,#2
000142  6001              STR      r1,[r0,#0]
                  |L1.324|
;;;413    
;;;414        /* Wait till the main PLL is used as system clock source */
;;;415        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000144  6801              LDR      r1,[r0,#0]
000146  f3c10181          UBFX     r1,r1,#2,#2
00014a  2902              CMP      r1,#2
00014c  d1fa              BNE      |L1.324|
;;;416        {
;;;417        }
;;;418      }
;;;419      else
;;;420      { /* If HSE fails to start-up, the application will have wrong clock
;;;421             configuration. User can add here some code to deal with this error */
;;;422      }
;;;423    
;;;424    }
00014e  bd0c              POP      {r2,r3,pc}
                  |L1.336|
000150  9201              STR      r2,[sp,#4]            ;366
000152  bd0c              POP      {r2,r3,pc}
;;;425    
                          ENDP

                  |L1.340|
                          DCD      0xe000ed88
                  |L1.344|
                          DCD      0x40023800
                  |L1.348|
                          DCD      0xfef6ffff
                  |L1.352|
                          DCD      0x24003010
                  |L1.356|
                          DCD      0x00f42400
                  |L1.360|
                          DCD      ||.data||
                  |L1.364|
                          DCD      0x40007000
                  |L1.368|
                          DCD      0x07405408
                  |L1.372|
                          DCD      0x40023c00

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\CMSIS\\Device\\ST\\STM32F4xx\\Source\\Templates\\system_stm32f4xx.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
