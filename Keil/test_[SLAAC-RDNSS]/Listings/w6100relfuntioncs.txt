; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\w6100relfuntioncs.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\w6100relfuntioncs.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\w6100relfuntioncs.crf W6100RelFuntioncs.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sysinit PROC
;;;7      
;;;8      void sysinit(void* arg)
000000  b508              PUSH     {r3,lr}
;;;9      {
;;;10     	intr_kind temp;
;;;11     	
;;;12     	/*
;;;13     	 */
;;;14     	temp = IK_DEST_UNREACH;
000002  2202              MOVS     r2,#2
;;;15     
;;;16     	if(ctlwizchip(CW_INIT_WIZCHIP,arg) == -1)
000004  4601              MOV      r1,r0
000006  2004              MOVS     r0,#4
000008  9200              STR      r2,[sp,#0]
00000a  f7fffffe          BL       ctlwizchip
00000e  1c40              ADDS     r0,r0,#1
000010  d102              BNE      |L1.24|
;;;17     	{
;;;18     		printf("W6100 initialized fail\r\n");
000012  a054              ADR      r0,|L1.356|
000014  f7fffffe          BL       __2printf
                  |L1.24|
;;;19     	}
;;;20     
;;;21     	if(ctlwizchip(CW_SET_INTRMASK,&temp) == -1)
000018  4669              MOV      r1,sp
00001a  2007              MOVS     r0,#7
00001c  f7fffffe          BL       ctlwizchip
000020  1c40              ADDS     r0,r0,#1
000022  d102              BNE      |L1.42|
;;;22     	{
;;;23     		printf("W6100 interrupt\r\n");
000024  a056              ADR      r0,|L1.384|
000026  f7fffffe          BL       __2printf
                  |L1.42|
;;;24     	}
;;;25     }
00002a  bd08              POP      {r3,pc}
;;;26     
                          ENDP

                  spiReadByte PROC
;;;27     uint8_t spiReadByte(void)
00002c  b510              PUSH     {r4,lr}
;;;28     {
;;;29     	while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_TXE) == RESET);
00002e  4c59              LDR      r4,|L1.404|
                  |L1.48|
000030  2102              MOVS     r1,#2
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_I2S_GetFlagStatus
000038  2800              CMP      r0,#0
00003a  d0f9              BEQ      |L1.48|
;;;30     	SPI_I2S_SendData(Open_SPIx, 0xff);
00003c  21ff              MOVS     r1,#0xff
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       SPI_I2S_SendData
                  |L1.68|
;;;31     	while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_RXNE) == RESET);
000044  2101              MOVS     r1,#1
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       SPI_I2S_GetFlagStatus
00004c  2800              CMP      r0,#0
00004e  d0f9              BEQ      |L1.68|
;;;32     	return SPI_I2S_ReceiveData(Open_SPIx);
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       SPI_I2S_ReceiveData
000056  b2c0              UXTB     r0,r0
;;;33     }
000058  bd10              POP      {r4,pc}
;;;34     
                          ENDP

                  spiWriteByte PROC
;;;35     void spiWriteByte(uint8_t byte)
00005a  b570              PUSH     {r4-r6,lr}
;;;36     {
;;;37     	while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_TXE) == RESET);
00005c  4c4d              LDR      r4,|L1.404|
00005e  4605              MOV      r5,r0                 ;36
                  |L1.96|
000060  2102              MOVS     r1,#2
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       SPI_I2S_GetFlagStatus
000068  2800              CMP      r0,#0
00006a  d0f9              BEQ      |L1.96|
;;;38     	SPI_I2S_SendData(Open_SPIx, byte);
00006c  4629              MOV      r1,r5
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       SPI_I2S_SendData
                  |L1.116|
;;;39     	while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_RXNE) == RESET);
000074  2101              MOVS     r1,#1
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       SPI_I2S_GetFlagStatus
00007c  2800              CMP      r0,#0
00007e  d0f9              BEQ      |L1.116|
;;;40     	SPI_I2S_ReceiveData(Open_SPIx);
000080  4620              MOV      r0,r4
000082  e8bd4070          POP      {r4-r6,lr}
000086  f7ffbffe          B.W      SPI_I2S_ReceiveData
;;;41     }
;;;42     void spiReadBurst(uint8_t* pbuf,datasize_t len)
                          ENDP

                  spiReadBurst PROC
00008a  e92d41f0          PUSH     {r4-r8,lr}
;;;43     {
00008e  460e              MOV      r6,r1
000090  4607              MOV      r7,r0
;;;44     	uint8_t i;
;;;45     	for(i=0; i<len; i++){
000092  2400              MOVS     r4,#0
;;;46     		while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_TXE) == RESET);
000094  4d3f              LDR      r5,|L1.404|
000096  e015              B        |L1.196|
                  |L1.152|
000098  2102              MOVS     r1,#2
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000a0  2800              CMP      r0,#0
0000a2  d0f9              BEQ      |L1.152|
;;;47     		SPI_I2S_SendData(Open_SPIx, 0xff);
0000a4  21ff              MOVS     r1,#0xff
0000a6  4628              MOV      r0,r5
0000a8  f7fffffe          BL       SPI_I2S_SendData
                  |L1.172|
;;;48     		while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_RXNE) == RESET);
0000ac  2101              MOVS     r1,#1
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000b4  2800              CMP      r0,#0
0000b6  d0f9              BEQ      |L1.172|
;;;49     		pbuf[i] = SPI_I2S_ReceiveData(Open_SPIx);
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       SPI_I2S_ReceiveData
0000be  5538              STRB     r0,[r7,r4]
0000c0  1c64              ADDS     r4,r4,#1
0000c2  b2e4              UXTB     r4,r4                 ;45
                  |L1.196|
0000c4  42b4              CMP      r4,r6                 ;45
0000c6  dbe7              BLT      |L1.152|
                  |L1.200|
;;;50     	}
;;;51     }
0000c8  e8bd81f0          POP      {r4-r8,pc}
;;;52     
                          ENDP

                  spiWriteBurst PROC
;;;53     void spiWriteBurst(uint8_t* pbuf, datasize_t len)
0000cc  e92d41f0          PUSH     {r4-r8,lr}
;;;54     {
0000d0  460e              MOV      r6,r1
0000d2  4607              MOV      r7,r0
;;;55     	uint8_t i;
;;;56     	for(i = 0; i<len; i++){
0000d4  2400              MOVS     r4,#0
;;;57     		while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_TXE) == RESET);
0000d6  4d2f              LDR      r5,|L1.404|
0000d8  e014              B        |L1.260|
                  |L1.218|
0000da  2102              MOVS     r1,#2
0000dc  4628              MOV      r0,r5
0000de  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000e2  2800              CMP      r0,#0
0000e4  d0f9              BEQ      |L1.218|
;;;58     		SPI_I2S_SendData(Open_SPIx, pbuf[i]);
0000e6  5d39              LDRB     r1,[r7,r4]
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       SPI_I2S_SendData
                  |L1.238|
;;;59     		while (SPI_I2S_GetFlagStatus(Open_SPIx, SPI_I2S_FLAG_RXNE) == RESET);
0000ee  2101              MOVS     r1,#1
0000f0  4628              MOV      r0,r5
0000f2  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000f6  2800              CMP      r0,#0
0000f8  d0f9              BEQ      |L1.238|
;;;60     		SPI_I2S_ReceiveData(Open_SPIx);
0000fa  4628              MOV      r0,r5
0000fc  f7fffffe          BL       SPI_I2S_ReceiveData
000100  1c64              ADDS     r4,r4,#1
000102  b2e4              UXTB     r4,r4                 ;56
                  |L1.260|
000104  42b4              CMP      r4,r6                 ;56
000106  dbe8              BLT      |L1.218|
;;;61     	}
;;;62     }
000108  e7de              B        |L1.200|
;;;63     
                          ENDP

                  busWriteByte PROC
;;;64     //(*bus_wb)(uint32_t addr, iodata_t wb);
;;;65     void busWriteByte(uint32_t addr, iodata_t data)
00010a  f04f42c0          MOV      r2,#0x60000000
;;;66     {
;;;67     	(*((volatile uint8_t*)(_WIZCHIP_IO_BASE_+1))) = (uint8_t)((addr &0xFF00)>>8);
00010e  0a03              LSRS     r3,r0,#8
000110  7053              STRB     r3,[r2,#1]
;;;68     	(*((volatile uint8_t*)(_WIZCHIP_IO_BASE_+2))) = (uint8_t)((addr) & 0x00FF);
000112  7090              STRB     r0,[r2,#2]
;;;69     	(*((volatile uint8_t*)(_WIZCHIP_IO_BASE_+3))) = data;
000114  70d1              STRB     r1,[r2,#3]
;;;70     }
000116  4770              BX       lr
;;;71     
                          ENDP

                  busReadByte PROC
;;;72     //iodata_t (*bus_rb)(uint32_t addr);
;;;73     iodata_t busReadByte(uint32_t addr)
000118  f04f41c0          MOV      r1,#0x60000000
;;;74     {
;;;75     	(*((volatile uint8_t*)(_WIZCHIP_IO_BASE_+1))) = (uint8_t)((addr &0xFF00)>>8);
00011c  0a02              LSRS     r2,r0,#8
00011e  704a              STRB     r2,[r1,#1]
;;;76     	(*((volatile uint8_t*)(_WIZCHIP_IO_BASE_+2))) = (uint8_t)((addr) & 0x00FF);
000120  7088              STRB     r0,[r1,#2]
;;;77     	return  (*((volatile uint8_t*)(_WIZCHIP_IO_BASE_+3)));
000122  78c8              LDRB     r0,[r1,#3]
;;;78     }
000124  4770              BX       lr
;;;79     
                          ENDP

                  csEnable PROC
;;;80      void csEnable(void)
000126  2180              MOVS     r1,#0x80
;;;81     {
;;;82     	GPIO_ResetBits(GPIO_CS_PORT, GPIO_PIN_CS);
000128  481b              LDR      r0,|L1.408|
00012a  f7ffbffe          B.W      GPIO_ResetBits
;;;83     }
;;;84     
                          ENDP

                  csDisable PROC
;;;85      void csDisable(void)
00012e  2180              MOVS     r1,#0x80
;;;86     {
;;;87     	GPIO_SetBits(GPIO_CS_PORT, GPIO_PIN_CS);
000130  4819              LDR      r0,|L1.408|
000132  f7ffbffe          B.W      GPIO_SetBits
;;;88     }
;;;89     
                          ENDP

                  resetAssert PROC
;;;90      void resetAssert(void)
000136  f44f4180          MOV      r1,#0x4000
;;;91     {
;;;92     	GPIO_ResetBits(WIZReset_Port, WIZReset_Pin);
00013a  4818              LDR      r0,|L1.412|
00013c  f7ffbffe          B.W      GPIO_ResetBits
;;;93     }
;;;94     
                          ENDP

                  resetDeassert PROC
;;;95     //inline void resetDeassert(void)
;;;96      void resetDeassert(void)
000140  f44f4180          MOV      r1,#0x4000
;;;97     {
;;;98     	GPIO_SetBits(WIZReset_Port, WIZReset_Pin);
000144  4815              LDR      r0,|L1.412|
000146  f7ffbffe          B.W      GPIO_SetBits
;;;99     }
;;;100    
                          ENDP

                  EnterCris PROC
;;;101    void EnterCris(void)
00014a  4915              LDR      r1,|L1.416|
00014c  f44f7080          MOV      r0,#0x100
000150  f8c10180          STR      r0,[r1,#0x180]
;;;102    {
;;;103    	NVIC_DisableIRQ(EXTI15_10_IRQn);
;;;104    }
000154  4770              BX       lr
;;;105    
                          ENDP

                  ExitCris PROC
;;;106    void ExitCris(void)
000156  4912              LDR      r1,|L1.416|
000158  f44f7080          MOV      r0,#0x100
00015c  f8c10100          STR      r0,[r1,#0x100]
;;;107    {
;;;108    	NVIC_EnableIRQ(EXTI15_10_IRQn);
;;;109    }
000160  4770              BX       lr
;;;110    //void W6100Reset(void)
                          ENDP

000162  0000              DCW      0x0000
                  |L1.356|
000164  57363130          DCB      "W6100 initialized fail\r\n",0
000168  3020696e
00016c  69746961
000170  6c697a65
000174  64206661
000178  696c0d0a
00017c  00      
00017d  00                DCB      0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L1.384|
000180  57363130          DCB      "W6100 interrupt\r\n",0
000184  3020696e
000188  74657272
00018c  7570740d
000190  0a00    
000192  00                DCB      0
000193  00                DCB      0
                  |L1.404|
                          DCD      0x40013000
                  |L1.408|
                          DCD      0x40020c00
                  |L1.412|
                          DCD      0x40021400
                  |L1.416|
                          DCD      0xe000e004

;*** Start embedded assembler ***

#line 1 "W6100RelFuntioncs.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___19_W6100RelFuntioncs_c_sysinit____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_W6100RelFuntioncs_c_sysinit____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___19_W6100RelFuntioncs_c_sysinit____REVSH|
#line 128
|__asm___19_W6100RelFuntioncs_c_sysinit____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
