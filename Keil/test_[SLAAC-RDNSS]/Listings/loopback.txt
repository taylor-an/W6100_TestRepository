; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\objects\loopback.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\loopback.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\test_[SLAAC-RDNSS] -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\io6Library\Application\loopback -I..\..\Libraries\io6Library\Ethernet -I..\..\Libraries\io6Library\Ethernet\W6100 -I..\..\Libraries\io6Library\Internet\DHCP -I..\..\Libraries\io6Library\Internet\DNS -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\io6Library\Internet\DHCP6 -I.\RTE\_Target_1 -Ic:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -Ic:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F407xx -DSTM32F4XX -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\loopback.crf ..\..\Libraries\io6Library\Application\loopback\loopback.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  loopback_tcps PROC
;;;10     
;;;11     int32_t loopback_tcps(uint8_t sn, uint16_t port, uint8_t* buf, uint8_t loopback_mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;12         {
000004  b096              SUB      sp,sp,#0x58
000006  4616              MOV      r6,r2
000008  460f              MOV      r7,r1
00000a  461d              MOV      r5,r3
00000c  4680              MOV      r8,r0
;;;13            int32_t ret;
;;;14            uint16_t size = 0, sentsize=0;
00000e  2400              MOVS     r4,#0
;;;15            int8_t status,inter;
;;;16            uint8_t tmp;
;;;17            uint32_t recevied_size, remained_size;
;;;18     	   uint8_t arg_tmp8;
;;;19     
;;;20     
;;;21         #ifdef _LOOPBACK_DEBUG_
;;;22            uint8_t dst_ip[16];
;;;23            uint16_t dst_port;
;;;24         #endif
;;;25            getsockopt(sn, SO_STATUS,&status);
000010  aa12              ADD      r2,sp,#0x48
000012  210a              MOVS     r1,#0xa
000014  f7fffffe          BL       getsockopt
;;;26            switch(status)
000018  f99d0048          LDRSB    r0,[sp,#0x48]
00001c  2800              CMP      r0,#0
00001e  d07a              BEQ      |L1.278|
000020  2813              CMP      r0,#0x13
000022  d079              BEQ      |L1.280|
;;;27            {
;;;28               case SOCK_ESTABLISHED :
;;;29             	  ctlsocket(sn,CS_GET_INTERRUPT,&inter);
;;;30                  if(inter & Sn_IR_CON)
;;;31                  {
;;;32         #ifdef _LOOPBACK_DEBUG_
;;;33                 	 getsockopt(sn,SO_DESTIP,dst_ip);
;;;34         			if(loopback_mode == AS_IPV6)
;;;35                     {
;;;36     
;;;37                         printf("Peer IP : %.2X%.2X:%.2X%.2X:%2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",
;;;38                         dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3], dst_ip[4], dst_ip[5], dst_ip[6], dst_ip[7],
;;;39                         dst_ip[8], dst_ip[9], dst_ip[10], dst_ip[11], dst_ip[12], dst_ip[13], dst_ip[14], dst_ip[15]);
;;;40                     }
;;;41                     else
;;;42                     {
;;;43                         //getSn_DIPR(sn,dst_ip);
;;;44                         printf("Peer IP : %.3d.%.3d.%.3d.%.3d\r\n",
;;;45                         dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
;;;46                     }
;;;47         			 getsockopt(sn,SO_DESTPORT,&dst_port);
;;;48         			 printf("Peer Port : %d\r\n", dst_port);
;;;49         #endif
;;;50     					 arg_tmp8 = Sn_IR_CON;
;;;51         			 ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
;;;52                  }
;;;53     			  getsockopt(sn,SO_RECVBUF,&recevied_size);
;;;54     			  if(recevied_size > 0){
;;;55     				  if(recevied_size > DATA_BUF_SIZE) recevied_size = DATA_BUF_SIZE;
000024  f44f6700          MOV      r7,#0x800
000028  2817              CMP      r0,#0x17              ;26
00002a  d002              BEQ      |L1.50|
00002c  281c              CMP      r0,#0x1c              ;26
00002e  d174              BNE      |L1.282|
000030  e082              B        |L1.312|
                  |L1.50|
000032  aa13              ADD      r2,sp,#0x4c           ;29
000034  2105              MOVS     r1,#5                 ;29
000036  4640              MOV      r0,r8                 ;29
000038  f7fffffe          BL       ctlsocket
00003c  f89d004c          LDRB     r0,[sp,#0x4c]         ;30
000040  07c0              LSLS     r0,r0,#31             ;30
000042  d024              BEQ      |L1.142|
000044  aa0d              ADD      r2,sp,#0x34           ;33
000046  2104              MOVS     r1,#4                 ;33
000048  4640              MOV      r0,r8                 ;33
00004a  f7fffffe          BL       getsockopt
00004e  2d17              CMP      r5,#0x17              ;34
000050  d033              BEQ      |L1.186|
000052  f89d0037          LDRB     r0,[sp,#0x37]         ;44
000056  9000              STR      r0,[sp,#0]            ;44
000058  f89d3036          LDRB     r3,[sp,#0x36]         ;44
00005c  f89d2035          LDRB     r2,[sp,#0x35]         ;44
000060  f89d1034          LDRB     r1,[sp,#0x34]         ;44
000064  a0fb              ADR      r0,|L1.1108|
000066  f7fffffe          BL       __2printf
                  |L1.106|
00006a  aa14              ADD      r2,sp,#0x50           ;47
00006c  2105              MOVS     r1,#5                 ;47
00006e  4640              MOV      r0,r8                 ;47
000070  f7fffffe          BL       getsockopt
000074  f8bd1050          LDRH     r1,[sp,#0x50]         ;48
000078  a0fe              ADR      r0,|L1.1140|
00007a  f7fffffe          BL       __2printf
00007e  2001              MOVS     r0,#1                 ;50
000080  f88d0054          STRB     r0,[sp,#0x54]         ;50
000084  aa15              ADD      r2,sp,#0x54           ;51
000086  2104              MOVS     r1,#4                 ;51
000088  4640              MOV      r0,r8                 ;51
00008a  f7fffffe          BL       ctlsocket
                  |L1.142|
00008e  aa11              ADD      r2,sp,#0x44           ;53
000090  2109              MOVS     r1,#9                 ;53
000092  4640              MOV      r0,r8                 ;53
000094  f7fffffe          BL       getsockopt
000098  9811              LDR      r0,[sp,#0x44]         ;54
00009a  2800              CMP      r0,#0                 ;54
00009c  d03d              BEQ      |L1.282|
00009e  42b8              CMP      r0,r7
0000a0  d900              BLS      |L1.164|
0000a2  9711              STR      r7,[sp,#0x44]
                  |L1.164|
;;;56     				  ret = recv(sn, buf, recevied_size);
0000a4  9811              LDR      r0,[sp,#0x44]
0000a6  4631              MOV      r1,r6
0000a8  b202              SXTH     r2,r0
0000aa  4640              MOV      r0,r8
0000ac  f7fffffe          BL       recv
;;;57     
;;;58     				  if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
0000b0  2800              CMP      r0,#0
0000b2  dd5e              BLE      |L1.370|
;;;59     				  recevied_size = (uint16_t) ret;
0000b4  b280              UXTH     r0,r0
;;;60     				  sentsize = 0;
;;;61     
;;;62     					while(recevied_size != sentsize)
0000b6  9011              STR      r0,[sp,#0x44]
0000b8  e03b              B        |L1.306|
                  |L1.186|
0000ba  f89d0040          LDRB     r0,[sp,#0x40]         ;37
0000be  ad09              ADD      r5,sp,#0x24           ;37
0000c0  f89d3043          LDRB     r3,[sp,#0x43]         ;37
0000c4  f89d2042          LDRB     r2,[sp,#0x42]         ;37
0000c8  f89d1041          LDRB     r1,[sp,#0x41]         ;37
0000cc  e885000f          STM      r5,{r0-r3}            ;37
0000d0  f89d003c          LDRB     r0,[sp,#0x3c]         ;37
0000d4  ad05              ADD      r5,sp,#0x14           ;37
0000d6  f89d303f          LDRB     r3,[sp,#0x3f]         ;37
0000da  f89d203e          LDRB     r2,[sp,#0x3e]         ;37
0000de  f89d103d          LDRB     r1,[sp,#0x3d]         ;37
0000e2  e885000f          STM      r5,{r0-r3}            ;37
0000e6  f89d0038          LDRB     r0,[sp,#0x38]         ;37
0000ea  ad01              ADD      r5,sp,#4              ;37
0000ec  f89d303b          LDRB     r3,[sp,#0x3b]         ;37
0000f0  f89d203a          LDRB     r2,[sp,#0x3a]         ;37
0000f4  f89d1039          LDRB     r1,[sp,#0x39]         ;37
0000f8  e885000f          STM      r5,{r0-r3}            ;37
0000fc  f89d0037          LDRB     r0,[sp,#0x37]         ;37
000100  9000              STR      r0,[sp,#0]            ;37
000102  f89d3036          LDRB     r3,[sp,#0x36]         ;37
000106  f89d2035          LDRB     r2,[sp,#0x35]         ;37
00010a  f89d1034          LDRB     r1,[sp,#0x34]         ;37
00010e  48de              LDR      r0,|L1.1160|
000110  f7fffffe          BL       __2printf
000114  e7a9              B        |L1.106|
                  |L1.278|
000116  e047              B        |L1.424|
                  |L1.280|
000118  e03b              B        |L1.402|
                  |L1.282|
00011a  e072              B        |L1.514|
                  |L1.284|
;;;63     					{
;;;64     						ret = send(sn, buf+sentsize, recevied_size-sentsize);
00011c  1b00              SUBS     r0,r0,r4
00011e  b202              SXTH     r2,r0
000120  1931              ADDS     r1,r6,r4
000122  4640              MOV      r0,r8
000124  f7fffffe          BL       send
000128  0005              MOVS     r5,r0
;;;65     						if(ret < 0)
00012a  d41e              BMI      |L1.362|
;;;66     						{
;;;67     							close(sn);
;;;68     							return ret;
;;;69     						}
;;;70     						sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
00012c  4420              ADD      r0,r0,r4
00012e  b284              UXTH     r4,r0
000130  9811              LDR      r0,[sp,#0x44]         ;62
                  |L1.306|
000132  42a0              CMP      r0,r4                 ;62
000134  d1f2              BNE      |L1.284|
000136  e064              B        |L1.514|
                  |L1.312|
;;;71     					}
;;;72     			 }
;;;73                  break;
;;;74               case SOCK_CLOSE_WAIT :
;;;75         #ifdef _LOOPBACK_DEBUG_
;;;76                  //printf("%d:CloseWait\r\n",sn);
;;;77         #endif
;;;78             	 getsockopt(sn, SO_RECVBUF, &recevied_size);
000138  aa11              ADD      r2,sp,#0x44
00013a  2109              MOVS     r1,#9
00013c  4640              MOV      r0,r8
00013e  f7fffffe          BL       getsockopt
;;;79         		 if(recevied_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
000142  9811              LDR      r0,[sp,#0x44]
000144  b1e8              CBZ      r0,|L1.386|
;;;80                  {
;;;81         			if(recevied_size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
;;;82         			ret = recv(sn, buf, recevied_size);
000146  b202              SXTH     r2,r0
000148  4631              MOV      r1,r6
00014a  4640              MOV      r0,r8
00014c  f7fffffe          BL       recv
;;;83     
;;;84         			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
000150  2800              CMP      r0,#0
000152  dd0e              BLE      |L1.370|
;;;85         			recevied_size = (uint16_t) ret;
000154  b280              UXTH     r0,r0
;;;86         			sentsize = 0;
;;;87     
;;;88         			while(recevied_size != sentsize)
000156  9011              STR      r0,[sp,#0x44]
000158  e011              B        |L1.382|
                  |L1.346|
;;;89         			{
;;;90         				ret = send(sn, buf+sentsize, recevied_size-sentsize);
00015a  1b00              SUBS     r0,r0,r4
00015c  b202              SXTH     r2,r0
00015e  1931              ADDS     r1,r6,r4
000160  4640              MOV      r0,r8
000162  f7fffffe          BL       send
000166  0005              MOVS     r5,r0
;;;91         				if(ret < 0)
000168  d506              BPL      |L1.376|
                  |L1.362|
;;;92         				{
;;;93         					close(sn);
00016a  4640              MOV      r0,r8
00016c  f7fffffe          BL       close
;;;94         					return ret;
000170  4628              MOV      r0,r5
                  |L1.370|
;;;95         				}
;;;96         				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
;;;97         			}
;;;98                  }
;;;99                  if((ret = disconnect(sn)) != SOCK_OK) return ret;
;;;100        #ifdef _LOOPBACK_DEBUG_
;;;101                 printf("%d:Socket Closed\r\n", sn);
;;;102        #endif
;;;103                 break;
;;;104              case SOCK_INIT :
;;;105        #ifdef _LOOPBACK_DEBUG_
;;;106            	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
;;;107        #endif
;;;108                 if( (ret = listen(sn)) != SOCK_OK) return ret;
;;;109                 break;
;;;110              case SOCK_CLOSED:
;;;111        #ifdef _LOOPBACK_DEBUG_
;;;112                 printf("%d:TCP server loopback start\r\n",sn);
;;;113        #endif
;;;114            	 switch(loopback_mode){
;;;115            	   case AS_IPV4:
;;;116            		    tmp = socket(sn,Sn_MR_TCP4,any_port++,0x00);
;;;117            	   break;
;;;118            	   case AS_IPV6:
;;;119            		   tmp = socket(sn,Sn_MR_TCP6,any_port++,0x00);
;;;120                   break;
;;;121            	   case AS_IPDUAL:
;;;122            		   tmp = socket(sn,Sn_MR_TCPD,any_port++,0x00);
;;;123            	   break;
;;;124            	   default:
;;;125            	   break;
;;;126            	 }
;;;127        		 if(tmp != sn)    /* reinitialize the socket */
;;;128                 {
;;;129        #ifdef _LOOPBACK_DEBUG_
;;;130                     printf("%d : Fail to create socket.\r\n",sn);
;;;131        #endif
;;;132                     return SOCKERR_SOCKNUM;
;;;133                 }
;;;134        #ifdef _LOOPBACK_DEBUG_
;;;135                printf("%d:Socket opened\r\n",sn);
;;;136        #endif
;;;137                 break;
;;;138              default:
;;;139                 break;
;;;140           }
;;;141           return 1;
;;;142        }
000172  b016              ADD      sp,sp,#0x58
000174  e8bd81f0          POP      {r4-r8,pc}
                  |L1.376|
000178  4420              ADD      r0,r0,r4              ;96
00017a  b284              UXTH     r4,r0                 ;96
00017c  9811              LDR      r0,[sp,#0x44]         ;88
                  |L1.382|
00017e  42a0              CMP      r0,r4                 ;88
000180  d1eb              BNE      |L1.346|
                  |L1.386|
000182  4640              MOV      r0,r8                 ;99
000184  f7fffffe          BL       disconnect
000188  2801              CMP      r0,#1                 ;99
00018a  d1f2              BNE      |L1.370|
00018c  4641              MOV      r1,r8                 ;101
00018e  a0bf              ADR      r0,|L1.1164|
000190  e035              B        |L1.510|
                  |L1.402|
000192  463a              MOV      r2,r7                 ;106
000194  4641              MOV      r1,r8                 ;106
000196  a0c2              ADR      r0,|L1.1184|
000198  f7fffffe          BL       __2printf
00019c  4640              MOV      r0,r8                 ;108
00019e  f7fffffe          BL       listen
0001a2  2801              CMP      r0,#1                 ;108
0001a4  d1e5              BNE      |L1.370|
0001a6  e02c              B        |L1.514|
                  |L1.424|
0001a8  4641              MOV      r1,r8                 ;112
0001aa  a0c8              ADR      r0,|L1.1228|
0001ac  f7fffffe          BL       __2printf
0001b0  48ce              LDR      r0,|L1.1260|
0001b2  2d02              CMP      r5,#2                 ;114
0001b4  d004              BEQ      |L1.448|
0001b6  2d0b              CMP      r5,#0xb               ;114
0001b8  d01a              BEQ      |L1.496|
0001ba  2d17              CMP      r5,#0x17              ;114
0001bc  d10f              BNE      |L1.478|
0001be  e005              B        |L1.460|
                  |L1.448|
0001c0  8802              LDRH     r2,[r0,#0]            ;116  ; any_port
0001c2  2300              MOVS     r3,#0                 ;116
0001c4  1c51              ADDS     r1,r2,#1              ;116
0001c6  8001              STRH     r1,[r0,#0]            ;116
0001c8  2101              MOVS     r1,#1                 ;116
0001ca  e004              B        |L1.470|
                  |L1.460|
0001cc  8802              LDRH     r2,[r0,#0]            ;119  ; any_port
0001ce  2300              MOVS     r3,#0                 ;119
0001d0  1c51              ADDS     r1,r2,#1              ;119
0001d2  8001              STRH     r1,[r0,#0]            ;119
0001d4  2109              MOVS     r1,#9                 ;119
                  |L1.470|
0001d6  4640              MOV      r0,r8                 ;116
0001d8  f7fffffe          BL       socket
0001dc  b2c6              UXTB     r6,r0                 ;116
                  |L1.478|
0001de  4546              CMP      r6,r8                 ;127
0001e0  4641              MOV      r1,r8                 ;135
0001e2  d00b              BEQ      |L1.508|
0001e4  a0c2              ADR      r0,|L1.1264|
0001e6  f7fffffe          BL       __2printf
0001ea  f04f30ff          MOV      r0,#0xffffffff        ;132
0001ee  e7c0              B        |L1.370|
                  |L1.496|
0001f0  8802              LDRH     r2,[r0,#0]            ;122  ; any_port
0001f2  2300              MOVS     r3,#0                 ;122
0001f4  1c51              ADDS     r1,r2,#1              ;122
0001f6  8001              STRH     r1,[r0,#0]            ;122
0001f8  210d              MOVS     r1,#0xd               ;122
0001fa  e7ec              B        |L1.470|
                  |L1.508|
0001fc  a0c4              ADR      r0,|L1.1296|
                  |L1.510|
0001fe  f7fffffe          BL       __2printf
                  |L1.514|
000202  2001              MOVS     r0,#1                 ;141
000204  e7b5              B        |L1.370|
;;;143    
                          ENDP

                  loopback_tcpc PROC
;;;144    
;;;145    int32_t loopback_tcpc(uint8_t sn, uint8_t* buf, uint8_t* destip, uint16_t destport, uint8_t loopback_mode)
000206  e92d43f0          PUSH     {r4-r9,lr}
;;;146        {
00020a  b08d              SUB      sp,sp,#0x34
00020c  4615              MOV      r5,r2
00020e  460e              MOV      r6,r1
000210  461f              MOV      r7,r3
000212  4681              MOV      r9,r0
;;;147           int32_t ret; // return value for SOCK_ERRORs
;;;148           uint16_t size = 0, sentsize=0;
000214  2400              MOVS     r4,#0
;;;149           uint8_t status,inter,addr_len;
;;;150           uint32_t recevied_size, remained_size;
;;;151           uint8_t tmp;
;;;152    	   uint8_t arg_tmp8;
;;;153    		wiz_IPAddress destinfo;
;;;154    
;;;155    
;;;156           // Socket Status Transitions
;;;157           // Check the W6100 Socket n status register (Sn_SR, The 'Sn_SR' controlled by Sn_CR command or Packet send/recv status)
;;;158           getsockopt(sn,SO_STATUS,&status);
000216  aa09              ADD      r2,sp,#0x24
000218  210a              MOVS     r1,#0xa
00021a  f8dd8050          LDR      r8,[sp,#0x50]
00021e  f7fffffe          BL       getsockopt
;;;159           switch(status)
000222  f89d0024          LDRB     r0,[sp,#0x24]
000226  2800              CMP      r0,#0
000228  d071              BEQ      |L1.782|
00022a  2813              CMP      r0,#0x13
00022c  d070              BEQ      |L1.784|
;;;160           {
;;;161              case SOCK_ESTABLISHED :
;;;162            	 ctlsocket(sn,CS_GET_INTERRUPT,&inter);
;;;163                 if(inter & Sn_IR_CON)	// Socket n interrupt register mask; TCP CON interrupt = connection with peer is successful
;;;164                 {
;;;165        #ifdef _LOOPBACK_DEBUG_
;;;166        			printf("%d:Connected to - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
;;;167        #endif
;;;168    				arg_tmp8 = Sn_IR_CON;
;;;169        		ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);// this interrupt should be write the bit cleared to '1'
;;;170    
;;;171                 }
;;;172    
;;;173                 //////////////////////////////////////////////////////////////////////////////////////////////
;;;174                 // Data Transaction Parts; Handle the [data receive and send] process
;;;175                 //////////////////////////////////////////////////////////////////////////////////////////////
;;;176                 getsockopt(sn,SO_RECVBUF,&recevied_size);
;;;177        		 if(recevied_size > 0) // Sn_RX_RSR: Socket n Received Size Register, Receiving data length
;;;178                 {
;;;179        			if(recevied_size > DATA_BUF_SIZE) recevied_size = DATA_BUF_SIZE; // DATA_BUF_SIZE means user defined buffer size (array)
00022e  f44f6800          MOV      r8,#0x800
000232  2817              CMP      r0,#0x17              ;159
000234  d002              BEQ      |L1.572|
000236  281c              CMP      r0,#0x1c              ;159
000238  d140              BNE      |L1.700|
00023a  e040              B        |L1.702|
                  |L1.572|
00023c  aa0a              ADD      r2,sp,#0x28           ;162
00023e  2105              MOVS     r1,#5                 ;162
000240  4648              MOV      r0,r9                 ;162
000242  f7fffffe          BL       ctlsocket
000246  f89d0028          LDRB     r0,[sp,#0x28]         ;163
00024a  07c0              LSLS     r0,r0,#31             ;163
00024c  d012              BEQ      |L1.628|
00024e  78e8              LDRB     r0,[r5,#3]            ;166
000250  78a9              LDRB     r1,[r5,#2]            ;166
000252  e9cd1000          STRD     r1,r0,[sp,#0]         ;166
000256  9702              STR      r7,[sp,#8]            ;166
000258  786b              LDRB     r3,[r5,#1]            ;166
00025a  782a              LDRB     r2,[r5,#0]            ;166
00025c  4649              MOV      r1,r9                 ;166
00025e  a0b1              ADR      r0,|L1.1316|
000260  f7fffffe          BL       __2printf
000264  2001              MOVS     r0,#1                 ;168
000266  f88d002c          STRB     r0,[sp,#0x2c]         ;168
00026a  aa0b              ADD      r2,sp,#0x2c           ;169
00026c  2104              MOVS     r1,#4                 ;169
00026e  4648              MOV      r0,r9                 ;169
000270  f7fffffe          BL       ctlsocket
                  |L1.628|
000274  aa03              ADD      r2,sp,#0xc            ;176
000276  2109              MOVS     r1,#9                 ;176
000278  4648              MOV      r0,r9                 ;176
00027a  f7fffffe          BL       getsockopt
00027e  9803              LDR      r0,[sp,#0xc]          ;177
000280  2800              CMP      r0,#0                 ;177
000282  d01b              BEQ      |L1.700|
000284  4540              CMP      r0,r8
000286  d901              BLS      |L1.652|
000288  f8cd800c          STR      r8,[sp,#0xc]
                  |L1.652|
;;;180        			ret = recv(sn, buf, recevied_size); // Data Receive process (H/W Rx socket buffer -> User's buffer)
00028c  9803              LDR      r0,[sp,#0xc]
00028e  4631              MOV      r1,r6
000290  b202              SXTH     r2,r0
000292  4648              MOV      r0,r9
000294  f7fffffe          BL       recv
;;;181    
;;;182        			if(ret <= 0) return ret; // If the received data length <= 0, receive failed and process end
000298  2800              CMP      r0,#0
00029a  dd35              BLE      |L1.776|
;;;183        			recevied_size = (uint16_t) ret;
00029c  b280              UXTH     r0,r0
;;;184        			sentsize = 0;
;;;185    
;;;186        			// Data sentsize control
;;;187        			while(recevied_size != sentsize)
00029e  9003              STR      r0,[sp,#0xc]
0002a0  e00a              B        |L1.696|
                  |L1.674|
;;;188        			{
;;;189        				ret = send(sn, buf+sentsize, recevied_size-sentsize); // Data send process (User's buffer -> Destination through H/W Tx socket buffer)
0002a2  1b00              SUBS     r0,r0,r4
0002a4  b202              SXTH     r2,r0
0002a6  1931              ADDS     r1,r6,r4
0002a8  4648              MOV      r0,r9
0002aa  f7fffffe          BL       send
0002ae  0005              MOVS     r5,r0
;;;190        				if(ret < 0) // Send Error occurred (sent data length < 0)
0002b0  d426              BMI      |L1.768|
;;;191        				{
;;;192        					close(sn); // socket close
;;;193        					return ret;
;;;194        				}
;;;195        				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
0002b2  4420              ADD      r0,r0,r4
0002b4  b284              UXTH     r4,r0
0002b6  9803              LDR      r0,[sp,#0xc]          ;187
                  |L1.696|
0002b8  42a0              CMP      r0,r4                 ;187
0002ba  d1f2              BNE      |L1.674|
                  |L1.700|
0002bc  e081              B        |L1.962|
                  |L1.702|
;;;196        			}
;;;197                 }
;;;198        		 //////////////////////////////////////////////////////////////////////////////////////////////
;;;199                 break;
;;;200    
;;;201              case SOCK_CLOSE_WAIT :
;;;202        #ifdef _LOOPBACK_DEBUG_
;;;203                 //printf("%d:CloseWait\r\n",sn);
;;;204        #endif
;;;205            	 getsockopt(sn,SO_RECVBUF,&recevied_size);
0002be  aa03              ADD      r2,sp,#0xc
0002c0  2109              MOVS     r1,#9
0002c2  4648              MOV      r0,r9
0002c4  f7fffffe          BL       getsockopt
;;;206        	     if((recevied_size = getSn_RX_RSR(sn)) > 0) // Sn_RX_RSR: Socket n Received Size Register, Receiving data length
0002c8  4648              MOV      r0,r9
0002ca  f7fffffe          BL       getSn_RX_RSR
0002ce  9003              STR      r0,[sp,#0xc]
0002d0  b320              CBZ      r0,|L1.796|
;;;207                 {
;;;208        			if(recevied_size > DATA_BUF_SIZE) recevied_size = DATA_BUF_SIZE; // DATA_BUF_SIZE means user defined buffer size (array)
0002d2  4540              CMP      r0,r8
0002d4  d901              BLS      |L1.730|
0002d6  f8cd800c          STR      r8,[sp,#0xc]
                  |L1.730|
;;;209        			ret = recv(sn, buf, recevied_size); // Data Receive process (H/W Rx socket buffer -> User's buffer)
0002da  9803              LDR      r0,[sp,#0xc]
0002dc  4631              MOV      r1,r6
0002de  b202              SXTH     r2,r0
0002e0  4648              MOV      r0,r9
0002e2  f7fffffe          BL       recv
;;;210    
;;;211        			if(ret <= 0) return ret; // If the received data length <= 0, receive failed and process end
0002e6  2800              CMP      r0,#0
0002e8  dd0e              BLE      |L1.776|
;;;212        			recevied_size = (uint16_t) ret;
0002ea  b280              UXTH     r0,r0
;;;213        			sentsize = 0;
;;;214    
;;;215        			// Data sentsize control
;;;216        			while(recevied_size != sentsize)
0002ec  9003              STR      r0,[sp,#0xc]
0002ee  e013              B        |L1.792|
                  |L1.752|
;;;217        			{
;;;218        				ret = send(sn, buf+sentsize, recevied_size-sentsize); // Data send process (User's buffer -> Destination through H/W Tx socket buffer)
0002f0  1b00              SUBS     r0,r0,r4
0002f2  b202              SXTH     r2,r0
0002f4  1931              ADDS     r1,r6,r4
0002f6  4648              MOV      r0,r9
0002f8  f7fffffe          BL       send
0002fc  0005              MOVS     r5,r0
;;;219        				if(ret < 0) // Send Error occurred (sent data length < 0)
0002fe  d508              BPL      |L1.786|
                  |L1.768|
;;;220        				{
;;;221        					close(sn); // socket close
000300  4648              MOV      r0,r9
000302  f7fffffe          BL       close
;;;222        					return ret;
000306  4628              MOV      r0,r5
                  |L1.776|
;;;223        				}
;;;224        				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
;;;225        			}
;;;226                 }
;;;227                 if((ret=disconnect(sn)) != SOCK_OK) return ret;
;;;228        #ifdef _LOOPBACK_DEBUG_
;;;229                 printf("%d:Socket Closed\r\n", sn);
;;;230        #endif
;;;231                 break;
;;;232    
;;;233              case SOCK_INIT :
;;;234        #ifdef _LOOPBACK_DEBUG_
;;;235            	 printf("%d:Try to connect to the %d.%d.%d.%d : %d\r\n", sn, destip[0], destip[1], destip[2], destip[3], destport);
;;;236        #endif					
;;;237            	 getsockopt(sn,SO_DESTIP,&destinfo);
;;;238    					addr_len = destinfo.len;
;;;239                  if(addr_len == 16){
;;;240                      ret = connect(sn, destip, destport, 16); /* Try to connect to TCP server(Socket, DestIP, DestPort) */
;;;241                  }
;;;242                  else{
;;;243                     ret = connect(sn, destip, destport, 4);
;;;244                  }
;;;245            	  if( ret != SOCK_OK) return ret;	//	Try to TCP connect to the TCP server (destination)
;;;246              break;
;;;247    
;;;248              case SOCK_CLOSED:
;;;249            	 switch(loopback_mode){
;;;250            	   case AS_IPV4:
;;;251            		    tmp = socket(sn,Sn_MR_TCP4,any_port++,0x00);
;;;252            	   break;
;;;253            	   case AS_IPV6:
;;;254            		   tmp = socket(sn,Sn_MR_TCP6,any_port++,0x00);
;;;255                   break;
;;;256            	   case AS_IPDUAL:
;;;257            		   tmp = socket(sn,Sn_MR_TCPD,any_port++,0x00);
;;;258            	   break;
;;;259            	   default:
;;;260            	   break;
;;;261            	 }
;;;262    
;;;263       		     if(tmp != sn){    /* reinitialize the socket */
;;;264        #ifdef _LOOPBACK_DEBUG_
;;;265                     printf("%d : Fail to create socket.\r\n",sn);
;;;266        #endif
;;;267                     return SOCKERR_SOCKNUM;
;;;268                 }
;;;269    
;;;270        #ifdef _LOOPBACK_DEBUG_
;;;271            	 //printf("%d:TCP client loopback start\r\n",sn);
;;;272                 //printf("%d:Socket opened\r\n",sn);
;;;273        #endif
;;;274                 break;
;;;275              default:
;;;276                 break;
;;;277           }
;;;278           return 1;
;;;279        }
000308  b00d              ADD      sp,sp,#0x34
00030a  e8bd83f0          POP      {r4-r9,pc}
                  |L1.782|
00030e  e02e              B        |L1.878|
                  |L1.784|
000310  e00e              B        |L1.816|
                  |L1.786|
000312  4420              ADD      r0,r0,r4              ;224
000314  b284              UXTH     r4,r0                 ;224
000316  9803              LDR      r0,[sp,#0xc]          ;216
                  |L1.792|
000318  42a0              CMP      r0,r4                 ;216
00031a  d1e9              BNE      |L1.752|
                  |L1.796|
00031c  4648              MOV      r0,r9                 ;227
00031e  f7fffffe          BL       disconnect
000322  2801              CMP      r0,#1                 ;227
000324  d1f0              BNE      |L1.776|
000326  4649              MOV      r1,r9                 ;229
000328  a058              ADR      r0,|L1.1164|
00032a  f7fffffe          BL       __2printf
00032e  e048              B        |L1.962|
                  |L1.816|
000330  78e8              LDRB     r0,[r5,#3]            ;235
000332  78a9              LDRB     r1,[r5,#2]            ;235
000334  e9cd1000          STRD     r1,r0,[sp,#0]         ;235
000338  9702              STR      r7,[sp,#8]            ;235
00033a  786b              LDRB     r3,[r5,#1]            ;235
00033c  782a              LDRB     r2,[r5,#0]            ;235
00033e  4649              MOV      r1,r9                 ;235
000340  a082              ADR      r0,|L1.1356|
000342  f7fffffe          BL       __2printf
000346  aa04              ADD      r2,sp,#0x10           ;237
000348  2104              MOVS     r1,#4                 ;237
00034a  4648              MOV      r0,r9                 ;237
00034c  f7fffffe          BL       getsockopt
000350  f89d0020          LDRB     r0,[sp,#0x20]         ;238
000354  2810              CMP      r0,#0x10              ;239
000356  d008              BEQ      |L1.874|
000358  2304              MOVS     r3,#4                 ;243
                  |L1.858|
00035a  463a              MOV      r2,r7                 ;243
00035c  4629              MOV      r1,r5                 ;243
00035e  4648              MOV      r0,r9                 ;243
000360  f7fffffe          BL       connect
000364  2801              CMP      r0,#1                 ;245
000366  d1cf              BNE      |L1.776|
000368  e02b              B        |L1.962|
                  |L1.874|
00036a  2310              MOVS     r3,#0x10              ;240
00036c  e7f5              B        |L1.858|
                  |L1.878|
00036e  495f              LDR      r1,|L1.1260|
000370  4640              MOV      r0,r8                 ;249
000372  f1b80f02          CMP      r8,#2                 ;249
000376  d005              BEQ      |L1.900|
000378  280b              CMP      r0,#0xb               ;249
00037a  d01c              BEQ      |L1.950|
00037c  f1b80f17          CMP      r8,#0x17              ;249
000380  d10f              BNE      |L1.930|
000382  e005              B        |L1.912|
                  |L1.900|
000384  880a              LDRH     r2,[r1,#0]            ;251  ; any_port
000386  2300              MOVS     r3,#0                 ;251
000388  1c50              ADDS     r0,r2,#1              ;251
00038a  8008              STRH     r0,[r1,#0]            ;251
00038c  2101              MOVS     r1,#1                 ;251
00038e  e004              B        |L1.922|
                  |L1.912|
000390  880a              LDRH     r2,[r1,#0]            ;254  ; any_port
000392  2300              MOVS     r3,#0                 ;254
000394  1c50              ADDS     r0,r2,#1              ;254
000396  8008              STRH     r0,[r1,#0]            ;254
000398  2109              MOVS     r1,#9                 ;254
                  |L1.922|
00039a  4648              MOV      r0,r9                 ;251
00039c  f7fffffe          BL       socket
0003a0  b2c5              UXTB     r5,r0                 ;251
                  |L1.930|
0003a2  4648              MOV      r0,r9                 ;263
0003a4  454d              CMP      r5,r9                 ;263
0003a6  d00c              BEQ      |L1.962|
0003a8  4601              MOV      r1,r0                 ;265
0003aa  a051              ADR      r0,|L1.1264|
0003ac  f7fffffe          BL       __2printf
0003b0  f04f30ff          MOV      r0,#0xffffffff        ;267
0003b4  e7a8              B        |L1.776|
                  |L1.950|
0003b6  880a              LDRH     r2,[r1,#0]            ;257  ; any_port
0003b8  2300              MOVS     r3,#0                 ;257
0003ba  1c50              ADDS     r0,r2,#1              ;257
0003bc  8008              STRH     r0,[r1,#0]            ;257
0003be  210d              MOVS     r1,#0xd               ;257
0003c0  e7eb              B        |L1.922|
                  |L1.962|
0003c2  2001              MOVS     r0,#1                 ;278
0003c4  e7a0              B        |L1.776|
;;;280    int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port, uint8_t loopback_mode){
                          ENDP

                  loopback_udps PROC
0003c6  b5f0              PUSH     {r4-r7,lr}
0003c8  b085              SUB      sp,sp,#0x14
0003ca  4616              MOV      r6,r2
0003cc  460d              MOV      r5,r1
0003ce  461c              MOV      r4,r3
0003d0  4607              MOV      r7,r0
;;;281               int8_t status;
;;;282               static uint8_t destip[16] = {0,};
;;;283               static uint16_t destport;
;;;284               uint8_t pack_info;
;;;285               uint8_t addr_len;
;;;286               uint16_t ret;
;;;287               uint32_t recevied_size, remained_size;
;;;288               uint16_t size, sentsize;
;;;289    
;;;290               getsockopt(sn, SO_MODE,&status);
0003d2  aa03              ADD      r2,sp,#0xc
0003d4  210d              MOVS     r1,#0xd
0003d6  f7fffffe          BL       getsockopt
;;;291               switch(status)
0003da  f99d000c          LDRSB    r0,[sp,#0xc]
0003de  b3b8              CBZ      r0,|L1.1104|
0003e0  2802              CMP      r0,#2
0003e2  d003              BEQ      |L1.1004|
0003e4  280a              CMP      r0,#0xa
0003e6  d001              BEQ      |L1.1004|
0003e8  280e              CMP      r0,#0xe
0003ea  d132              BNE      |L1.1106|
                  |L1.1004|
;;;292               {
;;;293               case SOCK_UDP4:
;;;294               case SOCK_UDP6:
;;;295               case SOCK_UDPD:
;;;296               	getsockopt(sn, SO_RECVBUF, &recevied_size);
0003ec  aa02              ADD      r2,sp,#8
0003ee  2109              MOVS     r1,#9
0003f0  4638              MOV      r0,r7
0003f2  f7fffffe          BL       getsockopt
;;;297            	if(recevied_size > DATA_BUF_SIZE) recevied_size = DATA_BUF_SIZE;
0003f6  9802              LDR      r0,[sp,#8]
0003f8  f44f6100          MOV      r1,#0x800
0003fc  4288              CMP      r0,r1
0003fe  d901              BLS      |L1.1028|
000400  9102              STR      r1,[sp,#8]
000402  e001              B        |L1.1032|
                  |L1.1028|
;;;298                     if(recevied_size>0)
000404  2800              CMP      r0,#0
000406  d024              BEQ      |L1.1106|
                  |L1.1032|
;;;299                     {
;;;300                   	     ret = recvfrom(sn, buf, recevied_size, (uint8_t*)&destip, (uint16_t*)&destport, &addr_len);
000408  4838              LDR      r0,|L1.1260|
00040a  a904              ADD      r1,sp,#0x10
00040c  1c80              ADDS     r0,r0,#2
00040e  e9cd0100          STRD     r0,r1,[sp,#0]
000412  9802              LDR      r0,[sp,#8]
000414  4b58              LDR      r3,|L1.1400|
000416  b202              SXTH     r2,r0
000418  4629              MOV      r1,r5
00041a  4638              MOV      r0,r7
00041c  f7fffffe          BL       recvfrom
000420  0400              LSLS     r0,r0,#16
000422  0c00              LSRS     r0,r0,#16
;;;301    
;;;302                   	     if(ret <= 0)
000424  d015              BEQ      |L1.1106|
;;;303                   	    	 return ret;
;;;304                   	     recevied_size = (uint16_t) ret;
;;;305           				 sentsize = 0;
000426  2400              MOVS     r4,#0
;;;306           				 while(sentsize != recevied_size){
;;;307           					ret = sendto(sn, buf+sentsize, recevied_size-sentsize, destip, destport, addr_len);
000428  4e30              LDR      r6,|L1.1260|
00042a  9002              STR      r0,[sp,#8]            ;306
00042c  e00d              B        |L1.1098|
                  |L1.1070|
00042e  f89d2010          LDRB     r2,[sp,#0x10]
000432  8871              LDRH     r1,[r6,#2]  ; destport
000434  e9cd1200          STRD     r1,r2,[sp,#0]
000438  1b00              SUBS     r0,r0,r4
00043a  b202              SXTH     r2,r0
00043c  1929              ADDS     r1,r5,r4
00043e  4b4e              LDR      r3,|L1.1400|
000440  4638              MOV      r0,r7
000442  f7fffffe          BL       sendto
;;;308           					if(ret < 0)
;;;309           					{
;;;310           						 return ret;
;;;311           					}
;;;312           					sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
000446  4420              ADD      r0,r0,r4
000448  b284              UXTH     r4,r0
                  |L1.1098|
00044a  9802              LDR      r0,[sp,#8]            ;306
00044c  4284              CMP      r4,r0                 ;306
00044e  e095              B        |L1.1404|
                  |L1.1104|
000450  e098              B        |L1.1412|
                  |L1.1106|
000452  e095              B        |L1.1408|
                  |L1.1108|
000454  50656572          DCB      "Peer IP : %.3d.%.3d.%.3d.%.3d\r\n",0
000458  20495020
00045c  3a20252e
000460  33642e25
000464  2e33642e
000468  252e3364
00046c  2e252e33
000470  640d0a00
                  |L1.1140|
000474  50656572          DCB      "Peer Port : %d\r\n",0
000478  20506f72
00047c  74203a20
000480  25640d0a
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
                          DCD      ||.conststring||
                  |L1.1164|
00048c  25643a53          DCB      "%d:Socket Closed\r\n",0
000490  6f636b65
000494  7420436c
000498  6f736564
00049c  0d0a00  
00049f  00                DCB      0
                  |L1.1184|
0004a0  25643a4c          DCB      "%d:Listen, TCP server loopback, port [%d]\r\n",0
0004a4  69737465
0004a8  6e2c2054
0004ac  43502073
0004b0  65727665
0004b4  72206c6f
0004b8  6f706261
0004bc  636b2c20
0004c0  706f7274
0004c4  205b2564
0004c8  5d0d0a00
                  |L1.1228|
0004cc  25643a54          DCB      "%d:TCP server loopback start\r\n",0
0004d0  43502073
0004d4  65727665
0004d8  72206c6f
0004dc  6f706261
0004e0  636b2073
0004e4  74617274
0004e8  0d0a00  
0004eb  00                DCB      0
                  |L1.1260|
                          DCD      ||.data||
                  |L1.1264|
0004f0  2564203a          DCB      "%d : Fail to create socket.\r\n",0
0004f4  20466169
0004f8  6c20746f
0004fc  20637265
000500  61746520
000504  736f636b
000508  65742e0d
00050c  0a00    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  25643a53          DCB      "%d:Socket opened\r\n",0
000514  6f636b65
000518  74206f70
00051c  656e6564
000520  0d0a00  
000523  00                DCB      0
                  |L1.1316|
000524  25643a43          DCB      "%d:Connected to - %d.%d.%d.%d : %d\r\n",0
000528  6f6e6e65
00052c  63746564
000530  20746f20
000534  2d202564
000538  2e25642e
00053c  25642e25
000540  64203a20
000544  25640d0a
000548  00      
000549  00                DCB      0
00054a  00                DCB      0
00054b  00                DCB      0
                  |L1.1356|
00054c  25643a54          DCB      "%d:Try to connect to the %d.%d.%d.%d : %d\r\n",0
000550  72792074
000554  6f20636f
000558  6e6e6563
00055c  7420746f
000560  20746865
000564  2025642e
000568  25642e25
00056c  642e2564
000570  203a2025
000574  640d0a00
                  |L1.1400|
                          DCD      ||.bss||
                  |L1.1404|
00057c  f47faf57          BNE      |L1.1070|
                  |L1.1408|
;;;313           				 }
;;;314                     }
;;;315                     break;
;;;316               case SOCK_CLOSED:
;;;317               	switch(loopback_mode)
;;;318                   {
;;;319                   case AS_IPV4:
;;;320                       socket(sn,Sn_MR_UDP4, port, 0x00);
;;;321                       break;
;;;322                   case AS_IPV6:
;;;323                       socket(sn,Sn_MR_UDP6, port,0x00);
;;;324                       break;
;;;325                   case AS_IPDUAL:
;;;326                       socket(sn,Sn_MR_UDPD, port, 0x00);
;;;327                       break;
;;;328                    }
;;;329               	   printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
;;;330    
;;;331               }
;;;332    
;;;333           }
000580  b005              ADD      sp,sp,#0x14
000582  bdf0              POP      {r4-r7,pc}
                  |L1.1412|
000584  2c02              CMP      r4,#2                 ;317
000586  d004              BEQ      |L1.1426|
000588  2c0b              CMP      r4,#0xb               ;317
00058a  d012              BEQ      |L1.1458|
00058c  2c17              CMP      r4,#0x17              ;317
00058e  d10a              BNE      |L1.1446|
000590  e003              B        |L1.1434|
                  |L1.1426|
000592  2300              MOVS     r3,#0                 ;320
000594  4632              MOV      r2,r6                 ;320
000596  2102              MOVS     r1,#2                 ;320
000598  e002              B        |L1.1440|
                  |L1.1434|
00059a  2300              MOVS     r3,#0                 ;323
00059c  4632              MOV      r2,r6                 ;323
00059e  210a              MOVS     r1,#0xa               ;323
                  |L1.1440|
0005a0  4638              MOV      r0,r7                 ;320
0005a2  f7fffffe          BL       socket
                  |L1.1446|
0005a6  4632              MOV      r2,r6                 ;329
0005a8  4639              MOV      r1,r7                 ;329
0005aa  a004              ADR      r0,|L1.1468|
0005ac  f7fffffe          BL       __2printf
0005b0  e7e6              B        |L1.1408|
                  |L1.1458|
0005b2  2300              MOVS     r3,#0                 ;326
0005b4  4632              MOV      r2,r6                 ;326
0005b6  210e              MOVS     r1,#0xe               ;326
0005b8  e7f2              B        |L1.1440|
;;;334    
                          ENDP

0005ba  0000              DCW      0x0000
                  |L1.1468|
0005bc  25643a4f          DCB      "%d:Opened, UDP loopback, port [%d]\r\n",0
0005c0  70656e65
0005c4  642c2055
0005c8  4450206c
0005cc  6f6f7062
0005d0  61636b2c
0005d4  20706f72
0005d8  74205b25
0005dc  645d0d0a
0005e0  00      
0005e1  00                DCB      0
0005e2  00                DCB      0
0005e3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  destip
                          %        16

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  50656572          DCB      "Peer IP : %.2X%.2X:%.2X%.2X:%2X%.2X:%.2X%.2X:%.2X%.2X:%"
000004  20495020
000008  3a20252e
00000c  3258252e
000010  32583a25
000014  2e325825
000018  2e32583a
00001c  25325825
000020  2e32583a
000024  252e3258
000028  252e3258
00002c  3a252e32
000030  58252e32
000034  583a25  
000037  2e325825          DCB      ".2X%.2X:%.2X%.2X:%.2X%.2X\r\n",0
00003b  2e32583a
00003f  252e3258
000043  252e3258
000047  3a252e32
00004b  58252e32
00004f  580d0a00

                          AREA ||.data||, DATA, ALIGN=1

                  any_port
000000  c350              DCW      0xc350
                  destport
000002  0000              DCB      0x00,0x00
